{"version":3,"file":"page-Cxa8OKR8.js","sources":["../../src/services/avatarService.ts","../../src/pages/profile/page.tsx","../../src/hooks/useUser.ts"],"sourcesContent":["import { supabase } from '../lib/supabase'\r\n\r\nexport class AvatarService {\r\n  // Upload avatar image to Supabase storage\r\n  static async uploadAvatar(\r\n    file: File, \r\n    userId: string,\r\n    onProgress?: (progress: number) => void\r\n  ): Promise<string> {\r\n    // Validate file type\r\n    if (!file.type.startsWith('image/')) {\r\n      throw new Error('File must be an image')\r\n    }\r\n\r\n    // Validate file size (max 5MB)\r\n    const maxSize = 5 * 1024 * 1024 // 5MB\r\n    if (file.size > maxSize) {\r\n      throw new Error('File size must be less than 5MB')\r\n    }\r\n\r\n    // Generate unique filename\r\n    const fileExtension = file.name.split('.').pop()\r\n    const fileName = `user-avatars/${userId}/avatar-${Date.now()}.${fileExtension}`\r\n    \r\n    try {\r\n      // Simulate progress for consistency\r\n      if (onProgress) {\r\n        onProgress(50)\r\n      }\r\n      \r\n      // Try to upload to user-avatars bucket first\r\n      let uploadResult = await supabase.storage\r\n        .from('user-avatars')\r\n        .upload(fileName, file, {\r\n          cacheControl: '3600',\r\n          upsert: true\r\n        })\r\n\r\n      // If user-avatars bucket has RLS issues, fallback to anime-posters bucket\r\n      if (uploadResult.error && uploadResult.error.message.includes('row-level security')) {\r\n        console.warn('user-avatars bucket has RLS restrictions, using anime-posters bucket as fallback')\r\n        \r\n        // Use anime-posters bucket as fallback\r\n        const fallbackFileName = `user-avatars/${userId}/avatar-${Date.now()}.${fileExtension}`\r\n        \r\n        uploadResult = await supabase.storage\r\n          .from('anime-posters')\r\n          .upload(fallbackFileName, file, {\r\n            cacheControl: '3600',\r\n            upsert: true\r\n          })\r\n      }\r\n\r\n      if (uploadResult.error) {\r\n        throw new Error(`Failed to upload avatar: ${uploadResult.error.message}`)\r\n      }\r\n\r\n      // Get public URL from the bucket that worked\r\n      const bucket = uploadResult.data.path.includes('user-avatars') ? 'user-avatars' : 'anime-posters'\r\n      const { data: urlData } = supabase.storage\r\n        .from(bucket)\r\n        .getPublicUrl(uploadResult.data.path)\r\n\r\n      // Complete progress\r\n      if (onProgress) {\r\n        onProgress(100)\r\n      }\r\n\r\n      return urlData.publicUrl\r\n    } catch (error) {\r\n      console.error('Avatar upload error:', error)\r\n      throw error\r\n    }\r\n  }\r\n\r\n  // Delete old avatar from storage\r\n  static async deleteAvatar(avatarUrl: string): Promise<void> {\r\n    try {\r\n      // Extract file path from URL\r\n      const url = new URL(avatarUrl)\r\n      const pathParts = url.pathname.split('/')\r\n      const folderPath = pathParts.slice(-2).join('/') // Get folder/filename\r\n      \r\n      // Determine which bucket to use based on URL\r\n      const bucket = avatarUrl.includes('anime-posters') ? 'anime-posters' : 'user-avatars'\r\n      \r\n      // Delete from storage\r\n      const { error } = await supabase.storage\r\n        .from(bucket)\r\n        .remove([folderPath])\r\n\r\n      if (error) {\r\n        console.warn('Failed to delete old avatar:', error.message)\r\n        // Don't throw error as this is not critical\r\n      }\r\n    } catch (error) {\r\n      console.warn('Error deleting old avatar:', error)\r\n      // Don't throw error as this is not critical\r\n    }\r\n  }\r\n\r\n  // Get avatar URL with fallback\r\n  static getAvatarUrl(avatarUrl?: string | null, userId?: string): string {\r\n    if (avatarUrl) {\r\n      return avatarUrl\r\n    }\r\n    \r\n    // Fallback to generated avatar\r\n    return `https://readdy.ai/api/search-image?query=anime%20character%20avatar%2C%20friendly%20face%2C%20${userId || 'user'}%2C%20simple%20background%2C%20portrait&width=150&height=150&seq=avatar-${userId || 'default'}&orientation=squarish`\r\n  }\r\n}\r\n","\nimport { useState, useEffect } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { Link } from 'react-router-dom';\nimport Navbar from '../../components/feature/Navbar';\nimport Footer from '../../components/feature/Footer';\nimport Button from '../../components/base/Button';\nimport Input from '../../components/base/Input';\nimport { SparkleLoadingSpinner } from '../../components/base/LoadingSpinner';\nimport GenrePreferences from '../../components/profile/GenrePreferences';\nimport { useAuthContext } from '../../contexts/AuthContext';\nimport { useContinueWatching } from '../../hooks/useUser';\nimport { UserService } from '../../services/userService';\nimport { UserPreferencesService } from '../../services/userPreferencesService';\nimport { AvatarService } from '../../services/avatarService';\nimport { generatePlayerUrl } from '../../utils/playerUtils';\nimport { sessionManager } from '../../utils/sessionManager';\n\nexport default function ProfilePage() {\n  const { user, loading: authLoading } = useAuthContext();\n  const [activeTab, setActiveTab] = useState('overview');\n  const [isEditing, setIsEditing] = useState(false);\n  const [showGenrePreferences, setShowGenrePreferences] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [editingUsername, setEditingUsername] = useState('');\n  const [saving, setSaving] = useState(false);\n  const [uploadingAvatar, setUploadingAvatar] = useState(false);\n  const [avatarPreview, setAvatarPreview] = useState<string | null>(null);\n  const [userStats, setUserStats] = useState({\n    watchTime: '0 hours',\n    completedSeries: 0,\n    currentlyWatching: 0,\n    favoriteGenres: [] as string[],\n    totalFavorites: 0,\n    totalWatchlist: 0,\n    totalReviews: 0,\n    totalEpisodesWatched: 0\n  });\n  const [recentActivity, setRecentActivity] = useState<any[]>([]);\n  const [achievements, setAchievements] = useState<any[]>([]);\n  \n  const { continueWatching, loading: continueLoading } = useContinueWatching(user?.id);\n\n  // Fetch user data and statistics\n  useEffect(() => {\n    const fetchUserData = async () => {\n      if (!user) {\n        setLoading(false);\n        return;\n      }\n\n      try {\n        setLoading(true);\n        \n        // Fetch user statistics and preferences in parallel\n        const [stats, preferences] = await Promise.all([\n          UserService.getUserStats(user.id),\n          UserPreferencesService.getUserPreferences(user.id)\n        ]);\n        \n        setUserStats(prevStats => ({\n          ...prevStats,\n          completedSeries: stats.completedEpisodes,\n          currentlyWatching: stats.totalWatchlist,\n          totalFavorites: stats.totalFavorites,\n          totalWatchlist: stats.totalWatchlist,\n          totalReviews: stats.totalReviews,\n          totalEpisodesWatched: stats.totalEpisodesWatched,\n          favoriteGenres: preferences?.favorite_genres || [],\n          // Keep existing values for fields not returned by the API\n          watchTime: prevStats.watchTime\n        }));\n\n        // Fetch recent activity\n        const activity = await UserService.getRecentActivity(user.id);\n        setRecentActivity(activity);\n\n        // Fetch achievements\n        const userAchievements = await UserService.getAchievements(user.id);\n        setAchievements(userAchievements);\n\n      } catch (error) {\n        console.error('Failed to fetch user data:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchUserData();\n  }, [user]);\n\n  const handleEditProfile = () => {\n    setEditingUsername(user?.username || '');\n    setIsEditing(true);\n  };\n\n  const handleCancelEdit = () => {\n    setEditingUsername('');\n    setIsEditing(false);\n  };\n\n  const handleSaveProfile = async () => {\n    if (!user || !editingUsername.trim() || saving) return;\n    \n    try {\n      setSaving(true);\n      \n      // Update only the username in the database\n      const updatedUser = await UserService.updateUserProfile(user.id, {\n        username: editingUsername.trim()\n      });\n      \n      // Update the session manager with the new user data\n      // This will trigger a re-render across the app\n      await sessionManager.refreshSession();\n      \n      setIsEditing(false);\n      setEditingUsername('');\n      \n      console.log('Username updated successfully:', updatedUser.username);\n    } catch (error) {\n      console.error('Failed to save profile:', error);\n      // You could add a toast notification here\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  const handleAvatarUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (!file || !user) return;\n\n    try {\n      setUploadingAvatar(true);\n      \n      // Create preview\n      const previewUrl = URL.createObjectURL(file);\n      setAvatarPreview(previewUrl);\n\n      // Upload to Supabase storage\n      const avatarUrl = await AvatarService.uploadAvatar(file, user.id, (progress) => {\n        console.log(`Upload progress: ${progress}%`);\n      });\n\n      // Update user profile with new avatar URL\n      const updatedUser = await UserService.updateUserProfile(user.id, {\n        avatar_url: avatarUrl\n      });\n\n      // Refresh session to update user data across the app\n      await sessionManager.refreshSession();\n\n      console.log('Avatar uploaded successfully:', avatarUrl);\n      \n      // Clean up preview\n      URL.revokeObjectURL(previewUrl);\n      setAvatarPreview(null);\n      \n    } catch (error) {\n      console.error('Failed to upload avatar:', error);\n      // Clean up preview on error\n      if (avatarPreview) {\n        URL.revokeObjectURL(avatarPreview);\n        setAvatarPreview(null);\n      }\n    } finally {\n      setUploadingAvatar(false);\n      // Reset file input\n      event.target.value = '';\n    }\n  };\n\n  const handleGenrePreferencesSave = (genres: string[]) => {\n    setUserStats(prev => ({\n      ...prev,\n      favoriteGenres: genres\n    }));\n    setShowGenrePreferences(false);\n  };\n\n  const handleGenrePreferencesCancel = () => {\n    setShowGenrePreferences(false);\n  };\n\n  // Redirect to login if not authenticated\n  if (!authLoading && !user) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-green-50 via-yellow-50 to-pink-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <i className=\"ri-user-line text-6xl text-teal-300 mb-4\"></i>\n          <h2 className=\"text-2xl font-bold text-teal-800 mb-2\">Please Sign In</h2>\n          <p className=\"text-teal-600 mb-6\">You need to be signed in to view your profile.</p>\n          <Link\n            to=\"/\"\n            className=\"px-6 py-3 bg-teal-600 text-white rounded-lg hover:bg-teal-700 transition-colors duration-200\"\n          >\n            Go Home\n          </Link>\n        </div>\n      </div>\n    );\n  }\n\n  // Loading state\n  if (loading || authLoading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-green-50 via-yellow-50 to-pink-50\">\n        <Navbar />\n        <div className=\"flex items-center justify-center min-h-[60vh]\">\n          <SparkleLoadingSpinner size=\"lg\" text=\"Loading your profile...\" />\n        </div>\n      </div>\n    );\n  }\n\n  const getActivityIcon = (type: string) => {\n    switch (type) {\n      case 'watched': return 'ri-play-circle-line';\n      case 'completed': return 'ri-checkbox-circle-line';\n      case 'added': return 'ri-add-circle-line';\n      case 'rated': return 'ri-star-line';\n      default: return 'ri-circle-line';\n    }\n  };\n\n  const getActivityColor = (type: string) => {\n    switch (type) {\n      case 'watched': return 'text-blue-600';\n      case 'completed': return 'text-green-600';\n      case 'added': return 'text-purple-600';\n      case 'rated': return 'text-yellow-600';\n      default: return 'text-gray-600';\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-green-50 via-yellow-50 to-pink-50\">\n      <Navbar />\n      \n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Profile Header */}\n        <motion.section\n          initial={{ opacity: 0, y: 30 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8 }}\n          className=\"mb-8\"\n        >\n          <div className=\"bg-white/80 backdrop-blur-sm rounded-xl shadow-lg border border-green-200 p-8\">\n            <div className=\"flex flex-col md:flex-row items-start md:items-center gap-6\">\n              <div className=\"relative\">\n                <img\n                  src={avatarPreview || AvatarService.getAvatarUrl(user?.avatar_url, user?.id)}\n                  alt=\"Profile Avatar\"\n                  className=\"w-24 h-24 rounded-full object-cover object-top border-4 border-teal-200\"\n                  onError={(e) => {\n                    const target = e.target as HTMLImageElement;\n                    target.src = AvatarService.getAvatarUrl(null, user?.id);\n                  }}\n                />\n                <div className=\"absolute bottom-0 right-0\">\n                  <input\n                    type=\"file\"\n                    accept=\"image/*\"\n                    onChange={handleAvatarUpload}\n                    className=\"hidden\"\n                    id=\"avatar-upload\"\n                    disabled={uploadingAvatar}\n                  />\n                  <label\n                    htmlFor=\"avatar-upload\"\n                    className={`w-8 h-8 bg-teal-700 text-white rounded-full flex items-center justify-center hover:bg-teal-600 transition-colors duration-200 cursor-pointer ${\n                      uploadingAvatar ? 'opacity-50 cursor-not-allowed' : ''\n                    }`}\n                    title=\"Upload Avatar\"\n                  >\n                    {uploadingAvatar ? (\n                      <div className=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin\"></div>\n                    ) : (\n                      <i className=\"ri-camera-line text-sm\"></i>\n                    )}\n                  </label>\n                </div>\n              </div>\n              \n              <div className=\"flex-1\">\n                {isEditing ? (\n                  <div>\n                    <label className=\"block text-sm font-medium text-teal-700 mb-2\">\n                      Username\n                    </label>\n                    <Input\n                      value={editingUsername}\n                      onChange={(e) => setEditingUsername(e.target.value)}\n                      placeholder=\"Enter your username\"\n                    />\n                    <p className=\"text-xs text-gray-500 mt-1\">Only username can be changed</p>\n                  </div>\n                ) : (\n                  <>\n                    <h1 className=\"text-3xl font-bold text-teal-800 mb-2\">{user?.username || 'Anime Fan'}</h1>\n                    <p className=\"text-teal-600 mb-4\">{user?.email}</p>\n                    <div className=\"flex items-center gap-2 mb-4\">\n                      <span className={`px-3 py-1 rounded-full text-sm font-medium ${\n                        user?.subscription_type === 'vip' \n                          ? 'bg-purple-200 text-purple-800' \n                          : user?.subscription_type === 'premium'\n                          ? 'bg-yellow-200 text-yellow-800'\n                          : 'bg-green-200 text-green-800'\n                      }`}>\n                        {user?.subscription_type?.toUpperCase() || 'FREE'}\n                      </span>\n                    </div>\n                  </>\n                )}\n                \n                <div className=\"flex flex-wrap gap-4 text-sm text-teal-600 mb-4\">\n                  <span className=\"flex items-center gap-1\">\n                    <i className=\"ri-calendar-line\"></i>\n                    Joined {new Date(user?.created_at || '').toLocaleDateString('en-US', { month: 'long', year: 'numeric' })}\n                  </span>\n                  <span className=\"flex items-center gap-1\">\n                    <i className=\"ri-time-line\"></i>\n                    {userStats.watchTime} watched\n                  </span>\n                  <span className=\"flex items-center gap-1\">\n                    <i className=\"ri-checkbox-circle-line\"></i>\n                    {userStats.completedSeries} completed\n                  </span>\n                </div>\n                \n                <div className=\"flex flex-wrap gap-2 mb-4\">\n                  {userStats.favoriteGenres && userStats.favoriteGenres.length > 0 ? userStats.favoriteGenres.map((genre) => (\n                    <span\n                      key={genre}\n                      className=\"px-3 py-1 bg-pink-200 text-teal-800 text-sm rounded-full font-medium\"\n                    >\n                      {genre}\n                    </span>\n                  )) : (\n                    <span className=\"text-sm text-teal-500 italic\">No favorite genres yet</span>\n                  )}\n                  <button\n                    onClick={() => setShowGenrePreferences(true)}\n                    className=\"px-3 py-1 bg-teal-100 text-teal-700 text-sm rounded-full font-medium hover:bg-teal-200 transition-colors flex items-center gap-1\"\n                  >\n                    <i className=\"ri-add-line text-xs\"></i>\n                    {userStats.favoriteGenres.length > 0 ? 'Edit' : 'Add'} Genres\n                  </button>\n                </div>\n              </div>\n              \n              <div className=\"flex gap-3\">\n                {isEditing ? (\n                  <>\n                    <Button onClick={handleSaveProfile} size=\"sm\" disabled={!editingUsername.trim() || saving}>\n                      {saving ? (\n                        <>\n                          <div className=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin mr-2\"></div>\n                          Saving...\n                        </>\n                      ) : (\n                        <>\n                          <i className=\"ri-save-line mr-2\"></i>\n                          Save Username\n                        </>\n                      )}\n                    </Button>\n                    <Button variant=\"secondary\" onClick={handleCancelEdit} size=\"sm\" disabled={saving}>\n                      Cancel\n                    </Button>\n                  </>\n                ) : (\n                  <Button onClick={handleEditProfile} variant=\"secondary\" size=\"sm\">\n                    <i className=\"ri-edit-line mr-2\"></i>\n                    Edit Username\n                  </Button>\n                )}\n              </div>\n            </div>\n          </div>\n        </motion.section>\n\n        {/* Tab Navigation */}\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.6, delay: 0.2 }}\n          className=\"mb-8\"\n        >\n          <div className=\"bg-white/80 backdrop-blur-sm rounded-xl shadow-lg border border-green-200 p-2\">\n            <div className=\"flex flex-wrap gap-2\">\n              {[\n                { id: 'overview', label: 'Overview', icon: 'ri-dashboard-line' },\n                { id: 'watching', label: 'Currently Watching', icon: 'ri-play-circle-line' },\n                { id: 'activity', label: 'Recent Activity', icon: 'ri-history-line' },\n                { id: 'achievements', label: 'Achievements', icon: 'ri-trophy-line' }\n              ].map((tab) => (\n                <button\n                  key={tab.id}\n                  onClick={() => setActiveTab(tab.id)}\n                  className={`px-4 py-2 rounded-lg text-sm font-medium transition-all duration-200 flex items-center gap-2 ${\n                    activeTab === tab.id\n                      ? 'bg-teal-700 text-white shadow-sm'\n                      : 'text-teal-700 hover:bg-green-100'\n                  }`}\n                >\n                  <i className={tab.icon}></i>\n                  {tab.label}\n                </button>\n              ))}\n            </div>\n          </div>\n        </motion.div>\n\n        {/* Tab Content */}\n        <motion.div\n          key={activeTab}\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.5 }}\n        >\n          {activeTab === 'overview' && (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {/* Stats Cards */}\n              <div className=\"bg-white/80 backdrop-blur-sm rounded-xl shadow-lg border border-green-200 p-6\">\n                <div className=\"flex items-center gap-4\">\n                  <div className=\"w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center\">\n                    <i className=\"ri-play-circle-line text-2xl text-blue-600\"></i>\n                  </div>\n                  <div>\n                    <h3 className=\"text-2xl font-bold text-teal-800\">{userStats.currentlyWatching}</h3>\n                    <p className=\"text-teal-600\">Currently Watching</p>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"bg-white/80 backdrop-blur-sm rounded-xl shadow-lg border border-green-200 p-6\">\n                <div className=\"flex items-center gap-4\">\n                  <div className=\"w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center\">\n                    <i className=\"ri-checkbox-circle-line text-2xl text-green-600\"></i>\n                  </div>\n                  <div>\n                    <h3 className=\"text-2xl font-bold text-teal-800\">{userStats.completedSeries}</h3>\n                    <p className=\"text-teal-600\">Completed Series</p>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"bg-white/80 backdrop-blur-sm rounded-xl shadow-lg border border-green-200 p-6\">\n                <div className=\"flex items-center gap-4\">\n                  <div className=\"w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center\">\n                    <i className=\"ri-time-line text-2xl text-purple-600\"></i>\n                  </div>\n                  <div>\n                    <h3 className=\"text-2xl font-bold text-teal-800\">{userStats.watchTime}</h3>\n                    <p className=\"text-teal-600\">Total Watch Time</p>\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {activeTab === 'watching' && (\n            <div className=\"space-y-4\">\n              {continueLoading ? (\n                <div className=\"text-center py-12\">\n                  <div className=\"w-12 h-12 border-4 border-teal-200 border-t-teal-600 rounded-full animate-spin mx-auto mb-4\"></div>\n                  <p className=\"text-teal-700 font-medium\">Loading your watch progress...</p>\n                </div>\n              ) : continueWatching.length > 0 ? (\n                continueWatching.map((item, index) => (\n                  <motion.div\n                    key={item.id}\n                    initial={{ opacity: 0, x: -20 }}\n                    animate={{ opacity: 1, x: 0 }}\n                    transition={{ duration: 0.5, delay: index * 0.1 }}\n                    className=\"bg-white/80 backdrop-blur-sm rounded-xl shadow-lg border border-green-200 p-6\"\n                  >\n                    <div className=\"flex items-center gap-6\">\n                      <Link to={`/anime/${item.anime?.id}`} className=\"flex-shrink-0\">\n                        <img\n                          src={item.thumbnail || item.anime?.poster_url || \"https://readdy.ai/api/search-image?query=Anime%20thumbnail%2C%20default%20anime%20image&width=200&height=300&seq=watching-thumbnail&orientation=portrait\"}\n                          alt={item.title}\n                          className=\"w-16 h-20 object-cover object-top rounded-lg hover:scale-105 transition-transform duration-300\"\n                        />\n                      </Link>\n                      \n                      <div className=\"flex-1\">\n                        <Link to={`/anime/${item.anime?.id}`}>\n                          <h3 className=\"text-lg font-bold text-teal-800 mb-2 hover:text-teal-600 transition-colors duration-200\">\n                            {item.title}\n                          </h3>\n                        </Link>\n                        \n                        <p className=\"text-teal-600 text-sm mb-3\">\n                          Episode {item.episode}\n                        </p>\n                        \n                        <div className=\"w-full bg-green-200 rounded-full h-2 mb-3\">\n                          <div\n                            className=\"bg-teal-700 h-2 rounded-full transition-all duration-300\"\n                            style={{ width: `${item.progress}%` }}\n                          ></div>\n                        </div>\n                        \n                        <div className=\"flex items-center gap-3\">\n                          <Link to={generatePlayerUrl(item.anime?.id || '', item.episode, item.progressSeconds)}>\n                            <Button size=\"sm\">\n                              <i className=\"ri-play-fill mr-1\"></i>\n                              Continue Watching\n                            </Button>\n                          </Link>\n                          <span className=\"text-sm text-teal-600\">{item.progress}% complete</span>\n                        </div>\n                      </div>\n                    </div>\n                  </motion.div>\n                ))\n              ) : (\n                <div className=\"text-center py-12\">\n                  <i className=\"ri-play-circle-line text-6xl text-teal-300 mb-4\"></i>\n                  <p className=\"text-teal-600 text-lg\">No anime in progress</p>\n                  <p className=\"text-teal-500 text-sm\">Start watching to see your progress here</p>\n                </div>\n              )}\n            </div>\n          )}\n\n          {activeTab === 'activity' && (\n            <div className=\"bg-white/80 backdrop-blur-sm rounded-xl shadow-lg border border-green-200 p-6\">\n              <h2 className=\"text-xl font-bold text-teal-800 mb-6\">Recent Activity</h2>\n              <div className=\"space-y-4\">\n                {recentActivity.length > 0 ? (\n                  recentActivity.map((activity, index) => (\n                    <motion.div\n                      key={index}\n                      initial={{ opacity: 0, x: -20 }}\n                      animate={{ opacity: 1, x: 0 }}\n                      transition={{ duration: 0.5, delay: index * 0.1 }}\n                      className=\"flex items-center gap-4 p-4 hover:bg-green-50 rounded-lg transition-colors duration-200\"\n                    >\n                      <div className={`w-10 h-10 rounded-full flex items-center justify-center ${getActivityColor(activity.type)} bg-current bg-opacity-10`}>\n                        <i className={`${getActivityIcon(activity.type)} ${getActivityColor(activity.type)}`}></i>\n                      </div>\n                      \n                      <div className=\"flex-1\">\n                        <p className=\"text-teal-800\">\n                          {activity.type === 'watched' && `Watched episode ${activity.episode} of `}\n                          {activity.type === 'completed' && 'Completed '}\n                          {activity.type === 'added' && 'Added to watchlist '}\n                          {activity.type === 'rated' && `Rated ${activity.rating}/10 `}\n                          <Link to={`/anime/${activity.anime.id}`} className=\"font-medium hover:text-teal-600 transition-colors duration-200\">\n                            {activity.anime.title}\n                          </Link>\n                        </p>\n                        <p className=\"text-sm text-teal-600\">{activity.time}</p>\n                      </div>\n                    </motion.div>\n                  ))\n                ) : (\n                  <div className=\"text-center py-12\">\n                    <i className=\"ri-history-line text-6xl text-teal-300 mb-4\"></i>\n                    <p className=\"text-teal-600 text-lg\">No recent activity</p>\n                    <p className=\"text-teal-500 text-sm\">Start watching anime to see your activity here</p>\n                  </div>\n                )}\n              </div>\n            </div>\n          )}\n\n          {activeTab === 'achievements' && (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {achievements.length > 0 ? (\n                achievements.map((achievement, index) => (\n                  <motion.div\n                    key={index}\n                    initial={{ opacity: 0, scale: 0.9 }}\n                    animate={{ opacity: 1, scale: 1 }}\n                    transition={{ duration: 0.5, delay: index * 0.1 }}\n                    className={`bg-white/80 backdrop-blur-sm rounded-xl shadow-lg border p-6 ${\n                      achievement.earned ? 'border-yellow-300 bg-yellow-50/50' : 'border-green-200'\n                    }`}\n                  >\n                    <div className=\"text-center\">\n                      <div className={`w-16 h-16 mx-auto mb-4 rounded-full flex items-center justify-center ${\n                        achievement.earned ? 'bg-yellow-100 text-yellow-600' : 'bg-gray-100 text-gray-400'\n                      }`}>\n                        <i className={`${achievement.icon} text-2xl`}></i>\n                      </div>\n                      \n                      <h3 className={`text-lg font-bold mb-2 ${\n                        achievement.earned ? 'text-yellow-700' : 'text-gray-500'\n                      }`}>\n                        {achievement.title}\n                      </h3>\n                      \n                      <p className={`text-sm ${\n                        achievement.earned ? 'text-yellow-600' : 'text-gray-400'\n                      }`}>\n                        {achievement.description}\n                      </p>\n                      \n                      {achievement.earned && (\n                        <div className=\"mt-3\">\n                          <span className=\"inline-flex items-center px-2 py-1 bg-yellow-200 text-yellow-800 text-xs rounded-full\">\n                            <i className=\"ri-check-line mr-1\"></i>\n                            Earned\n                          </span>\n                        </div>\n                      )}\n                    </div>\n                  </motion.div>\n                ))\n              ) : (\n                <div className=\"col-span-full text-center py-12\">\n                  <i className=\"ri-trophy-line text-6xl text-teal-300 mb-4\"></i>\n                  <p className=\"text-teal-600 text-lg\">No achievements yet</p>\n                  <p className=\"text-teal-500 text-sm\">Start watching anime to unlock achievements</p>\n                </div>\n              )}\n            </div>\n          )}\n        </motion.div>\n      </main>\n\n      {/* Genre Preferences Modal */}\n      <AnimatePresence>\n        {showGenrePreferences && user && (\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n            className=\"fixed inset-0 bg-black/50 flex items-center justify-center p-4 z-50\"\n            onClick={() => setShowGenrePreferences(false)}\n          >\n            <motion.div\n              initial={{ scale: 0.9, opacity: 0 }}\n              animate={{ scale: 1, opacity: 1 }}\n              exit={{ scale: 0.9, opacity: 0 }}\n              className=\"w-full max-w-4xl max-h-[90vh] overflow-y-auto\"\n              onClick={(e) => e.stopPropagation()}\n            >\n              <GenrePreferences\n                userId={user.id}\n                onSave={handleGenrePreferencesSave}\n                onCancel={handleGenrePreferencesCancel}\n              />\n            </motion.div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n\n      <Footer />\n    </div>\n  );\n}\n","import { useState, useEffect } from 'react'\r\nimport { UserService } from '../services/userService'\r\nimport { Tables } from '../lib/supabase'\r\n\r\ntype Anime = Tables<'anime'>\r\ntype UserProgress = Tables<'user_progress'>\r\n\r\ninterface ContinueWatching {\r\n  id: string\r\n  title: string\r\n  episode: number\r\n  episodeId: string\r\n  progress: number\r\n  progressSeconds: number\r\n  duration: number\r\n  thumbnail?: string\r\n  anime: Anime\r\n}\r\n\r\nexport function useUserProgress(userId?: string) {\r\n  const [progress, setProgress] = useState<UserProgress[]>([])\r\n  const [loading, setLoading] = useState(true)\r\n  const [error, setError] = useState<string | null>(null)\r\n\r\n  useEffect(() => {\r\n    if (!userId) {\r\n      setProgress([])\r\n      setLoading(false)\r\n      return\r\n    }\r\n\r\n    const fetchProgress = async () => {\r\n      try {\r\n        setLoading(true)\r\n        setError(null)\r\n        const data = await UserService.getUserProgress(userId)\r\n        setProgress(data)\r\n      } catch (err) {\r\n        setError(err instanceof Error ? err.message : 'Failed to fetch user progress')\r\n      } finally {\r\n        setLoading(false)\r\n      }\r\n    }\r\n\r\n    fetchProgress()\r\n  }, [userId])\r\n\r\n  const updateProgress = async (episodeId: string, progressSeconds: number) => {\r\n    if (!userId) return\r\n\r\n    try {\r\n      await UserService.updateWatchProgress(userId, episodeId, progressSeconds)\r\n      // Refresh progress data\r\n      const data = await UserService.getUserProgress(userId)\r\n      setProgress(data)\r\n    } catch (err) {\r\n      setError(err instanceof Error ? err.message : 'Failed to update progress')\r\n      throw err\r\n    }\r\n  }\r\n\r\n  const markCompleted = async (episodeId: string) => {\r\n    if (!userId) return\r\n\r\n    try {\r\n      await UserService.markEpisodeCompleted(userId, episodeId)\r\n      // Refresh progress data\r\n      const data = await UserService.getUserProgress(userId)\r\n      setProgress(data)\r\n    } catch (err) {\r\n      setError(err instanceof Error ? err.message : 'Failed to mark episode as completed')\r\n      throw err\r\n    }\r\n  }\r\n\r\n  return { progress, loading, error, updateProgress, markCompleted }\r\n}\r\n\r\nexport function useContinueWatching(userId?: string) {\r\n  const [continueWatching, setContinueWatching] = useState<ContinueWatching[]>([])\r\n  const [loading, setLoading] = useState(true)\r\n  const [error, setError] = useState<string | null>(null)\r\n\r\n  useEffect(() => {\r\n    if (!userId) {\r\n      setContinueWatching([])\r\n      setLoading(false)\r\n      return\r\n    }\r\n\r\n    const fetchContinueWatching = async () => {\r\n      try {\r\n        setLoading(true)\r\n        setError(null)\r\n        const data = await UserService.getContinueWatching(userId, 10)\r\n        \r\n        // Transform data to match frontend format\r\n        const transformed = data.map(item => ({\r\n          id: item.episode?.anime_id || '',\r\n          title: item.episode?.anime?.title || '',\r\n          episode: item.episode?.episode_number || 1,\r\n          episodeId: item.episode_id || '',\r\n          progress: Math.round((item.progress_seconds / (item.episode?.duration || 1)) * 100),\r\n          progressSeconds: item.progress_seconds || 0,\r\n          duration: item.episode?.duration || 0,\r\n          thumbnail: item.episode?.thumbnail_url,\r\n          anime: item.episode?.anime\r\n        }))\r\n\r\n        setContinueWatching(transformed)\r\n      } catch (err) {\r\n        setError(err instanceof Error ? err.message : 'Failed to fetch continue watching')\r\n      } finally {\r\n        setLoading(false)\r\n      }\r\n    }\r\n\r\n    fetchContinueWatching()\r\n  }, [userId])\r\n\r\n  return { continueWatching, loading, error }\r\n}\r\n\r\nexport function useUserFavorites(userId?: string) {\r\n  const [favorites, setFavorites] = useState<Anime[]>([])\r\n  const [loading, setLoading] = useState(true)\r\n  const [error, setError] = useState<string | null>(null)\r\n\r\n  useEffect(() => {\r\n    if (!userId) {\r\n      setFavorites([])\r\n      setLoading(false)\r\n      return\r\n    }\r\n\r\n    const fetchFavorites = async () => {\r\n      try {\r\n        setLoading(true)\r\n        setError(null)\r\n        const data = await UserService.getUserFavorites(userId)\r\n        setFavorites(data)\r\n      } catch (err) {\r\n        setError(err instanceof Error ? err.message : 'Failed to fetch favorites')\r\n      } finally {\r\n        setLoading(false)\r\n      }\r\n    }\r\n\r\n    fetchFavorites()\r\n  }, [userId])\r\n\r\n  const addToFavorites = async (animeId: string) => {\r\n    if (!userId) return\r\n\r\n    try {\r\n      await UserService.addToFavorites(userId, animeId)\r\n      // Refresh favorites data\r\n      const data = await UserService.getUserFavorites(userId)\r\n      setFavorites(data)\r\n    } catch (err) {\r\n      setError(err instanceof Error ? err.message : 'Failed to add to favorites')\r\n      throw err\r\n    }\r\n  }\r\n\r\n  const removeFromFavorites = async (animeId: string) => {\r\n    if (!userId) return\r\n\r\n    try {\r\n      await UserService.removeFromFavorites(userId, animeId)\r\n      // Refresh favorites data\r\n      const data = await UserService.getUserFavorites(userId)\r\n      setFavorites(data)\r\n    } catch (err) {\r\n      setError(err instanceof Error ? err.message : 'Failed to remove from favorites')\r\n      throw err\r\n    }\r\n  }\r\n\r\n  const toggleFavorite = async (animeId: string) => {\r\n    const isFavorite = favorites.some(fav => fav.id === animeId)\r\n    if (isFavorite) {\r\n      await removeFromFavorites(animeId)\r\n    } else {\r\n      await addToFavorites(animeId)\r\n    }\r\n  }\r\n\r\n  return { \r\n    favorites, \r\n    loading, \r\n    error, \r\n    addToFavorites, \r\n    removeFromFavorites, \r\n    toggleFavorite,\r\n    isFavorite: (animeId: string) => favorites.some(fav => fav.id === animeId)\r\n  }\r\n}\r\n\r\nexport function useUserWatchlist(userId?: string) {\r\n  const [watchlist, setWatchlist] = useState<Anime[]>([])\r\n  const [loading, setLoading] = useState(true)\r\n  const [error, setError] = useState<string | null>(null)\r\n\r\n  useEffect(() => {\r\n    if (!userId) {\r\n      setWatchlist([])\r\n      setLoading(false)\r\n      return\r\n    }\r\n\r\n    const fetchWatchlist = async () => {\r\n      try {\r\n        setLoading(true)\r\n        setError(null)\r\n        const data = await UserService.getUserWatchlist(userId)\r\n        setWatchlist(data)\r\n      } catch (err) {\r\n        setError(err instanceof Error ? err.message : 'Failed to fetch watchlist')\r\n      } finally {\r\n        setLoading(false)\r\n      }\r\n    }\r\n\r\n    fetchWatchlist()\r\n  }, [userId])\r\n\r\n  const addToWatchlist = async (animeId: string) => {\r\n    if (!userId) return\r\n\r\n    try {\r\n      await UserService.addToWatchlist(userId, animeId)\r\n      // Refresh watchlist data\r\n      const data = await UserService.getUserWatchlist(userId)\r\n      setWatchlist(data)\r\n    } catch (err) {\r\n      setError(err instanceof Error ? err.message : 'Failed to add to watchlist')\r\n      throw err\r\n    }\r\n  }\r\n\r\n  const removeFromWatchlist = async (animeId: string) => {\r\n    if (!userId) return\r\n\r\n    try {\r\n      await UserService.removeFromWatchlist(userId, animeId)\r\n      // Refresh watchlist data\r\n      const data = await UserService.getUserWatchlist(userId)\r\n      setWatchlist(data)\r\n    } catch (err) {\r\n      setError(err instanceof Error ? err.message : 'Failed to remove from watchlist')\r\n      throw err\r\n    }\r\n  }\r\n\r\n  const toggleWatchlist = async (animeId: string) => {\r\n    const isInWatchlist = watchlist.some(item => item.id === animeId)\r\n    if (isInWatchlist) {\r\n      await removeFromWatchlist(animeId)\r\n    } else {\r\n      await addToWatchlist(animeId)\r\n    }\r\n  }\r\n\r\n  return { \r\n    watchlist, \r\n    loading, \r\n    error, \r\n    addToWatchlist, \r\n    removeFromWatchlist, \r\n    toggleWatchlist,\r\n    isInWatchlist: (animeId: string) => watchlist.some(item => item.id === animeId)\r\n  }\r\n}\r\n\r\nexport function useUserStats(userId?: string) {\r\n  const [stats, setStats] = useState({\r\n    completedEpisodes: 0,\r\n    totalEpisodes: 0,\r\n    favoritesCount: 0,\r\n    watchlistCount: 0,\r\n    reviewsCount: 0\r\n  })\r\n  const [loading, setLoading] = useState(true)\r\n  const [error, setError] = useState<string | null>(null)\r\n\r\n  useEffect(() => {\r\n    if (!userId) {\r\n      setStats({\r\n        completedEpisodes: 0,\r\n        totalEpisodes: 0,\r\n        favoritesCount: 0,\r\n        watchlistCount: 0,\r\n        reviewsCount: 0\r\n      })\r\n      setLoading(false)\r\n      return\r\n    }\r\n\r\n    const fetchStats = async () => {\r\n      try {\r\n        setLoading(true)\r\n        setError(null)\r\n        const data = await UserService.getUserStats(userId)\r\n        setStats(data)\r\n      } catch (err) {\r\n        setError(err instanceof Error ? err.message : 'Failed to fetch user stats')\r\n      } finally {\r\n        setLoading(false)\r\n      }\r\n    }\r\n\r\n    fetchStats()\r\n  }, [userId])\r\n\r\n  return { stats, loading, error }\r\n}\r\n"],"names":["AvatarService","uploadAvatar","file","userId","onProgress","type","startsWith","Error","size","fileExtension","name","split","pop","fileName","Date","now","uploadResult","supabase","storage","from","upload","cacheControl","upsert","error","message","includes","fallbackFileName","bucket","data","path","urlData","getPublicUrl","publicUrl","deleteAvatar","avatarUrl","url","URL","folderPath","pathname","slice","join","remove","getAvatarUrl","ProfilePage","user","loading","authLoading","useAuthContext","activeTab","setActiveTab","useState","isEditing","setIsEditing","showGenrePreferences","setShowGenrePreferences","setLoading","editingUsername","setEditingUsername","saving","setSaving","uploadingAvatar","setUploadingAvatar","avatarPreview","setAvatarPreview","userStats","setUserStats","watchTime","completedSeries","currentlyWatching","favoriteGenres","totalFavorites","totalWatchlist","totalReviews","totalEpisodesWatched","recentActivity","setRecentActivity","achievements","setAchievements","continueWatching","continueLoading","setContinueWatching","setError","useEffect","async","transformed","UserService","getContinueWatching","map","item","id","episode","anime_id","title","anime","episode_number","episodeId","episode_id","progress","Math","round","progress_seconds","duration","progressSeconds","thumbnail","thumbnail_url","err","fetchContinueWatching","useContinueWatching","stats","preferences","Promise","all","getUserStats","UserPreferencesService","getUserPreferences","prevStats","completedEpisodes","favorite_genres","activity","getRecentActivity","userAchievements","getAchievements","fetchUserData","className","children","jsxs","jsx","Link","to","Navbar","SparkleLoadingSpinner","text","getActivityIcon","getActivityColor","motion","section","initial","opacity","y","animate","transition","src","avatar_url","alt","onError","e","target","accept","onChange","event","files","previewUrl","createObjectURL","updateUserProfile","sessionManager","refreshSession","revokeObjectURL","value","disabled","htmlFor","Input","placeholder","Fragment","username","email","subscription_type","toUpperCase","created_at","toLocaleDateString","month","year","length","genre","onClick","Button","trim","variant","div","delay","label","icon","tab","index","x","poster_url","style","width","generatePlayerUrl","rating","time","achievement","scale","earned","description","AnimatePresence","exit","stopPropagation","GenrePreferences","onSave","genres","prev","onCancel","Footer"],"mappings":"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"}