{"version":3,"file":"RelatedAnime-D0Qpc7zB.js","sources":["../../src/services/animeRelationsService.ts","../../src/components/feature/RelatedAnime.tsx","../../src/hooks/useAnimeRelations.ts"],"sourcesContent":["import { supabase } from '../lib/supabase'\n\nexport interface AnimeRelation {\n  id: string\n  anime_id: string\n  related_anime_id: string\n  relation_type: 'sequel' | 'prequel' | 'alternative_setting' | 'alternative_version' | 'side_story' | 'parent_story' | 'summary' | 'other'\n  created_at: string\n  related_anime?: {\n    id: string\n    title: string\n    title_japanese?: string\n    poster_url?: string\n    banner_url?: string\n    year: number\n    type: string\n    status: string\n    total_episodes?: number\n    rating?: number\n    genres: string[]\n  }\n}\n\nexport interface AnimeCharacter {\n  id: string\n  anime_id: string\n  name: string\n  name_japanese?: string\n  name_romaji?: string\n  image_url?: string\n  role: 'main' | 'supporting' | 'antagonist' | 'background'\n  description?: string\n  voice_actor?: string\n  voice_actor_japanese?: string\n}\n\nexport class AnimeRelationsService {\n  // Get related anime by relation type\n  static async getRelatedAnime(animeId: string, relationTypes?: string[]): Promise<AnimeRelation[]> {\n    try {\n      let query = supabase\n        .from('anime_relations')\n        .select('*')\n        .eq('anime_id', animeId)\n\n      if (relationTypes && relationTypes.length > 0) {\n        query = query.in('relation_type', relationTypes)\n      }\n\n      const { data, error } = await query.order('created_at', { ascending: false })\n\n      if (error) {\n        console.error('Error fetching related anime:', error)\n        return []\n      }\n\n      return data || []\n    } catch (error) {\n      console.error('Error in getRelatedAnime:', error)\n      return []\n    }\n  }\n\n  // Get similar anime by genres and studios\n  static async getSimilarAnime(animeId: string, limit: number = 12): Promise<any[]> {\n    try {\n      // First get the current anime details\n      const { data: currentAnime, error: currentError } = await supabase\n        .from('anime')\n        .select('genres, studios')\n        .eq('id', animeId)\n        .single()\n\n      if (currentError || !currentAnime) {\n        console.error('Error fetching current anime:', commonError)\n        return []\n      }\n\n      const { genres, studios } = currentAnime\n\n      // Build query for similar anime\n      let query = supabase\n        .from('anime')\n        .select('*')\n        .neq('id', animeId)\n\n      // Build filters for genres and studios\n      let genreFilters = ''\n      let studioFilters = ''\n      \n      // Add genre filters if available\n      if (genres && genres.length > 0) {\n        genreFilters = genres.map(genre => `genres.cs.{${genre}}`).join(',')\n      }\n\n      // Add studio filters if available\n      if (studios && studios.length > 0) {\n        studioFilters = studios.map(studio => `studios.cs.{${studio}}`).join(',')\n      }\n\n      // Apply filters\n      if (genreFilters && studioFilters) {\n        // Combine both genre and studio filters\n        query = query.or(`${genreFilters},${studioFilters}`)\n      } else if (genreFilters) {\n        // Only genre filters\n        query = query.or(genreFilters)\n      } else if (studioFilters) {\n        // Only studio filters\n        query = query.or(studioFilters)\n      }\n\n      const { data, error } = await query\n        .order('rating', { ascending: false })\n        .limit(limit)\n\n      if (error) {\n        console.error('Error fetching similar anime:', error)\n        return []\n      }\n\n      return data || []\n    } catch (error) {\n      console.error('Error in getSimilarAnime:', error)\n      return []\n    }\n  }\n\n  // Get anime by title similarity (for seasons detection)\n  static async getAnimeByTitleSimilarity(baseTitle: string, excludeId: string, limit: number = 10): Promise<any[]> {\n    try {\n      // Clean the title for better matching\n      const cleanedTitle = baseTitle\n        .replace(/\\s+(Season|S)\\s*\\d+/gi, '')\n        .replace(/\\s+\\d{4}/g, '')\n        .replace(/\\s+(Movie|OVA|ONA|Special)/gi, '')\n        .trim()\n\n      // Split title into words for better matching\n      const titleWords = cleanedTitle.split(' ').filter(word => word.length > 2)\n      \n      if (titleWords.length === 0) {\n        return []\n      }\n\n      // Build search query\n      const searchTerms = titleWords.map(word => `title.ilike.%${word}%`).join(',')\n      const japaneseSearchTerms = titleWords.map(word => `title_japanese.ilike.%${word}%`).join(',')\n\n      const { data, error } = await supabase\n        .from('anime')\n        .select('*')\n        .neq('id', excludeId)\n        .or(`${searchTerms},${japaneseSearchTerms}`)\n        .order('year', { ascending: true })\n        .limit(limit)\n\n      if (error) {\n        console.error('Error fetching anime by title similarity:', error)\n        return []\n      }\n\n      return data || []\n    } catch (error) {\n      console.error('Error in getAnimeByTitleSimilarity:', error)\n      return []\n    }\n  }\n\n  // Get anime characters\n  static async getAnimeCharacters(animeId: string): Promise<AnimeCharacter[]> {\n    try {\n      const { data, error } = await supabase\n        .from('anime_characters')\n        .select('*')\n        .eq('anime_id', animeId)\n        .order('role', { ascending: true })\n\n      if (error) {\n        console.error('Error fetching anime characters:', error)\n        return []\n      }\n\n      return data || []\n    } catch (error) {\n      console.error('Error in getAnimeCharacters:', error)\n      return []\n    }\n  }\n\n  // Get anime studios\n  static async getAnimeStudios(animeId: string): Promise<any[]> {\n    try {\n      const { data, error } = await supabase\n        .from('anime_studio_relations')\n        .select(`\n          role,\n          anime_studios (\n            id,\n            name,\n            name_japanese,\n            logo_url,\n            website,\n            founded_year\n          )\n        `)\n        .eq('anime_id', animeId)\n\n      if (error) {\n        console.error('Error fetching anime studios:', error)\n        return []\n      }\n\n      return data || []\n    } catch (error) {\n      console.error('Error in getAnimeStudios:', error)\n      return []\n    }\n  }\n\n  // Create anime relation\n  static async createAnimeRelation(\n    animeId: string, \n    relatedAnimeId: string, \n    relationType: string\n  ): Promise<boolean> {\n    try {\n      const { error } = await supabase\n        .from('anime_relations')\n        .insert({\n          anime_id: animeId,\n          related_anime_id: relatedAnimeId,\n          relation_type: relationType\n        })\n\n      if (error) {\n        console.error('Error creating anime relation:', error)\n        return false\n      }\n\n      return true\n    } catch (error) {\n      console.error('Error in createAnimeRelation:', error)\n      return false\n    }\n  }\n\n  // Create anime character\n  static async createAnimeCharacter(characterData: Omit<AnimeCharacter, 'id' | 'anime_id'> & { anime_id: string }): Promise<boolean> {\n    try {\n      const { error } = await supabase\n        .from('anime_characters')\n        .insert(characterData)\n\n      if (error) {\n        console.error('Error creating anime character:', error)\n        return false\n      }\n\n      return true\n    } catch (error) {\n      console.error('Error in createAnimeCharacter:', error)\n      return false\n    }\n  }\n\n  // Get comprehensive anime details with relations\n  static async getAnimeWithRelations(animeId: string) {\n    try {\n      const [anime, relatedAnime, similarAnime, characters, studios] = await Promise.all([\n        supabase.from('anime').select('*').eq('id', animeId).single(),\n        this.getRelatedAnime(animeId),\n        this.getSimilarAnime(animeId, 6),\n        this.getAnimeCharacters(animeId),\n        this.getAnimeStudios(animeId)\n      ])\n\n      return {\n        anime: anime.data,\n        relatedAnime: relatedAnime,\n        similarAnime: similarAnime,\n        characters: characters,\n        studios: studios\n      }\n    } catch (error) {\n      console.error('Error in getAnimeWithRelations:', error)\n      return null\n    }\n  }\n\n  // Search anime by multiple criteria\n  static async searchAnimeByCriteria(criteria: {\n    genres?: string[]\n    studios?: string[]\n    year?: number\n    type?: string\n    status?: string\n    minRating?: number\n    limit?: number\n  }): Promise<any[]> {\n    try {\n      let query = supabase.from('anime').select('*')\n\n      // Build filters for genres and studios\n      let genreFilters = ''\n      let studioFilters = ''\n      \n      if (criteria.genres && criteria.genres.length > 0) {\n        genreFilters = criteria.genres.map(genre => `genres.cs.{${genre}}`).join(',')\n      }\n\n      if (criteria.studios && criteria.studios.length > 0) {\n        studioFilters = criteria.studios.map(studio => `studios.cs.{${studio}}`).join(',')\n      }\n\n      // Apply filters\n      if (genreFilters && studioFilters) {\n        // Combine both genre and studio filters\n        query = query.or(`${genreFilters},${studioFilters}`)\n      } else if (genreFilters) {\n        // Only genre filters\n        query = query.or(genreFilters)\n      } else if (studioFilters) {\n        // Only studio filters\n        query = query.or(studioFilters)\n      }\n\n      if (criteria.year) {\n        query = query.eq('year', criteria.year)\n      }\n\n      if (criteria.type) {\n        query = query.eq('type', criteria.type)\n      }\n\n      if (criteria.status) {\n        query = query.eq('status', criteria.status)\n      }\n\n      if (criteria.minRating) {\n        query = query.gte('rating', criteria.minRating)\n      }\n\n      const { data, error } = await query\n        .order('rating', { ascending: false })\n        .limit(criteria.limit || 20)\n\n      if (error) {\n        console.error('Error searching anime by criteria:', error)\n        return []\n      }\n\n      return data || []\n    } catch (error) {\n      console.error('Error in searchAnimeByCriteria:', error)\n      return []\n    }\n  }\n}\n","import React, { useState, useEffect } from 'react'\nimport { motion, AnimatePresence } from 'framer-motion'\nimport { Link } from 'react-router-dom'\nimport { useAnimeRelations, useAnimeByTitleSimilarity } from '../../hooks/useAnimeRelations'\n\ninterface RelatedAnimeItem {\n  id: string\n  title: string\n  title_japanese?: string\n  poster_url?: string\n  year: number\n  type: string\n  status: string\n  total_episodes?: number\n  rating?: number\n  genres: string[]\n  relation_type?: string\n}\n\ninterface RelatedAnimeProps {\n  animeId: string\n  currentTitle: string\n  currentGenres: string[]\n}\n\nexport default function RelatedAnime({ animeId, currentTitle, currentGenres }: RelatedAnimeProps) {\n  const [activeTab, setActiveTab] = useState<'similar' | 'sequels' | 'prequels' | 'ovas'>('similar')\n  \n  // Use the real backend services\n  const { relatedAnime, similarAnime, loading, error } = useAnimeRelations(animeId)\n  const { anime: titleSimilarAnime, loading: titleLoading } = useAnimeByTitleSimilarity(currentTitle, animeId, 8)\n\n\n  const getFilteredAnime = () => {\n    switch (activeTab) {\n      case 'sequels':\n        // Get sequels from related anime and title similar anime\n        const sequelRelations = relatedAnime.filter(rel => rel.relation_type === 'sequel')\n        const sequelAnime = sequelRelations.map(rel => rel.related_anime).filter(Boolean)\n        return [...sequelAnime, ...titleSimilarAnime.filter(anime => \n          anime.year > new Date().getFullYear() - 5\n        )].slice(0, 8)\n      \n      case 'prequels':\n        // Get prequels from related anime\n        const prequelRelations = relatedAnime.filter(rel => rel.relation_type === 'prequel')\n        const prequelAnime = prequelRelations.map(rel => rel.related_anime).filter(Boolean)\n        return [...prequelAnime, ...titleSimilarAnime.filter(anime => \n          anime.year < new Date().getFullYear() - 5\n        )].slice(0, 8)\n      \n      case 'ovas':\n        // Get OVAs and movies from similar anime\n        return similarAnime.filter(anime => \n          ['ova', 'movie', 'special'].includes(anime.type)\n        ).slice(0, 8)\n      \n      default:\n        // Return similar anime by genres\n        return similarAnime.slice(0, 8)\n    }\n  }\n\n  if (loading || titleLoading) {\n    return (\n      <motion.section\n        initial={{ opacity: 0, y: 30 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.6 }}\n        className=\"mb-12\"\n      >\n        <div className=\"flex items-center justify-between mb-6\">\n          <h2 className=\"text-2xl md:text-3xl font-bold text-teal-800 flex items-center\">\n            <i className=\"ri-links-line mr-3 text-purple-500\"></i>\n            Related Content\n          </h2>\n        </div>\n        <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6\">\n          {[...Array(8)].map((_, index) => (\n            <div key={index} className=\"animate-pulse\">\n              <div className=\"aspect-[3/4] bg-gray-300 rounded-lg\"></div>\n              <div className=\"mt-2 h-4 bg-gray-300 rounded\"></div>\n            </div>\n          ))}\n        </div>\n      </motion.section>\n    )\n  }\n\n  if (similarAnime.length === 0 && titleSimilarAnime.length === 0) {\n    return null\n  }\n\n  const filteredAnime = getFilteredAnime()\n\n  return (\n    <motion.section\n      initial={{ opacity: 0, y: 30 }}\n      animate={{ opacity: 1, y: 0 }}\n      transition={{ duration: 0.6 }}\n      className=\"mb-12\"\n    >\n      <div className=\"flex items-center justify-between mb-6\">\n        <h2 className=\"text-2xl md:text-3xl font-bold text-teal-800 flex items-center\">\n          <i className=\"ri-links-line mr-3 text-purple-500\"></i>\n          Related Content\n        </h2>\n      </div>\n\n      {/* Tab Navigation */}\n      <div className=\"flex flex-wrap gap-2 mb-6\">\n        {[\n          { key: 'similar', label: 'Similar', icon: 'ri-compass-3-line' },\n          { key: 'sequels', label: 'Sequels', icon: 'ri-arrow-right-line' },\n          { key: 'prequels', label: 'Prequels', icon: 'ri-arrow-left-line' },\n          { key: 'ovas', label: 'OVAs & Movies', icon: 'ri-movie-line' }\n        ].map((tab) => (\n          <button\n            key={tab.key}\n            onClick={() => setActiveTab(tab.key as any)}\n            className={`flex items-center px-4 py-2 rounded-full font-medium transition-all duration-300 ${\n              activeTab === tab.key\n                ? 'bg-gradient-to-r from-purple-500 to-pink-500 text-white shadow-lg'\n                : 'bg-gray-100 text-gray-600 hover:bg-gray-200'\n            }`}\n          >\n            <i className={`${tab.icon} mr-2`}></i>\n            {tab.label}\n          </button>\n        ))}\n      </div>\n\n      <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-6 gap-6\">\n        <AnimatePresence>\n          {filteredAnime.map((anime, index) => (\n            <motion.div\n              key={anime.id}\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              exit={{ opacity: 0, y: -20 }}\n              transition={{ delay: index * 0.1 }}\n              className=\"group\"\n            >\n              <Link to={`/anime/${anime.id}`}>\n                <div className=\"relative overflow-hidden rounded-xl shadow-lg hover:shadow-2xl transition-all duration-300 transform hover:scale-105\">\n                  <div className=\"aspect-[3/4] bg-gradient-to-br from-gray-200 to-gray-300\">\n                    {anime.poster_url ? (\n                      <img\n                        src={anime.poster_url}\n                        alt={anime.title}\n                        className=\"w-full h-full object-cover group-hover:scale-110 transition-transform duration-500\"\n                        onError={(e) => {\n                          e.currentTarget.style.display = 'none'\n                        }}\n                      />\n                    ) : (\n                      <div className=\"w-full h-full flex items-center justify-center text-gray-500\">\n                        <i className=\"ri-image-line text-4xl\"></i>\n                      </div>\n                    )}\n                  </div>\n                  \n                  {/* Overlay */}\n                  <div className=\"absolute inset-0 bg-gradient-to-t from-black/80 via-transparent to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300\">\n                    <div className=\"absolute bottom-0 left-0 right-0 p-4\">\n                      <h3 className=\"text-white font-semibold text-sm mb-1 line-clamp-2\">\n                        {anime.title}\n                      </h3>\n                      <div className=\"flex items-center justify-between text-xs text-gray-300\">\n                        <span className=\"bg-blue-600 px-2 py-1 rounded\">\n                          {anime.year}\n                        </span>\n                        <span className=\"bg-purple-600 px-2 py-1 rounded\">\n                          {anime.type?.toUpperCase()}\n                        </span>\n                      </div>\n                      {anime.rating && (\n                        <div className=\"mt-2 flex items-center text-yellow-400\">\n                          <i className=\"ri-star-fill text-xs mr-1\"></i>\n                          <span className=\"text-xs font-medium\">{anime.rating}</span>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n\n                  {/* Type Badge */}\n                  <div className=\"absolute top-2 left-2\">\n                    <span className={`px-2 py-1 rounded-full text-xs font-medium ${\n                      anime.type === 'movie' ? 'bg-red-600 text-white' :\n                      anime.type === 'ova' ? 'bg-orange-600 text-white' :\n                      anime.type === 'special' ? 'bg-green-600 text-white' :\n                      'bg-blue-600 text-white'\n                    }`}>\n                      {anime.type?.toUpperCase()}\n                    </span>\n                  </div>\n\n                  {/* Status Badge */}\n                  <div className=\"absolute top-2 right-2\">\n                    <span className={`px-2 py-1 rounded-full text-xs font-medium ${\n                      anime.status === 'completed' ? 'bg-green-600 text-white' :\n                      anime.status === 'ongoing' ? 'bg-blue-600 text-white' :\n                      'bg-yellow-600 text-white'\n                    }`}>\n                      {anime.status?.charAt(0).toUpperCase() + anime.status?.slice(1)}\n                    </span>\n                  </div>\n                </div>\n              </Link>\n            </motion.div>\n          ))}\n        </AnimatePresence>\n      </div>\n\n      {filteredAnime.length === 0 && (\n        <div className=\"text-center py-12\">\n          <i className=\"ri-search-line text-6xl text-gray-300 mb-4\"></i>\n          <p className=\"text-gray-500 text-lg\">No {activeTab} found</p>\n        </div>\n      )}\n    </motion.section>\n  )\n}\n","import { useState, useEffect } from 'react'\r\nimport { AnimeRelationsService, AnimeRelation, AnimeCharacter } from '../services/animeRelationsService'\r\n\r\nexport interface UseAnimeRelationsResult {\r\n  relatedAnime: AnimeRelation[]\r\n  similarAnime: any[]\r\n  characters: AnimeCharacter[]\r\n  studios: any[]\r\n  loading: boolean\r\n  error: string | null\r\n  refetch: () => Promise<void>\r\n}\r\n\r\nexport function useAnimeRelations(animeId: string): UseAnimeRelationsResult {\r\n  const [relatedAnime, setRelatedAnime] = useState<AnimeRelation[]>([])\r\n  const [similarAnime, setSimilarAnime] = useState<any[]>([])\r\n  const [characters, setCharacters] = useState<AnimeCharacter[]>([])\r\n  const [studios, setStudios] = useState<any[]>([])\r\n  const [loading, setLoading] = useState(true)\r\n  const [error, setError] = useState<string | null>(null)\r\n\r\n  const fetchData = async () => {\r\n    if (!animeId) return\r\n\r\n    try {\r\n      setLoading(true)\r\n      setError(null)\r\n\r\n      const [related, similar, chars, studioData] = await Promise.all([\r\n        AnimeRelationsService.getRelatedAnime(animeId),\r\n        AnimeRelationsService.getSimilarAnime(animeId, 8),\r\n        AnimeRelationsService.getAnimeCharacters(animeId),\r\n        AnimeRelationsService.getAnimeStudios(animeId)\r\n      ])\r\n\r\n      setRelatedAnime(related)\r\n      setSimilarAnime(similar)\r\n      setCharacters(chars)\r\n      setStudios(studioData)\r\n    } catch (err) {\r\n      console.error('Error fetching anime relations:', err)\r\n      setError(err instanceof Error ? err.message : 'Failed to fetch anime relations')\r\n    } finally {\r\n      setLoading(false)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    fetchData()\r\n  }, [animeId])\r\n\r\n  return {\r\n    relatedAnime,\r\n    similarAnime,\r\n    characters,\r\n    studios,\r\n    loading,\r\n    error,\r\n    refetch: fetchData\r\n  }\r\n}\r\n\r\nexport function useAnimeByTitleSimilarity(baseTitle: string, excludeId: string, limit: number = 10) {\r\n  const [anime, setAnime] = useState<any[]>([])\r\n  const [loading, setLoading] = useState(false)\r\n  const [error, setError] = useState<string | null>(null)\r\n\r\n  const search = async () => {\r\n    if (!baseTitle || !excludeId) return\r\n\r\n    try {\r\n      setLoading(true)\r\n      setError(null)\r\n\r\n      const results = await AnimeRelationsService.getAnimeByTitleSimilarity(baseTitle, excludeId, limit)\r\n      setAnime(results)\r\n    } catch (err) {\r\n      console.error('Error searching anime by title similarity:', err)\r\n      setError(err instanceof Error ? err.message : 'Failed to search anime')\r\n    } finally {\r\n      setLoading(false)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    search()\r\n  }, [baseTitle, excludeId, limit])\r\n\r\n  return {\r\n    anime,\r\n    loading,\r\n    error,\r\n    refetch: search\r\n  }\r\n}\r\n\r\nexport function useAnimeCharacters(animeId: string) {\r\n  const [characters, setCharacters] = useState<AnimeCharacter[]>([])\r\n  const [loading, setLoading] = useState(true)\r\n  const [error, setError] = useState<string | null>(null)\r\n\r\n  const fetchCharacters = async () => {\r\n    if (!animeId) return\r\n\r\n    try {\r\n      setLoading(true)\r\n      setError(null)\r\n\r\n      const results = await AnimeRelationsService.getAnimeCharacters(animeId)\r\n      setCharacters(results)\r\n    } catch (err) {\r\n      console.error('Error fetching anime characters:', err)\r\n      setError(err instanceof Error ? err.message : 'Failed to fetch characters')\r\n    } finally {\r\n      setLoading(false)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    fetchCharacters()\r\n  }, [animeId])\r\n\r\n  return {\r\n    characters,\r\n    loading,\r\n    error,\r\n    refetch: fetchCharacters\r\n  }\r\n}\r\n\r\nexport function useAnimeSearch(criteria: {\r\n  genres?: string[]\r\n  studios?: string[]\r\n  year?: number\r\n  type?: string\r\n  status?: string\r\n  minRating?: number\r\n  limit?: number\r\n}) {\r\n  const [results, setResults] = useState<any[]>([])\r\n  const [loading, setLoading] = useState(false)\r\n  const [error, setError] = useState<string | null>(null)\r\n\r\n  const search = async () => {\r\n    try {\r\n      setLoading(true)\r\n      setError(null)\r\n\r\n      const searchResults = await AnimeRelationsService.searchAnimeByCriteria(criteria)\r\n      setResults(searchResults)\r\n    } catch (err) {\r\n      console.error('Error searching anime:', err)\r\n      setError(err instanceof Error ? err.message : 'Failed to search anime')\r\n    } finally {\r\n      setLoading(false)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (criteria.genres?.length || criteria.studios?.length || criteria.year || criteria.type || criteria.status || criteria.minRating) {\r\n      search()\r\n    }\r\n  }, [criteria])\r\n\r\n  return {\r\n    results,\r\n    loading,\r\n    error,\r\n    refetch: search\r\n  }\r\n}\r\n"],"names":["AnimeRelationsService","getRelatedAnime","animeId","relationTypes","query","supabase","from","select","eq","length","in","data","error","order","ascending","getSimilarAnime","limit","currentAnime","currentError","single","genres","studios","neq","genreFilters","studioFilters","map","genre","join","studio","or","getAnimeByTitleSimilarity","baseTitle","excludeId","titleWords","replace","trim","split","filter","word","searchTerms","japaneseSearchTerms","getAnimeCharacters","getAnimeStudios","createAnimeRelation","relatedAnimeId","relationType","insert","anime_id","related_anime_id","relation_type","createAnimeCharacter","characterData","getAnimeWithRelations","anime","relatedAnime","similarAnime","characters","Promise","all","this","searchAnimeByCriteria","criteria","year","type","status","minRating","gte","RelatedAnime","currentTitle","currentGenres","activeTab","setActiveTab","useState","loading","setRelatedAnime","setSimilarAnime","setCharacters","setStudios","setLoading","setError","fetchData","async","related","similar","chars","studioData","err","Error","message","useEffect","refetch","useAnimeRelations","titleSimilarAnime","titleLoading","setAnime","search","results","useAnimeByTitleSimilarity","jsxs","motion","section","initial","opacity","y","animate","transition","duration","className","children","jsx","Array","_","index","filteredAnime","rel","related_anime","Boolean","Date","getFullYear","slice","includes","getFilteredAnime","key","label","icon","tab","onClick","AnimatePresence","div","exit","delay","Link","to","id","poster_url","src","alt","title","onError","e","currentTarget","style","display","toUpperCase","rating","charAt"],"mappings":"0LAoCO,MAAMA,EAEX,4BAAaC,CAAgBC,EAAiBC,GAC5C,IACE,IAAIC,EAAQC,EACTC,KAAK,mBACLC,OAAO,KACPC,GAAG,WAAYN,GAEdC,GAAiBA,EAAcM,OAAS,IAC1CL,EAAQA,EAAMM,GAAG,gBAAiBP,IAGpC,MAAMQ,KAAEA,EAAAC,MAAMA,SAAgBR,EAAMS,MAAM,aAAc,CAAEC,WAAW,IAErE,OAAIF,EAEK,GAGFD,GAAQ,EACjB,OAASC,GAEP,MAAO,EACT,CACF,CAGA,4BAAaG,CAAgBb,EAAiBc,EAAgB,IAC5D,IAEE,MAAQL,KAAMM,EAAcL,MAAOM,SAAuBb,EACvDC,KAAK,SACLC,OAAO,mBACPC,GAAG,KAAMN,GACTiB,SAEH,GAAID,IAAiBD,EAEnB,MAAO,GAGT,MAAMG,OAAEA,EAAAC,QAAQA,GAAYJ,EAG5B,IAAIb,EAAQC,EACTC,KAAK,SACLC,OAAO,KACPe,IAAI,KAAMpB,GAGTqB,EAAe,GACfC,EAAgB,GAGhBJ,GAAUA,EAAOX,OAAS,IAC5Bc,EAAeH,EAAOK,IAAIC,GAAS,cAAcA,MAAUC,KAAK,MAI9DN,GAAWA,EAAQZ,OAAS,IAC9Be,EAAgBH,EAAQI,IAAIG,GAAU,eAAeA,MAAWD,KAAK,MAInEJ,GAAgBC,EAElBpB,EAAQA,EAAMyB,GAAG,GAAGN,KAAgBC,KAC3BD,EAETnB,EAAQA,EAAMyB,GAAGN,GACRC,IAETpB,EAAQA,EAAMyB,GAAGL,IAGnB,MAAMb,KAAEA,EAAAC,MAAMA,SAAgBR,EAC3BS,MAAM,SAAU,CAAEC,WAAW,IAC7BE,MAAMA,GAET,OAAIJ,EAEK,GAGFD,GAAQ,EACjB,OAASC,GAEP,MAAO,EACT,CACF,CAGA,sCAAakB,CAA0BC,EAAmBC,EAAmBhB,EAAgB,IAC3F,IAEE,MAOMiB,EAPeF,EAClBG,QAAQ,wBAAyB,IACjCA,QAAQ,YAAa,IACrBA,QAAQ,+BAAgC,IACxCC,OAG6BC,MAAM,KAAKC,OAAOC,GAAQA,EAAK7B,OAAS,GAExE,GAA0B,IAAtBwB,EAAWxB,OACb,MAAO,GAIT,MAAM8B,EAAcN,EAAWR,IAAIa,GAAQ,gBAAgBA,MAASX,KAAK,KACnEa,EAAsBP,EAAWR,IAAIa,GAAQ,yBAAyBA,MAASX,KAAK,MAEpFhB,KAAEA,EAAAC,MAAMA,SAAgBP,EAC3BC,KAAK,SACLC,OAAO,KACPe,IAAI,KAAMU,GACVH,GAAG,GAAGU,KAAeC,KACrB3B,MAAM,OAAQ,CAAEC,WAAW,IAC3BE,MAAMA,GAET,OAAIJ,EAEK,GAGFD,GAAQ,EACjB,OAASC,GAEP,MAAO,EACT,CACF,CAGA,+BAAa6B,CAAmBvC,GAC9B,IACE,MAAMS,KAAEA,QAAMC,SAAgBP,EAC3BC,KAAK,oBACLC,OAAO,KACPC,GAAG,WAAYN,GACfW,MAAM,OAAQ,CAAEC,WAAW,IAE9B,OAAIF,EAEK,GAGFD,GAAQ,EACjB,OAASC,GAEP,MAAO,EACT,CACF,CAGA,4BAAa8B,CAAgBxC,GAC3B,IACE,MAAMS,KAAEA,QAAMC,SAAgBP,EAC3BC,KAAK,0BACLC,OAAO,8MAWPC,GAAG,WAAYN,GAElB,OAAIU,EAEK,GAGFD,GAAQ,EACjB,OAASC,GAEP,MAAO,EACT,CACF,CAGA,gCAAa+B,CACXzC,EACA0C,EACAC,GAEA,IACE,MAAMjC,MAAEA,SAAgBP,EACrBC,KAAK,mBACLwC,OAAO,CACNC,SAAU7C,EACV8C,iBAAkBJ,EAClBK,cAAeJ,IAGnB,OAAIjC,CAMN,OAASA,GAEP,OAAO,CACT,CACF,CAGA,iCAAasC,CAAqBC,GAChC,IACE,MAAMvC,MAAEA,SAAgBP,EACrBC,KAAK,oBACLwC,OAAOK,GAEV,OAAIvC,CAMN,OAASA,GAEP,OAAO,CACT,CACF,CAGA,kCAAawC,CAAsBlD,GACjC,IACE,MAAOmD,EAAOC,EAAcC,EAAcC,EAAYnC,SAAiBoC,QAAQC,IAAI,CACjFrD,EAASC,KAAK,SAASC,OAAO,KAAKC,GAAG,KAAMN,GAASiB,SACrDwC,KAAK1D,gBAAgBC,GACrByD,KAAK5C,gBAAgBb,EAAS,GAC9ByD,KAAKlB,mBAAmBvC,GACxByD,KAAKjB,gBAAgBxC,KAGvB,MAAO,CACLmD,MAAOA,EAAM1C,KACb2C,eACAC,eACAC,aACAnC,UAEJ,OAAST,GAEP,OAAO,IACT,CACF,CAGA,kCAAagD,CAAsBC,GASjC,IACE,IAAIzD,EAAQC,EAASC,KAAK,SAASC,OAAO,KAGtCgB,EAAe,GACfC,EAAgB,GAEhBqC,EAASzC,QAAUyC,EAASzC,OAAOX,OAAS,IAC9Cc,EAAesC,EAASzC,OAAOK,IAAIC,GAAS,cAAcA,MAAUC,KAAK,MAGvEkC,EAASxC,SAAWwC,EAASxC,QAAQZ,OAAS,IAChDe,EAAgBqC,EAASxC,QAAQI,IAAIG,GAAU,eAAeA,MAAWD,KAAK,MAI5EJ,GAAgBC,EAElBpB,EAAQA,EAAMyB,GAAG,GAAGN,KAAgBC,KAC3BD,EAETnB,EAAQA,EAAMyB,GAAGN,GACRC,IAETpB,EAAQA,EAAMyB,GAAGL,IAGfqC,EAASC,OACX1D,EAAQA,EAAMI,GAAG,OAAQqD,EAASC,OAGhCD,EAASE,OACX3D,EAAQA,EAAMI,GAAG,OAAQqD,EAASE,OAGhCF,EAASG,SACX5D,EAAQA,EAAMI,GAAG,SAAUqD,EAASG,SAGlCH,EAASI,YACX7D,EAAQA,EAAM8D,IAAI,SAAUL,EAASI,YAGvC,MAAMtD,KAAEA,EAAAC,MAAMA,SAAgBR,EAC3BS,MAAM,SAAU,CAAEC,WAAW,IAC7BE,MAAM6C,EAAS7C,OAAS,IAE3B,OAAIJ,EAEK,GAGFD,GAAQ,EACjB,OAASC,GAEP,MAAO,EACT,CACF,EC5UF,SAAwBuD,GAAajE,QAAEA,EAAAkE,aAASA,EAAAC,cAAcA,IAC5D,MAAOC,EAAWC,GAAgBC,EAAAA,SAAsD,YAGlFlB,aAAEA,EAAAC,aAAcA,EAAAkB,QAAcA,GChB/B,SAA2BvE,GAChC,MAAOoD,EAAcoB,GAAmBF,EAAAA,SAA0B,KAC3DjB,EAAcoB,GAAmBH,EAAAA,SAAgB,KACjDhB,EAAYoB,GAAiBJ,EAAAA,SAA2B,KACxDnD,EAASwD,GAAcL,EAAAA,SAAgB,KACvCC,EAASK,GAAcN,EAAAA,UAAS,IAChC5D,EAAOmE,GAAYP,EAAAA,SAAwB,MAE5CQ,EAAYC,UAChB,GAAK/E,EAEL,IACE4E,GAAW,GACXC,EAAS,MAET,MAAOG,EAASC,EAASC,EAAOC,SAAoB5B,QAAQC,IAAI,CAC9D1D,EAAsBC,gBAAgBC,GACtCF,EAAsBe,gBAAgBb,EAAS,GAC/CF,EAAsByC,mBAAmBvC,GACzCF,EAAsB0C,gBAAgBxC,KAGxCwE,EAAgBQ,GAChBP,EAAgBQ,GAChBP,EAAcQ,GACdP,EAAWQ,EACb,OAASC,GAEPP,EAASO,aAAeC,MAAQD,EAAIE,QAAU,kCAChD,CAAA,QACEV,GAAW,EACb,GAOF,OAJAW,EAAAA,UAAU,KACRT,KACC,CAAC9E,IAEG,CACLoD,eACAC,eACAC,aACAnC,UACAoD,UACA7D,QACA8E,QAASV,EAEb,CD/ByDW,CAAkBzF,IACjEmD,MAAOuC,EAAmBnB,QAASoB,GCgCtC,SAAmC9D,EAAmBC,EAAmBhB,EAAgB,IAC9F,MAAOqC,EAAOyC,GAAYtB,EAAAA,SAAgB,KACnCC,EAASK,GAAcN,EAAAA,UAAS,IAChC5D,EAAOmE,GAAYP,EAAAA,SAAwB,MAE5CuB,EAASd,UACb,GAAKlD,GAAcC,EAEnB,IACE8C,GAAW,GACXC,EAAS,MAET,MAAMiB,QAAgBhG,EAAsB8B,0BAA0BC,EAAWC,EAAWhB,GAC5F8E,EAASE,EACX,OAASV,GAEPP,EAASO,aAAeC,MAAQD,EAAIE,QAAU,yBAChD,CAAA,QACEV,GAAW,EACb,GAOF,OAJAW,EAAAA,UAAU,KACRM,KACC,CAAChE,EAAWC,EAAWhB,IAEnB,CACLqC,QACAoB,UACA7D,QACA8E,QAASK,EAEb,CDhE8DE,CAA0B7B,EAAclE,EAAS,GAiC7G,GAAIuE,GAAWoB,EACb,OACEK,EAAAA,KAACC,EAAOC,QAAP,CACCC,QAAS,CAAEC,QAAS,EAAGC,EAAG,IAC1BC,QAAS,CAAEF,QAAS,EAAGC,EAAG,GAC1BE,WAAY,CAAEC,SAAU,IACxBC,UAAU,QAEVC,SAAA,CAAAC,EAAAA,IAAC,OAAIF,UAAU,yCACbC,SAAAV,EAAAA,KAAC,KAAA,CAAGS,UAAU,iEACZC,SAAA,CAAAC,EAAAA,IAAC,IAAA,CAAEF,UAAU,uCAAyC,6BAIzD,MAAA,CAAIA,UAAU,uDACZC,SAAA,IAAIE,MAAM,IAAIrF,IAAI,CAACsF,EAAGC,IACrBd,EAAAA,KAAC,MAAA,CAAgBS,UAAU,gBACzBC,SAAA,CAAAC,EAAAA,IAAC,MAAA,CAAIF,UAAU,wCACfE,EAAAA,IAAC,MAAA,CAAIF,UAAU,mCAFPK,SAUpB,GAA4B,IAAxBzD,EAAa9C,QAA6C,IAA7BmF,EAAkBnF,OACjD,OAAO,KAGT,MAAMwG,EA5DmB,MACvB,OAAQ3C,GACN,IAAK,UAIH,MAAO,IAFiBhB,EAAajB,OAAO6E,GAA6B,WAAtBA,EAAIjE,eACnBxB,IAAIyF,GAAOA,EAAIC,eAAe9E,OAAO+E,YAC9CxB,EAAkBvD,UAC3CgB,EAAMS,MAAA,IAAWuD,MAAOC,cAAgB,IACvCC,MAAM,EAAG,GAEd,IAAK,WAIH,MAAO,IAFkBjE,EAAajB,OAAO6E,GAA6B,YAAtBA,EAAIjE,eAClBxB,IAAIyF,GAAOA,EAAIC,eAAe9E,OAAO+E,YAC/CxB,EAAkBvD,UAC5CgB,EAAMS,MAAA,IAAWuD,MAAOC,cAAgB,IACvCC,MAAM,EAAG,GAEd,IAAK,OAEH,OAAOhE,EAAalB,OAAOgB,GACzB,CAAC,MAAO,QAAS,WAAWmE,SAASnE,EAAMU,OAC3CwD,MAAM,EAAG,GAEb,QAEE,OAAOhE,EAAagE,MAAM,EAAG,KAkCbE,GAEtB,OACEvB,EAAAA,KAACC,EAAOC,QAAP,CACCC,QAAS,CAAEC,QAAS,EAAGC,EAAG,IAC1BC,QAAS,CAAEF,QAAS,EAAGC,EAAG,GAC1BE,WAAY,CAAEC,SAAU,IACxBC,UAAU,QAEVC,SAAA,CAAAC,EAAAA,IAAC,OAAIF,UAAU,yCACbC,SAAAV,EAAAA,KAAC,KAAA,CAAGS,UAAU,iEACZC,SAAA,CAAAC,EAAAA,IAAC,IAAA,CAAEF,UAAU,uCAAyC,uBAM1DE,EAAAA,IAAC,MAAA,CAAIF,UAAU,4BACZC,SAAA,CACC,CAAEc,IAAK,UAAWC,MAAO,UAAWC,KAAM,qBAC1C,CAAEF,IAAK,UAAWC,MAAO,UAAWC,KAAM,uBAC1C,CAAEF,IAAK,WAAYC,MAAO,WAAYC,KAAM,sBAC5C,CAAEF,IAAK,OAAQC,MAAO,gBAAiBC,KAAM,kBAC7CnG,IAAKoG,GACL3B,EAAAA,KAAC,SAAA,CAEC4B,QAAS,IAAMvD,EAAasD,EAAIH,KAChCf,UAAW,qFACTrC,IAAcuD,EAAIH,IACd,oEACA,+CAGNd,SAAA,CAAAC,MAAC,IAAA,CAAEF,UAAW,GAAGkB,EAAID,cACpBC,EAAIF,QATAE,EAAIH,QAcfb,EAAAA,IAAC,MAAA,CAAIF,UAAU,sEACbC,SAAAC,EAAAA,IAACkB,GACEnB,SAAAK,EAAcxF,IAAI,CAAC4B,EAAO2D,IACzBH,EAAAA,IAACV,EAAO6B,IAAP,CAEC3B,QAAS,CAAEC,QAAS,EAAGC,EAAG,IAC1BC,QAAS,CAAEF,QAAS,EAAGC,EAAG,GAC1B0B,KAAM,CAAE3B,QAAS,EAAGC,GAAG,IACvBE,WAAY,CAAEyB,MAAe,GAARlB,GACrBL,UAAU,QAEVC,SAAAC,EAAAA,IAACsB,EAAA,CAAKC,GAAI,UAAU/E,EAAMgF,KACxBzB,SAAAV,EAAAA,KAAC,MAAA,CAAIS,UAAU,uHACbC,SAAA,CAAAC,EAAAA,IAAC,MAAA,CAAIF,UAAU,2DACZC,SAAAvD,EAAMiF,WACLzB,EAAAA,IAAC,MAAA,CACC0B,IAAKlF,EAAMiF,WACXE,IAAKnF,EAAMoF,MACX9B,UAAU,qFACV+B,QAAUC,IACRA,EAAEC,cAAcC,MAAMC,QAAU,UAIpCjC,EAAAA,IAAC,MAAA,CAAIF,UAAU,+DACbC,eAAC,IAAA,CAAED,UAAU,qCAMlB,MAAA,CAAIA,UAAU,mJACbC,SAAAV,EAAAA,KAAC,MAAA,CAAIS,UAAU,uCACbC,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGF,UAAU,qDACXC,SAAAvD,EAAMoF,QAETvC,EAAAA,KAAC,MAAA,CAAIS,UAAU,0DACbC,SAAA,CAAAC,EAAAA,IAAC,OAAA,CAAKF,UAAU,gCACbC,SAAAvD,EAAMS,aAER,OAAA,CAAK6C,UAAU,kCACbC,SAAAvD,EAAMU,MAAMgF,mBAGhB1F,EAAM2F,QACL9C,OAAC,MAAA,CAAIS,UAAU,yCACbC,SAAA,CAAAC,EAAAA,IAAC,IAAA,CAAEF,UAAU,8BACbE,EAAAA,IAAC,OAAA,CAAKF,UAAU,sBAAuBC,WAAMoC,iBAOrDnC,EAAAA,IAAC,MAAA,CAAIF,UAAU,wBACbC,SAAAC,EAAAA,IAAC,OAAA,CAAKF,UAAW,+CACA,UAAftD,EAAMU,KAAmB,wBACV,QAAfV,EAAMU,KAAiB,2BACR,YAAfV,EAAMU,KAAqB,0BAC3B,0BAEC6C,SAAAvD,EAAMU,MAAMgF,kBAKjBlC,EAAAA,IAAC,MAAA,CAAIF,UAAU,yBACbC,SAAAC,EAAAA,IAAC,OAAA,CAAKF,UAAW,+CACE,cAAjBtD,EAAMW,OAAyB,0BACd,YAAjBX,EAAMW,OAAuB,yBAC7B,4BAEC4C,SAAAvD,EAAMW,QAAQiF,OAAO,GAAGF,cAAgB1F,EAAMW,QAAQuD,MAAM,aApEhElE,EAAMgF,SA8EO,IAAzBpB,EAAcxG,QACbyF,EAAAA,KAAC,MAAA,CAAIS,UAAU,oBACbC,SAAA,CAAAC,EAAAA,IAAC,IAAA,CAAEF,UAAU,+CACbT,EAAAA,KAAC,IAAA,CAAES,UAAU,wBAAwBC,SAAA,CAAA,MAAItC,EAAU,iBAK7D"}