{"version":3,"file":"HiAnimeScraperComponent-sGSGSJhI.js","sources":["../../src/components/admin/HiAnimeScraperComponent.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { HiAnimeScraperService } from '../../services/hianimeScraperService';\nimport { AdminAnimeService } from '../../services/adminAnimeService';\nimport Button from '../../components/base/Button';\nimport Input from '../../components/base/Input';\nimport LoadingSpinner from '../../components/base/LoadingSpinner';\nimport Card from '../../components/base/Card';\nimport { ScrapedEpisodesModal } from './ScrapedEpisodesModal';\n\ninterface ScrapeResult {\n  success: boolean;\n  streamUrl?: string;\n  episodeData?: any;\n  error?: string;\n}\n\ninterface BatchScrapeResult {\n  success: boolean;\n  results: ScrapeResult[];\n  summary: {\n    totalEpisodes: number;\n    successCount: number;\n    errorCount: number;\n    successRate: number;\n  };\n}\n\nexport const HiAnimeScraperComponent: React.FC = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [animeTitle, setAnimeTitle] = useState('');\n  const [animeId, setAnimeId] = useState('');\n  const [episodeNumber, setEpisodeNumber] = useState(1);\n  const [episodeRange, setEpisodeRange] = useState('');\n  const [scrapeResult, setScrapeResult] = useState<ScrapeResult | null>(null);\n  const [batchResult, setBatchResult] = useState<BatchScrapeResult | null>(null);\n  const [error, setError] = useState<string | null>(null);\n  const [animeList, setAnimeList] = useState<any[]>([]);\n  const [selectedAnime, setSelectedAnime] = useState<any>(null);\n  \n  // New state for all episodes scraping\n  const [showScrapedEpisodes, setShowScrapedEpisodes] = useState(false);\n  const [scrapedEpisodesData, setScrapedEpisodesData] = useState<any>(null);\n\n  // Load anime list for selection\n  React.useEffect(() => {\n    loadAnimeList();\n  }, []);\n\n  const loadAnimeList = async () => {\n    try {\n      const result = await AdminAnimeService.getAnimeList(1, 50);\n      setAnimeList(result.anime || []);\n    } catch (error) {\n      console.error('Error loading anime list:', error);\n    }\n  };\n\n  const handleSingleScrape = async () => {\n    if (!animeTitle.trim() || !animeId.trim()) {\n      setError('Please provide both anime title and anime ID');\n      return;\n    }\n\n    setIsLoading(true);\n    setError(null);\n    setScrapeResult(null);\n\n    try {\n      const result = await HiAnimeScraperService.scrapeAnimeEpisode(\n        animeTitle,\n        animeId,\n        episodeNumber,\n        {\n          headless: true,\n          timeout: 30000,\n          retries: 3\n        }\n      );\n\n      setScrapeResult(result);\n      \n      if (!result.success) {\n        setError(result.error || 'Scraping failed');\n      }\n    } catch (error) {\n      setError(error instanceof Error ? error.message : 'Unknown error occurred');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleBatchScrape = async () => {\n    if (!animeTitle.trim() || !animeId.trim() || !episodeRange.trim()) {\n      setError('Please provide anime title, anime ID, and episode range');\n      return;\n    }\n\n    // Parse episode range (e.g., \"1-5\" or \"1,3,5\" or \"1\")\n    let episodeNumbers: number[];\n    if (episodeRange.includes('-')) {\n      const [start, end] = episodeRange.split('-').map(Number);\n      episodeNumbers = Array.from({ length: end - start + 1 }, (_, i) => start + i);\n    } else if (episodeRange.includes(',')) {\n      episodeNumbers = episodeRange.split(',').map(Number);\n    } else {\n      episodeNumbers = [parseInt(episodeRange)];\n    }\n\n    setIsLoading(true);\n    setError(null);\n    setBatchResult(null);\n\n    try {\n      const result = await HiAnimeScraperService.batchScrapeEpisodes(\n        animeTitle,\n        animeId,\n        episodeNumbers,\n        {\n          headless: true,\n          timeout: 30000,\n          retries: 2,\n          delayBetweenEpisodes: 3000\n        }\n      );\n\n      setBatchResult(result);\n      \n      if (!result.success) {\n        setError(`Batch scraping completed with ${result.summary.errorCount} errors`);\n      }\n    } catch (error) {\n      setError(error instanceof Error ? error.message : 'Unknown error occurred');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // New function to scrape all episodes\n  const handleScrapeAllEpisodes = async () => {\n    if (!animeTitle || !animeId) {\n      setError('Please select an anime first');\n      return;\n    }\n\n    setIsLoading(true);\n    setError(null);\n    setScrapedEpisodesData(null);\n\n    try {\n      const result = await HiAnimeScraperService.scrapeAllEpisodes(animeTitle, {\n        maxEpisodes: 50,\n        timeout: 120000, // 2 minutes\n        retries: 2\n      });\n\n      if (result.success && result.data) {\n        setScrapedEpisodesData(result.data);\n        setShowScrapedEpisodes(true);\n      } else {\n        setError(result.error || 'Failed to scrape episodes');\n      }\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Unknown error occurred');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleAnimeSelect = (anime: any) => {\n    setSelectedAnime(anime);\n    setAnimeTitle(anime.title);\n    setAnimeId(anime.id);\n  };\n\n  const handleTestScraper = async () => {\n    setIsLoading(true);\n    setError(null);\n    setScrapeResult(null);\n\n    try {\n      await HiAnimeScraperService.testScraper();\n      setScrapeResult({\n        success: true,\n        streamUrl: 'Test completed - check console for details',\n        episodeData: { test: true }\n      });\n    } catch (error) {\n      setError(error instanceof Error ? error.message : 'Test failed');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h2 className=\"text-2xl font-bold text-gray-900\">HiAnime.do Scraper</h2>\n        <Button\n          onClick={handleTestScraper}\n          variant=\"outline\"\n          disabled={isLoading}\n          className=\"text-sm\"\n        >\n          🧪 Test Scraper\n        </Button>\n      </div>\n\n      {/* Anime Selection */}\n      <Card className=\"p-6\">\n        <h3 className=\"text-lg font-semibold mb-4\">Select Anime</h3>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n              Search Anime\n            </label>\n            <Input\n              type=\"text\"\n              placeholder=\"Search anime...\"\n              value={animeTitle}\n              onChange={(e) => setAnimeTitle(e.target.value)}\n              className=\"w-full\"\n            />\n          </div>\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n              Anime ID (UUID)\n            </label>\n            <Input\n              type=\"text\"\n              placeholder=\"Anime UUID from database\"\n              value={animeId}\n              onChange={(e) => setAnimeId(e.target.value)}\n              className=\"w-full\"\n            />\n          </div>\n        </div>\n\n        {/* Anime List */}\n        {animeList.length > 0 && (\n          <div className=\"mt-4\">\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n              Or select from existing anime:\n            </label>\n            <div className=\"max-h-40 overflow-y-auto border rounded-md\">\n              {animeList.slice(0, 10).map((anime) => (\n                <button\n                  key={anime.id}\n                  onClick={() => handleAnimeSelect(anime)}\n                  className={`w-full text-left px-3 py-2 hover:bg-gray-100 border-b last:border-b-0 ${\n                    selectedAnime?.id === anime.id ? 'bg-blue-50 text-blue-700' : ''\n                  }`}\n                >\n                  <div className=\"font-medium\">{anime.title}</div>\n                  <div className=\"text-sm text-gray-500\">ID: {anime.id}</div>\n                </button>\n              ))}\n            </div>\n          </div>\n        )}\n      </Card>\n\n      {/* Single Episode Scraping */}\n      <Card className=\"p-6\">\n        <h3 className=\"text-lg font-semibold mb-4\">Single Episode Scraping</h3>\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n              Episode Number\n            </label>\n            <Input\n              type=\"number\"\n              min=\"1\"\n              value={episodeNumber}\n              onChange={(e) => setEpisodeNumber(parseInt(e.target.value) || 1)}\n              className=\"w-full\"\n            />\n          </div>\n          <div className=\"flex items-end\">\n            <Button\n              onClick={handleSingleScrape}\n              disabled={isLoading || !animeTitle.trim() || !animeId.trim()}\n              className=\"w-full\"\n            >\n              {isLoading ? <LoadingSpinner size=\"sm\" /> : '🎬 Scrape Episode'}\n            </Button>\n          </div>\n        </div>\n      </Card>\n\n      {/* Batch Episode Scraping */}\n      <Card className=\"p-6\">\n        <h3 className=\"text-lg font-semibold mb-4\">Batch Episode Scraping</h3>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n              Episode Range\n            </label>\n            <Input\n              type=\"text\"\n              placeholder=\"e.g., 1-5, 1,3,5, or 1\"\n              value={episodeRange}\n              onChange={(e) => setEpisodeRange(e.target.value)}\n              className=\"w-full\"\n            />\n            <p className=\"text-xs text-gray-500 mt-1\">\n              Examples: 1-5 (episodes 1 through 5), 1,3,5 (specific episodes), 1 (single episode)\n            </p>\n          </div>\n          <div className=\"flex items-end space-x-2\">\n            <Button\n              onClick={handleBatchScrape}\n              disabled={isLoading || !animeTitle.trim() || !animeId.trim() || !episodeRange.trim()}\n              variant=\"secondary\"\n              className=\"flex-1\"\n            >\n              {isLoading ? <LoadingSpinner size=\"sm\" /> : '📺 Batch Scrape'}\n            </Button>\n            <Button\n              onClick={handleScrapeAllEpisodes}\n              disabled={isLoading || !animeTitle.trim() || !animeId.trim()}\n              variant=\"primary\"\n              className=\"flex-1\"\n            >\n              {isLoading ? <LoadingSpinner size=\"sm\" /> : '🎬 Scrape All Episodes'}\n            </Button>\n          </div>\n        </div>\n      </Card>\n\n      {/* Error Display */}\n      {error && (\n        <Card className=\"p-6 border-red-200 bg-red-50\">\n          <div className=\"flex items-center\">\n            <div className=\"text-red-600 mr-2\">❌</div>\n            <div className=\"text-red-800\">{error}</div>\n          </div>\n        </Card>\n      )}\n\n      {/* Single Scrape Result */}\n      {scrapeResult && (\n        <Card className=\"p-6 border-green-200 bg-green-50\">\n          <h3 className=\"text-lg font-semibold mb-4 text-green-800\">\n            {scrapeResult.success ? '✅ Scraping Successful' : '❌ Scraping Failed'}\n          </h3>\n          \n          {scrapeResult.success ? (\n            <div className=\"space-y-3\">\n              <div>\n                <label className=\"block text-sm font-medium text-green-700 mb-1\">\n                  Stream URL:\n                </label>\n                <div className=\"bg-white p-2 rounded border text-sm font-mono break-all\">\n                  {scrapeResult.streamUrl}\n                </div>\n              </div>\n              \n              {scrapeResult.episodeData && (\n                <div>\n                  <label className=\"block text-sm font-medium text-green-700 mb-1\">\n                    Episode Data:\n                  </label>\n                  <pre className=\"bg-white p-2 rounded border text-xs overflow-auto\">\n                    {JSON.stringify(scrapeResult.episodeData, null, 2)}\n                  </pre>\n                </div>\n              )}\n            </div>\n          ) : (\n            <div className=\"text-red-800\">\n              <strong>Error:</strong> {scrapeResult.error}\n            </div>\n          )}\n        </Card>\n      )}\n\n      {/* Batch Scrape Result */}\n      {batchResult && (\n        <Card className=\"p-6 border-blue-200 bg-blue-50\">\n          <h3 className=\"text-lg font-semibold mb-4 text-blue-800\">\n            📊 Batch Scraping Results\n          </h3>\n          \n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mb-4\">\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-blue-600\">{batchResult.summary.totalEpisodes}</div>\n              <div className=\"text-sm text-blue-700\">Total Episodes</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-green-600\">{batchResult.summary.successCount}</div>\n              <div className=\"text-sm text-green-700\">Successful</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-red-600\">{batchResult.summary.errorCount}</div>\n              <div className=\"text-sm text-red-700\">Failed</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-purple-600\">{batchResult.summary.successRate.toFixed(1)}%</div>\n              <div className=\"text-sm text-purple-700\">Success Rate</div>\n            </div>\n          </div>\n\n          {/* Detailed Results */}\n          <div className=\"space-y-2\">\n            <h4 className=\"font-medium text-blue-800\">Episode Results:</h4>\n            <div className=\"max-h-40 overflow-y-auto space-y-1\">\n              {batchResult.results.map((result, index) => (\n                <div\n                  key={index}\n                  className={`flex items-center justify-between p-2 rounded text-sm ${\n                    result.success ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'\n                  }`}\n                >\n                  <span>Episode {index + 1}</span>\n                  <span>{result.success ? '✅ Success' : `❌ ${result.error}`}</span>\n                </div>\n              ))}\n            </div>\n          </div>\n        </Card>\n      )}\n\n      {/* Instructions */}\n      <Card className=\"p-6 border-gray-200 bg-gray-50\">\n        <h3 className=\"text-lg font-semibold mb-4\">📋 Instructions</h3>\n        <div className=\"space-y-3 text-sm text-gray-700\">\n          <div>\n            <strong>1. Setup:</strong> Make sure you have Playwright installed: <code className=\"bg-gray-200 px-1 rounded\">npm run install-playwright</code>\n          </div>\n          <div>\n            <strong>2. Single Episode:</strong> Enter anime title, anime ID, and episode number to scrape one episode.\n          </div>\n          <div>\n            <strong>3. Batch Scraping:</strong> Use episode range format (1-5, 1,3,5, or 1) to scrape multiple episodes.\n          </div>\n          <div>\n            <strong>4. Anime ID:</strong> Use the UUID from your anime database, not external IDs.\n          </div>\n          <div>\n            <strong>5. Rate Limiting:</strong> The scraper includes delays between requests to avoid being blocked.\n          </div>\n        </div>\n      </Card>\n\n      {/* Scraped Episodes Modal */}\n      {showScrapedEpisodes && scrapedEpisodesData && (\n        <ScrapedEpisodesModal\n          isOpen={showScrapedEpisodes}\n          onClose={() => setShowScrapedEpisodes(false)}\n          animeId={animeId}\n          animeTitle={animeTitle}\n          scrapedEpisodes={scrapedEpisodesData.scrapedEpisodes}\n          failedEpisodes={scrapedEpisodesData.failedEpisodes}\n          summary={scrapedEpisodesData.summary}\n          onEpisodesAdded={() => {\n            // Refresh anime list or show success message\n            console.log('Episodes added successfully!');\n          }}\n        />\n      )}\n    </div>\n  );\n};\n"],"names":["HiAnimeScraperComponent","isLoading","setIsLoading","useState","animeTitle","setAnimeTitle","animeId","setAnimeId","episodeNumber","setEpisodeNumber","episodeRange","setEpisodeRange","scrapeResult","setScrapeResult","batchResult","setBatchResult","error","setError","animeList","setAnimeList","selectedAnime","setSelectedAnime","showScrapedEpisodes","setShowScrapedEpisodes","scrapedEpisodesData","setScrapedEpisodesData","React","useEffect","loadAnimeList","async","result","AdminAnimeService","getAnimeList","anime","jsxs","className","children","jsx","Button","onClick","HiAnimeScraperService","testScraper","success","streamUrl","episodeData","test","Error","message","variant","disabled","Card","Input","type","placeholder","value","onChange","e","target","length","slice","map","title","id","handleAnimeSelect","min","parseInt","trim","scrapeAnimeEpisode","headless","timeout","retries","LoadingSpinner","size","episodeNumbers","includes","start","end","split","Number","Array","from","_","i","batchScrapeEpisodes","delayBetweenEpisodes","summary","errorCount","scrapeAllEpisodes","maxEpisodes","data","err","JSON","stringify","totalEpisodes","successCount","successRate","toFixed","results","index","ScrapedEpisodesModal","isOpen","onClose","scrapedEpisodes","failedEpisodes","onEpisodesAdded"],"mappings":"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"}