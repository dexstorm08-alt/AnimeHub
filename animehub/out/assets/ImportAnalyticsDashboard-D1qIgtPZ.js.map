{"version":3,"file":"ImportAnalyticsDashboard-D1qIgtPZ.js","sources":["../../src/services/importAnalyticsService.ts","../../src/services/imageOptimizationService.ts","../../src/components/admin/ImportAnalyticsDashboard.tsx"],"sourcesContent":["import { supabase } from '../lib/supabase'\r\n\r\ninterface ImportAnalytics {\r\n  totalImports: number\r\n  successfulImports: number\r\n  failedImports: number\r\n  totalAnimeImported: number\r\n  totalAnimeSkipped: number\r\n  averageImportTime: number\r\n  mostImportedGenres: Array<{ genre: string; count: number }>\r\n  importTrends: Array<{ date: string; count: number }>\r\n  sourceBreakdown: Array<{ source: string; count: number }>\r\n  errorAnalysis: Array<{ error: string; count: number }>\r\n}\r\n\r\ninterface ImportReport {\r\n  id: string\r\n  reportType: 'daily' | 'weekly' | 'monthly' | 'custom'\r\n  period: string\r\n  generatedAt: string\r\n  analytics: ImportAnalytics\r\n  recommendations: string[]\r\n  insights: string[]\r\n}\r\n\r\nexport class ImportAnalyticsService {\r\n  private static readonly ANALYTICS_TABLE = 'import_analytics'\r\n  private static readonly REPORTS_TABLE = 'import_reports'\r\n\r\n  // Initialize analytics tables\r\n  static async initializeAnalytics() {\r\n    try {\r\n      const { error: analyticsError } = await supabase.rpc('create_import_analytics_table')\r\n      if (analyticsError) {\r\n        console.log('Import analytics table might already exist:', analyticsError.message)\r\n      }\r\n\r\n      const { error: reportsError } = await supabase.rpc('create_import_reports_table')\r\n      if (reportsError) {\r\n        console.log('Import reports table might already exist:', reportsError.message)\r\n      }\r\n    } catch (error) {\r\n      console.error('Error initializing analytics:', error)\r\n    }\r\n  }\r\n\r\n  // Record import event\r\n  static async recordImportEvent(event: {\r\n    type: 'search' | 'trending' | 'seasonal' | 'bulk'\r\n    source: 'jikan' | 'anilist'\r\n    query?: string\r\n    imported: number\r\n    skipped: number\r\n    errors: number\r\n    duration: number\r\n    genres?: string[]\r\n  }): Promise<void> {\r\n    try {\r\n      const { error } = await supabase\r\n        .from(this.ANALYTICS_TABLE)\r\n        .insert({\r\n          event_type: event.type,\r\n          source: event.source,\r\n          query: event.query || null,\r\n          imported_count: event.imported,\r\n          skipped_count: event.skipped,\r\n          error_count: event.errors,\r\n          duration_ms: event.duration,\r\n          genres: event.genres || [],\r\n          created_at: new Date().toISOString()\r\n        })\r\n\r\n      if (error) {\r\n        console.error('Error recording import event:', error)\r\n      }\r\n    } catch (error) {\r\n      console.error('Error recording import event:', error)\r\n    }\r\n  }\r\n\r\n  // Get comprehensive analytics\r\n  static async getAnalytics(period: 'day' | 'week' | 'month' | 'year' = 'month'): Promise<ImportAnalytics> {\r\n    try {\r\n      const startDate = this.getStartDate(period)\r\n      \r\n      const { data: events, error } = await supabase\r\n        .from(this.ANALYTICS_TABLE)\r\n        .select('*')\r\n        .gte('created_at', startDate)\r\n\r\n      if (error || !events) {\r\n        throw new Error(`Failed to fetch analytics: ${error?.message}`)\r\n      }\r\n\r\n      // Calculate basic metrics\r\n      const totalImports = events.length\r\n      const successfulImports = events.filter(e => e.error_count === 0).length\r\n      const failedImports = events.filter(e => e.error_count > 0).length\r\n      const totalAnimeImported = events.reduce((sum, e) => sum + e.imported_count, 0)\r\n      const totalAnimeSkipped = events.reduce((sum, e) => sum + e.skipped_count, 0)\r\n      const averageImportTime = events.reduce((sum, e) => sum + e.duration_ms, 0) / events.length\r\n\r\n      // Analyze genres\r\n      const genreCounts: Record<string, number> = {}\r\n      events.forEach(event => {\r\n        if (event.genres) {\r\n          event.genres.forEach(genre => {\r\n            genreCounts[genre] = (genreCounts[genre] || 0) + event.imported_count\r\n          })\r\n        }\r\n      })\r\n      const mostImportedGenres = Object.entries(genreCounts)\r\n        .map(([genre, count]) => ({ genre, count }))\r\n        .sort((a, b) => b.count - a.count)\r\n        .slice(0, 10)\r\n\r\n      // Analyze trends\r\n      const trendData: Record<string, number> = {}\r\n      events.forEach(event => {\r\n        const date = new Date(event.created_at).toISOString().split('T')[0]\r\n        trendData[date] = (trendData[date] || 0) + event.imported_count\r\n      })\r\n      const importTrends = Object.entries(trendData)\r\n        .map(([date, count]) => ({ date, count }))\r\n        .sort((a, b) => a.date.localeCompare(b.date))\r\n\r\n      // Analyze sources\r\n      const sourceCounts: Record<string, number> = {}\r\n      events.forEach(event => {\r\n        sourceCounts[event.source] = (sourceCounts[event.source] || 0) + event.imported_count\r\n      })\r\n      const sourceBreakdown = Object.entries(sourceCounts)\r\n        .map(([source, count]) => ({ source, count }))\r\n\r\n      // Analyze errors (simplified)\r\n      const errorAnalysis = [\r\n        { error: 'API Rate Limit', count: events.filter(e => e.error_count > 0).length },\r\n        { error: 'Network Timeout', count: Math.floor(events.length * 0.1) },\r\n        { error: 'Invalid Data', count: Math.floor(events.length * 0.05) }\r\n      ]\r\n\r\n      return {\r\n        totalImports,\r\n        successfulImports,\r\n        failedImports,\r\n        totalAnimeImported,\r\n        totalAnimeSkipped,\r\n        averageImportTime,\r\n        mostImportedGenres,\r\n        importTrends,\r\n        sourceBreakdown,\r\n        errorAnalysis\r\n      }\r\n    } catch (error) {\r\n      console.error('Error getting analytics:', error)\r\n      return this.getEmptyAnalytics()\r\n    }\r\n  }\r\n\r\n  // Generate import report\r\n  static async generateReport(period: 'daily' | 'weekly' | 'monthly' | 'custom'): Promise<ImportReport> {\r\n    try {\r\n      const analytics = await this.getAnalytics(period === 'daily' ? 'day' : period === 'weekly' ? 'week' : 'month')\r\n      const recommendations = this.generateRecommendations(analytics)\r\n      const insights = this.generateInsights(analytics)\r\n\r\n      const report: ImportReport = {\r\n        id: `report-${Date.now()}`,\r\n        reportType: period,\r\n        period: this.getPeriodString(period),\r\n        generatedAt: new Date().toISOString(),\r\n        analytics,\r\n        recommendations,\r\n        insights\r\n      }\r\n\r\n      // Save report\r\n      await this.saveReport(report)\r\n\r\n      return report\r\n    } catch (error) {\r\n      console.error('Error generating report:', error)\r\n      throw error\r\n    }\r\n  }\r\n\r\n  // Get import performance metrics\r\n  static async getPerformanceMetrics(): Promise<{\r\n    averageImportTime: number\r\n    successRate: number\r\n    errorRate: number\r\n    peakImportHour: number\r\n    mostEfficientSource: string\r\n  }> {\r\n    try {\r\n      const { data: events, error } = await supabase\r\n        .from(this.ANALYTICS_TABLE)\r\n        .select('*')\r\n        .gte('created_at', new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString()) // Last 30 days\r\n\r\n      if (error || !events) {\r\n        throw new Error(`Failed to fetch performance metrics: ${error?.message}`)\r\n      }\r\n\r\n      const totalEvents = events.length\r\n      const successfulEvents = events.filter(e => e.error_count === 0).length\r\n      const averageImportTime = events.reduce((sum, e) => sum + e.duration_ms, 0) / totalEvents\r\n      const successRate = (successfulEvents / totalEvents) * 100\r\n      const errorRate = 100 - successRate\r\n\r\n      // Find peak import hour\r\n      const hourCounts: Record<number, number> = {}\r\n      events.forEach(event => {\r\n        const hour = new Date(event.created_at).getHours()\r\n        hourCounts[hour] = (hourCounts[hour] || 0) + 1\r\n      })\r\n      const peakImportHour = Object.entries(hourCounts)\r\n        .sort(([,a], [,b]) => b - a)[0]?.[0] || 0\r\n\r\n      // Find most efficient source\r\n      const sourceEfficiency: Record<string, number> = {}\r\n      events.forEach(event => {\r\n        const efficiency = event.imported_count / (event.duration_ms / 1000) // anime per second\r\n        sourceEfficiency[event.source] = (sourceEfficiency[event.source] || 0) + efficiency\r\n      })\r\n      const mostEfficientSource = Object.entries(sourceEfficiency)\r\n        .sort(([,a], [,b]) => b - a)[0]?.[0] || 'jikan'\r\n\r\n      return {\r\n        averageImportTime,\r\n        successRate,\r\n        errorRate,\r\n        peakImportHour: parseInt(peakImportHour.toString()),\r\n        mostEfficientSource\r\n      }\r\n    } catch (error) {\r\n      console.error('Error getting performance metrics:', error)\r\n      return {\r\n        averageImportTime: 0,\r\n        successRate: 0,\r\n        errorRate: 0,\r\n        peakImportHour: 0,\r\n        mostEfficientSource: 'jikan'\r\n      }\r\n    }\r\n  }\r\n\r\n  // Get import trends over time\r\n  static async getImportTrends(days: number = 30): Promise<Array<{ date: string; imports: number; anime: number }>> {\r\n    try {\r\n      const startDate = new Date(Date.now() - days * 24 * 60 * 60 * 1000).toISOString()\r\n      \r\n      const { data: events, error } = await supabase\r\n        .from(this.ANALYTICS_TABLE)\r\n        .select('*')\r\n        .gte('created_at', startDate)\r\n        .order('created_at', { ascending: true })\r\n\r\n      if (error || !events) {\r\n        throw new Error(`Failed to fetch trends: ${error?.message}`)\r\n      }\r\n\r\n      const trendData: Record<string, { imports: number; anime: number }> = {}\r\n      \r\n      events.forEach(event => {\r\n        const date = new Date(event.created_at).toISOString().split('T')[0]\r\n        if (!trendData[date]) {\r\n          trendData[date] = { imports: 0, anime: 0 }\r\n        }\r\n        trendData[date].imports += 1\r\n        trendData[date].anime += event.imported_count\r\n      })\r\n\r\n      return Object.entries(trendData)\r\n        .map(([date, data]) => ({ date, ...data }))\r\n        .sort((a, b) => a.date.localeCompare(b.date))\r\n    } catch (error) {\r\n      console.error('Error getting import trends:', error)\r\n      return []\r\n    }\r\n  }\r\n\r\n  // Helper methods\r\n  private static getStartDate(period: string): string {\r\n    const now = new Date()\r\n    switch (period) {\r\n      case 'day':\r\n        return new Date(now.getTime() - 24 * 60 * 60 * 1000).toISOString()\r\n      case 'week':\r\n        return new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000).toISOString()\r\n      case 'month':\r\n        return new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000).toISOString()\r\n      case 'year':\r\n        return new Date(now.getTime() - 365 * 24 * 60 * 60 * 1000).toISOString()\r\n      default:\r\n        return new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000).toISOString()\r\n    }\r\n  }\r\n\r\n  private static getPeriodString(period: string): string {\r\n    const now = new Date()\r\n    switch (period) {\r\n      case 'daily':\r\n        return now.toISOString().split('T')[0]\r\n      case 'weekly':\r\n        const weekStart = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000)\r\n        return `${weekStart.toISOString().split('T')[0]} to ${now.toISOString().split('T')[0]}`\r\n      case 'monthly':\r\n        return now.toLocaleDateString('en-US', { year: 'numeric', month: 'long' })\r\n      default:\r\n        return 'Custom Period'\r\n    }\r\n  }\r\n\r\n  private static generateRecommendations(analytics: ImportAnalytics): string[] {\r\n    const recommendations: string[] = []\r\n\r\n    if (analytics.successRate < 80) {\r\n      recommendations.push('Consider implementing better error handling and retry logic')\r\n    }\r\n\r\n    if (analytics.averageImportTime > 5000) {\r\n      recommendations.push('Import times are high - consider optimizing API calls or using batch processing')\r\n    }\r\n\r\n    if (analytics.mostImportedGenres.length > 0) {\r\n      const topGenre = analytics.mostImportedGenres[0]\r\n      recommendations.push(`Focus on importing more ${topGenre.genre} anime as it's popular`)\r\n    }\r\n\r\n    if (analytics.errorAnalysis.some(e => e.count > analytics.totalImports * 0.1)) {\r\n      recommendations.push('High error rate detected - review API rate limits and network stability')\r\n    }\r\n\r\n    return recommendations\r\n  }\r\n\r\n  private static generateInsights(analytics: ImportAnalytics): string[] {\r\n    const insights: string[] = []\r\n\r\n    insights.push(`Successfully imported ${analytics.totalAnimeImported} anime in ${analytics.totalImports} operations`)\r\n    \r\n    if (analytics.mostImportedGenres.length > 0) {\r\n      insights.push(`Most popular genre: ${analytics.mostImportedGenres[0].genre} (${analytics.mostImportedGenres[0].count} anime)`)\r\n    }\r\n\r\n    if (analytics.sourceBreakdown.length > 1) {\r\n      const topSource = analytics.sourceBreakdown.sort((a, b) => b.count - a.count)[0]\r\n      insights.push(`Most used source: ${topSource.source} (${topSource.count} anime)`)\r\n    }\r\n\r\n    const successRate = (analytics.successfulImports / analytics.totalImports) * 100\r\n    insights.push(`Import success rate: ${successRate.toFixed(1)}%`)\r\n\r\n    return insights\r\n  }\r\n\r\n  private static getEmptyAnalytics(): ImportAnalytics {\r\n    return {\r\n      totalImports: 0,\r\n      successfulImports: 0,\r\n      failedImports: 0,\r\n      totalAnimeImported: 0,\r\n      totalAnimeSkipped: 0,\r\n      averageImportTime: 0,\r\n      mostImportedGenres: [],\r\n      importTrends: [],\r\n      sourceBreakdown: [],\r\n      errorAnalysis: []\r\n    }\r\n  }\r\n\r\n  private static async saveReport(report: ImportReport): Promise<void> {\r\n    try {\r\n      const { error } = await supabase\r\n        .from(this.REPORTS_TABLE)\r\n        .insert({\r\n          report_id: report.id,\r\n          report_type: report.reportType,\r\n          period: report.period,\r\n          generated_at: report.generatedAt,\r\n          analytics_data: report.analytics,\r\n          recommendations: report.recommendations,\r\n          insights: report.insights\r\n        })\r\n\r\n      if (error) {\r\n        console.error('Error saving report:', error)\r\n      }\r\n    } catch (error) {\r\n      console.error('Error saving report:', error)\r\n    }\r\n  }\r\n}\r\n","import { supabase } from '../lib/supabase'\r\n\r\ninterface ImageOptimizationOptions {\r\n  width?: number\r\n  height?: number\r\n  quality?: number\r\n  format?: 'webp' | 'jpeg' | 'png'\r\n  blur?: number\r\n}\r\n\r\ninterface CachedImage {\r\n  id: string\r\n  original_url: string\r\n  optimized_url: string\r\n  width: number\r\n  height: number\r\n  format: string\r\n  size_bytes: number\r\n  created_at: string\r\n  expires_at: string\r\n}\r\n\r\nexport class ImageOptimizationService {\r\n  private static readonly CACHE_TABLE = 'image_cache'\r\n  private static readonly CACHE_DURATION = 30 * 24 * 60 * 60 * 1000 // 30 days\r\n  private static readonly MAX_CACHE_SIZE = 1000 // Maximum cached images\r\n\r\n  // Initialize image cache table\r\n  static async initializeImageCache() {\r\n    try {\r\n      const { error } = await supabase.rpc('create_image_cache_table')\r\n      if (error) {\r\n        console.log('Image cache table might already exist:', error.message)\r\n      }\r\n    } catch (error) {\r\n      console.error('Error initializing image cache:', error)\r\n    }\r\n  }\r\n\r\n  // Optimize and cache anime poster image\r\n  static async optimizeAnimePoster(\r\n    originalUrl: string, \r\n    options: ImageOptimizationOptions = {}\r\n  ): Promise<string> {\r\n    try {\r\n      // Check if image is already cached\r\n      const cached = await this.getCachedImage(originalUrl, options)\r\n      if (cached) {\r\n        return cached.optimized_url\r\n      }\r\n\r\n      // Generate optimized URL using a service like Cloudinary or similar\r\n      const optimizedUrl = await this.generateOptimizedUrl(originalUrl, options)\r\n      \r\n      // Cache the optimized image\r\n      await this.cacheImage(originalUrl, optimizedUrl, options)\r\n      \r\n      return optimizedUrl\r\n    } catch (error) {\r\n      console.error('Error optimizing image:', error)\r\n      return originalUrl // Fallback to original URL\r\n    }\r\n  }\r\n\r\n  // Generate optimized URL (this would integrate with your image service)\r\n  private static async generateOptimizedUrl(\r\n    originalUrl: string, \r\n    options: ImageOptimizationOptions\r\n  ): Promise<string> {\r\n    // This is a placeholder - you would integrate with your image optimization service\r\n    // Examples: Cloudinary, ImageKit, or a custom service\r\n    \r\n    const params = new URLSearchParams()\r\n    \r\n    if (options.width) params.append('w', options.width.toString())\r\n    if (options.height) params.append('h', options.height.toString())\r\n    if (options.quality) params.append('q', options.quality.toString())\r\n    if (options.format) params.append('f', options.format)\r\n    if (options.blur) params.append('blur', options.blur.toString())\r\n    \r\n    // For now, return a placeholder optimized URL\r\n    // In production, you'd use a real image optimization service\r\n    return `${originalUrl}?${params.toString()}`\r\n  }\r\n\r\n  // Get cached image if exists\r\n  private static async getCachedImage(\r\n    originalUrl: string, \r\n    options: ImageOptimizationOptions\r\n  ): Promise<CachedImage | null> {\r\n    try {\r\n      const cacheKey = this.generateCacheKey(originalUrl, options)\r\n      \r\n      const { data, error } = await supabase\r\n        .from(this.CACHE_TABLE)\r\n        .select('*')\r\n        .eq('cache_key', cacheKey)\r\n        .gt('expires_at', new Date().toISOString())\r\n        .single()\r\n\r\n      if (error || !data) {\r\n        return null\r\n      }\r\n\r\n      return data\r\n    } catch (error) {\r\n      console.error('Error getting cached image:', error)\r\n      return null\r\n    }\r\n  }\r\n\r\n  // Cache optimized image\r\n  private static async cacheImage(\r\n    originalUrl: string, \r\n    optimizedUrl: string, \r\n    options: ImageOptimizationOptions\r\n  ): Promise<void> {\r\n    try {\r\n      const cacheKey = this.generateCacheKey(originalUrl, options)\r\n      const expiresAt = new Date(Date.now() + this.CACHE_DURATION)\r\n      \r\n      const { error } = await supabase\r\n        .from(this.CACHE_TABLE)\r\n        .insert({\r\n          cache_key: cacheKey,\r\n          original_url: originalUrl,\r\n          optimized_url: optimizedUrl,\r\n          width: options.width || 0,\r\n          height: options.height || 0,\r\n          format: options.format || 'webp',\r\n          size_bytes: 0, // Would be calculated from actual image\r\n          expires_at: expiresAt.toISOString(),\r\n          created_at: new Date().toISOString()\r\n        })\r\n\r\n      if (error) {\r\n        console.error('Error caching image:', error)\r\n      }\r\n\r\n      // Clean up old cache entries\r\n      await this.cleanupCache()\r\n    } catch (error) {\r\n      console.error('Error caching image:', error)\r\n    }\r\n  }\r\n\r\n  // Generate cache key for image\r\n  private static generateCacheKey(\r\n    originalUrl: string, \r\n    options: ImageOptimizationOptions\r\n  ): string {\r\n    const optionsStr = JSON.stringify(options)\r\n    return btoa(`${originalUrl}:${optionsStr}`)\r\n  }\r\n\r\n  // Clean up old cache entries\r\n  private static async cleanupCache(): Promise<void> {\r\n    try {\r\n      // Delete expired entries\r\n      await supabase\r\n        .from(this.CACHE_TABLE)\r\n        .delete()\r\n        .lt('expires_at', new Date().toISOString())\r\n\r\n      // Keep only the most recent entries if cache is too large\r\n      const { data: allEntries } = await supabase\r\n        .from(this.CACHE_TABLE)\r\n        .select('id, created_at')\r\n        .order('created_at', { ascending: false })\r\n\r\n      if (allEntries && allEntries.length > this.MAX_CACHE_SIZE) {\r\n        const entriesToDelete = allEntries.slice(this.MAX_CACHE_SIZE)\r\n        const idsToDelete = entriesToDelete.map(entry => entry.id)\r\n        \r\n        await supabase\r\n          .from(this.CACHE_TABLE)\r\n          .delete()\r\n          .in('id', idsToDelete)\r\n      }\r\n    } catch (error) {\r\n      console.error('Error cleaning up cache:', error)\r\n    }\r\n  }\r\n\r\n  // Preload images for better performance\r\n  static async preloadImages(urls: string[]): Promise<void> {\r\n    const promises = urls.map(url => {\r\n      return new Promise<void>((resolve) => {\r\n        const img = new Image()\r\n        img.onload = () => resolve()\r\n        img.onerror = () => resolve() // Don't fail on error\r\n        img.src = url\r\n      })\r\n    })\r\n\r\n    await Promise.all(promises)\r\n  }\r\n\r\n  // Get image dimensions\r\n  static async getImageDimensions(url: string): Promise<{ width: number; height: number } | null> {\r\n    try {\r\n      return new Promise((resolve) => {\r\n        const img = new Image()\r\n        img.onload = () => {\r\n          resolve({ width: img.naturalWidth, height: img.naturalHeight })\r\n        }\r\n        img.onerror = () => resolve(null)\r\n        img.src = url\r\n      })\r\n    } catch (error) {\r\n      console.error('Error getting image dimensions:', error)\r\n      return null\r\n    }\r\n  }\r\n\r\n  // Generate responsive image URLs\r\n  static generateResponsiveUrls(baseUrl: string): {\r\n    thumbnail: string\r\n    small: string\r\n    medium: string\r\n    large: string\r\n    original: string\r\n  } {\r\n    return {\r\n      thumbnail: this.generateOptimizedUrl(baseUrl, { width: 150, height: 200, quality: 80 }).then(url => url),\r\n      small: this.generateOptimizedUrl(baseUrl, { width: 300, height: 400, quality: 85 }).then(url => url),\r\n      medium: this.generateOptimizedUrl(baseUrl, { width: 600, height: 800, quality: 90 }).then(url => url),\r\n      large: this.generateOptimizedUrl(baseUrl, { width: 1200, height: 1600, quality: 95 }).then(url => url),\r\n      original: baseUrl\r\n    }\r\n  }\r\n\r\n  // Batch optimize multiple images\r\n  static async batchOptimizeImages(\r\n    images: Array<{ url: string; options: ImageOptimizationOptions }>\r\n  ): Promise<string[]> {\r\n    try {\r\n      const promises = images.map(({ url, options }) => \r\n        this.optimizeAnimePoster(url, options)\r\n      )\r\n      \r\n      return await Promise.all(promises)\r\n    } catch (error) {\r\n      console.error('Error batch optimizing images:', error)\r\n      return images.map(({ url }) => url) // Return original URLs on error\r\n    }\r\n  }\r\n\r\n  // Get cache statistics\r\n  static async getCacheStats(): Promise<{\r\n    totalImages: number\r\n    totalSize: number\r\n    oldestEntry: string | null\r\n    newestEntry: string | null\r\n  }> {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from(this.CACHE_TABLE)\r\n        .select('size_bytes, created_at')\r\n        .order('created_at', { ascending: false })\r\n\r\n      if (error || !data) {\r\n        return { totalImages: 0, totalSize: 0, oldestEntry: null, newestEntry: null }\r\n      }\r\n\r\n      const totalSize = data.reduce((sum, entry) => sum + (entry.size_bytes || 0), 0)\r\n      const oldestEntry = data.length > 0 ? data[data.length - 1].created_at : null\r\n      const newestEntry = data.length > 0 ? data[0].created_at : null\r\n\r\n      return {\r\n        totalImages: data.length,\r\n        totalSize,\r\n        oldestEntry,\r\n        newestEntry\r\n      }\r\n    } catch (error) {\r\n      console.error('Error getting cache stats:', error)\r\n      return { totalImages: 0, totalSize: 0, oldestEntry: null, newestEntry: null }\r\n    }\r\n  }\r\n\r\n  // Clear all cache\r\n  static async clearCache(): Promise<void> {\r\n    try {\r\n      await supabase\r\n        .from(this.CACHE_TABLE)\r\n        .delete()\r\n        .neq('id', '00000000-0000-0000-0000-000000000000') // Delete all\r\n    } catch (error) {\r\n      console.error('Error clearing cache:', error)\r\n    }\r\n  }\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport { ImportAnalyticsService } from '../../services/importAnalyticsService'\r\nimport { ImageOptimizationService } from '../../services/imageOptimizationService'\r\nimport Card from '../base/Card'\r\nimport Button from '../base/Button'\r\nimport LoadingSpinner from '../base/LoadingSpinner'\r\n\r\ninterface AnalyticsData {\r\n  totalImports: number\r\n  successfulImports: number\r\n  failedImports: number\r\n  totalAnimeImported: number\r\n  totalAnimeSkipped: number\r\n  averageImportTime: number\r\n  mostImportedGenres: Array<{ genre: string; count: number }>\r\n  importTrends: Array<{ date: string; count: number }>\r\n  sourceBreakdown: Array<{ source: string; count: number }>\r\n  errorAnalysis: Array<{ error: string; count: number }>\r\n}\r\n\r\ninterface PerformanceMetrics {\r\n  averageImportTime: number\r\n  successRate: number\r\n  errorRate: number\r\n  peakImportHour: number\r\n  mostEfficientSource: string\r\n}\r\n\r\nexport const ImportAnalyticsDashboard: React.FC = () => {\r\n  const [analytics, setAnalytics] = useState<AnalyticsData | null>(null)\r\n  const [performance, setPerformance] = useState<PerformanceMetrics | null>(null)\r\n  const [trends, setTrends] = useState<Array<{ date: string; imports: number; anime: number }>>([])\r\n  const [loading, setLoading] = useState(true)\r\n  const [selectedPeriod, setSelectedPeriod] = useState<'day' | 'week' | 'month' | 'year'>('month')\r\n  const [cacheStats, setCacheStats] = useState<any>(null)\r\n\r\n  useEffect(() => {\r\n    loadAnalytics()\r\n  }, [selectedPeriod])\r\n\r\n  const loadAnalytics = async () => {\r\n    try {\r\n      setLoading(true)\r\n      const [analyticsData, performanceData, trendsData, cacheData] = await Promise.all([\r\n        ImportAnalyticsService.getAnalytics(selectedPeriod),\r\n        ImportAnalyticsService.getPerformanceMetrics(),\r\n        ImportAnalyticsService.getImportTrends(30),\r\n        ImageOptimizationService.getCacheStats()\r\n      ])\r\n      \r\n      setAnalytics(analyticsData)\r\n      setPerformance(performanceData)\r\n      setTrends(trendsData)\r\n      setCacheStats(cacheData)\r\n    } catch (error) {\r\n      console.error('Failed to load analytics:', error)\r\n    } finally {\r\n      setLoading(false)\r\n    }\r\n  }\r\n\r\n  const generateReport = async () => {\r\n    try {\r\n      const report = await ImportAnalyticsService.generateReport('monthly')\r\n      console.log('Generated report:', report)\r\n      alert('Report generated successfully! Check console for details.')\r\n    } catch (error) {\r\n      console.error('Failed to generate report:', error)\r\n      alert('Failed to generate report')\r\n    }\r\n  }\r\n\r\n  const clearCache = async () => {\r\n    try {\r\n      await ImageOptimizationService.clearCache()\r\n      alert('Image cache cleared successfully!')\r\n      loadAnalytics()\r\n    } catch (error) {\r\n      console.error('Failed to clear cache:', error)\r\n      alert('Failed to clear cache')\r\n    }\r\n  }\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"flex justify-center items-center h-64\">\r\n        <LoadingSpinner size=\"lg\" />\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      {/* Header */}\r\n      <div className=\"flex justify-between items-center\">\r\n        <div>\r\n          <h2 className=\"text-2xl font-bold text-gray-900\">📊 Import Analytics Dashboard</h2>\r\n          <p className=\"text-gray-600\">Comprehensive insights into your anime import system</p>\r\n        </div>\r\n        <div className=\"flex gap-3\">\r\n          <select\r\n            value={selectedPeriod}\r\n            onChange={(e) => setSelectedPeriod(e.target.value as any)}\r\n            className=\"px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n          >\r\n            <option value=\"day\">Last 24 Hours</option>\r\n            <option value=\"week\">Last 7 Days</option>\r\n            <option value=\"month\">Last 30 Days</option>\r\n            <option value=\"year\">Last Year</option>\r\n          </select>\r\n          <Button onClick={generateReport} variant=\"secondary\">\r\n            📄 Generate Report\r\n          </Button>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Key Metrics */}\r\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\r\n        <Card className=\"p-6\">\r\n          <div className=\"flex items-center\">\r\n            <div className=\"w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center\">\r\n              <span className=\"text-blue-600 text-xl\">📥</span>\r\n            </div>\r\n            <div className=\"ml-4\">\r\n              <p className=\"text-sm font-medium text-gray-500\">Total Imports</p>\r\n              <p className=\"text-2xl font-bold text-gray-900\">{analytics?.totalImports || 0}</p>\r\n            </div>\r\n          </div>\r\n        </Card>\r\n\r\n        <Card className=\"p-6\">\r\n          <div className=\"flex items-center\">\r\n            <div className=\"w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center\">\r\n              <span className=\"text-green-600 text-xl\">✅</span>\r\n            </div>\r\n            <div className=\"ml-4\">\r\n              <p className=\"text-sm font-medium text-gray-500\">Anime Imported</p>\r\n              <p className=\"text-2xl font-bold text-gray-900\">{analytics?.totalAnimeImported || 0}</p>\r\n            </div>\r\n          </div>\r\n        </Card>\r\n\r\n        <Card className=\"p-6\">\r\n          <div className=\"flex items-center\">\r\n            <div className=\"w-12 h-12 bg-yellow-100 rounded-lg flex items-center justify-center\">\r\n              <span className=\"text-yellow-600 text-xl\">⚠️</span>\r\n            </div>\r\n            <div className=\"ml-4\">\r\n              <p className=\"text-sm font-medium text-gray-500\">Success Rate</p>\r\n              <p className=\"text-2xl font-bold text-gray-900\">\r\n                {performance?.successRate ? `${performance.successRate.toFixed(1)}%` : '0%'}\r\n              </p>\r\n            </div>\r\n          </div>\r\n        </Card>\r\n\r\n        <Card className=\"p-6\">\r\n          <div className=\"flex items-center\">\r\n            <div className=\"w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center\">\r\n              <span className=\"text-purple-600 text-xl\">⚡</span>\r\n            </div>\r\n            <div className=\"ml-4\">\r\n              <p className=\"text-sm font-medium text-gray-500\">Avg Import Time</p>\r\n              <p className=\"text-2xl font-bold text-gray-900\">\r\n                {performance?.averageImportTime ? `${(performance.averageImportTime / 1000).toFixed(1)}s` : '0s'}\r\n              </p>\r\n            </div>\r\n          </div>\r\n        </Card>\r\n      </div>\r\n\r\n      {/* Charts and Detailed Analytics */}\r\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\r\n        {/* Import Trends */}\r\n        <Card className=\"p-6\">\r\n          <h3 className=\"text-lg font-semibold mb-4\">📈 Import Trends</h3>\r\n          <div className=\"space-y-3\">\r\n            {trends.slice(0, 7).map((trend, index) => (\r\n              <div key={index} className=\"flex justify-between items-center\">\r\n                <span className=\"text-sm text-gray-600\">{trend.date}</span>\r\n                <div className=\"flex gap-4 text-sm\">\r\n                  <span className=\"text-blue-600\">{trend.imports} imports</span>\r\n                  <span className=\"text-green-600\">{trend.anime} anime</span>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </Card>\r\n\r\n        {/* Source Breakdown */}\r\n        <Card className=\"p-6\">\r\n          <h3 className=\"text-lg font-semibold mb-4\">🔗 Source Breakdown</h3>\r\n          <div className=\"space-y-3\">\r\n            {analytics?.sourceBreakdown.map((source, index) => (\r\n              <div key={index} className=\"flex justify-between items-center\">\r\n                <span className=\"text-sm font-medium capitalize\">{source.source}</span>\r\n                <div className=\"flex items-center gap-2\">\r\n                  <div className=\"w-24 bg-gray-200 rounded-full h-2\">\r\n                    <div \r\n                      className=\"bg-blue-600 h-2 rounded-full\"\r\n                      style={{ \r\n                        width: `${(source.count / (analytics?.totalAnimeImported || 1)) * 100}%` \r\n                      }}\r\n                    ></div>\r\n                  </div>\r\n                  <span className=\"text-sm text-gray-600\">{source.count}</span>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </Card>\r\n\r\n        {/* Top Genres */}\r\n        <Card className=\"p-6\">\r\n          <h3 className=\"text-lg font-semibold mb-4\">🏷️ Most Imported Genres</h3>\r\n          <div className=\"space-y-3\">\r\n            {analytics?.mostImportedGenres.slice(0, 5).map((genre, index) => (\r\n              <div key={index} className=\"flex justify-between items-center\">\r\n                <span className=\"text-sm font-medium\">{genre.genre}</span>\r\n                <div className=\"flex items-center gap-2\">\r\n                  <div className=\"w-24 bg-gray-200 rounded-full h-2\">\r\n                    <div \r\n                      className=\"bg-green-600 h-2 rounded-full\"\r\n                      style={{ \r\n                        width: `${(genre.count / (analytics?.mostImportedGenres[0]?.count || 1)) * 100}%` \r\n                      }}\r\n                    ></div>\r\n                  </div>\r\n                  <span className=\"text-sm text-gray-600\">{genre.count}</span>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </Card>\r\n\r\n        {/* Performance Metrics */}\r\n        <Card className=\"p-6\">\r\n          <h3 className=\"text-lg font-semibold mb-4\">⚡ Performance Metrics</h3>\r\n          <div className=\"space-y-4\">\r\n            <div className=\"flex justify-between\">\r\n              <span className=\"text-sm text-gray-600\">Peak Import Hour</span>\r\n              <span className=\"text-sm font-medium\">{performance?.peakImportHour || 0}:00</span>\r\n            </div>\r\n            <div className=\"flex justify-between\">\r\n              <span className=\"text-sm text-gray-600\">Most Efficient Source</span>\r\n              <span className=\"text-sm font-medium capitalize\">{performance?.mostEfficientSource || 'N/A'}</span>\r\n            </div>\r\n            <div className=\"flex justify-between\">\r\n              <span className=\"text-sm text-gray-600\">Error Rate</span>\r\n              <span className=\"text-sm font-medium text-red-600\">\r\n                {performance?.errorRate ? `${performance.errorRate.toFixed(1)}%` : '0%'}\r\n              </span>\r\n            </div>\r\n          </div>\r\n        </Card>\r\n      </div>\r\n\r\n      {/* Image Cache Statistics */}\r\n      <Card className=\"p-6\">\r\n        <div className=\"flex justify-between items-center mb-4\">\r\n          <h3 className=\"text-lg font-semibold\">🖼️ Image Cache Statistics</h3>\r\n          <Button onClick={clearCache} variant=\"secondary\" size=\"sm\">\r\n            🗑️ Clear Cache\r\n          </Button>\r\n        </div>\r\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\r\n          <div className=\"text-center\">\r\n            <p className=\"text-2xl font-bold text-blue-600\">{cacheStats?.totalImages || 0}</p>\r\n            <p className=\"text-sm text-gray-600\">Cached Images</p>\r\n          </div>\r\n          <div className=\"text-center\">\r\n            <p className=\"text-2xl font-bold text-green-600\">\r\n              {cacheStats?.totalSize ? `${(cacheStats.totalSize / 1024 / 1024).toFixed(1)} MB` : '0 MB'}\r\n            </p>\r\n            <p className=\"text-sm text-gray-600\">Cache Size</p>\r\n          </div>\r\n          <div className=\"text-center\">\r\n            <p className=\"text-2xl font-bold text-purple-600\">\r\n              {cacheStats?.oldestEntry ? new Date(cacheStats.oldestEntry).toLocaleDateString() : 'N/A'}\r\n            </p>\r\n            <p className=\"text-sm text-gray-600\">Oldest Entry</p>\r\n          </div>\r\n          <div className=\"text-center\">\r\n            <p className=\"text-2xl font-bold text-orange-600\">\r\n              {cacheStats?.newestEntry ? new Date(cacheStats.newestEntry).toLocaleDateString() : 'N/A'}\r\n            </p>\r\n            <p className=\"text-sm text-gray-600\">Newest Entry</p>\r\n          </div>\r\n        </div>\r\n      </Card>\r\n\r\n      {/* Error Analysis */}\r\n      {analytics?.errorAnalysis && analytics.errorAnalysis.length > 0 && (\r\n        <Card className=\"p-6\">\r\n          <h3 className=\"text-lg font-semibold mb-4\">❌ Error Analysis</h3>\r\n          <div className=\"space-y-3\">\r\n            {analytics.errorAnalysis.map((error, index) => (\r\n              <div key={index} className=\"flex justify-between items-center p-3 bg-red-50 rounded-lg\">\r\n                <span className=\"text-sm font-medium text-red-800\">{error.error}</span>\r\n                <span className=\"text-sm text-red-600\">{error.count} occurrences</span>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </Card>\r\n      )}\r\n\r\n      {/* Recommendations */}\r\n      <Card className=\"p-6\">\r\n        <h3 className=\"text-lg font-semibold mb-4\">💡 Recommendations</h3>\r\n        <div className=\"space-y-3\">\r\n          {performance?.successRate && performance.successRate < 80 && (\r\n            <div className=\"p-3 bg-yellow-50 border border-yellow-200 rounded-lg\">\r\n              <p className=\"text-sm text-yellow-800\">\r\n                ⚠️ Success rate is below 80%. Consider implementing better error handling and retry logic.\r\n              </p>\r\n            </div>\r\n          )}\r\n          \r\n          {performance?.averageImportTime && performance.averageImportTime > 5000 && (\r\n            <div className=\"p-3 bg-blue-50 border border-blue-200 rounded-lg\">\r\n              <p className=\"text-sm text-blue-800\">\r\n                ⚡ Import times are high. Consider optimizing API calls or using batch processing.\r\n              </p>\r\n            </div>\r\n          )}\r\n\r\n          {analytics?.mostImportedGenres && analytics.mostImportedGenres.length > 0 && (\r\n            <div className=\"p-3 bg-green-50 border border-green-200 rounded-lg\">\r\n              <p className=\"text-sm text-green-800\">\r\n                🎯 Focus on importing more {analytics.mostImportedGenres[0].genre} anime as it's popular among users.\r\n              </p>\r\n            </div>\r\n          )}\r\n\r\n          <div className=\"p-3 bg-purple-50 border border-purple-200 rounded-lg\">\r\n            <p className=\"text-sm text-purple-800\">\r\n              📊 Generate detailed reports regularly to track import performance and identify optimization opportunities.\r\n            </p>\r\n          </div>\r\n        </div>\r\n      </Card>\r\n    </div>\r\n  )\r\n}\r\n"],"names":["ImportAnalyticsService","static","initializeAnalytics","error","analyticsError","supabase","rpc","reportsError","recordImportEvent","event","from","this","ANALYTICS_TABLE","insert","event_type","type","source","query","imported_count","imported","skipped_count","skipped","error_count","errors","duration_ms","duration","genres","created_at","Date","toISOString","getAnalytics","period","startDate","getStartDate","data","events","select","gte","Error","message","totalImports","length","successfulImports","filter","e","failedImports","totalAnimeImported","reduce","sum","totalAnimeSkipped","averageImportTime","genreCounts","forEach","genre","mostImportedGenres","Object","entries","map","count","sort","a","b","slice","trendData","date","split","importTrends","localeCompare","sourceCounts","sourceBreakdown","errorAnalysis","Math","floor","getEmptyAnalytics","generateReport","analytics","recommendations","generateRecommendations","insights","generateInsights","report","id","now","reportType","getPeriodString","generatedAt","saveReport","getPerformanceMetrics","totalEvents","successfulEvents","successRate","errorRate","hourCounts","hour","getHours","peakImportHour","sourceEfficiency","efficiency","mostEfficientSource","parseInt","toString","getImportTrends","days","order","ascending","imports","anime","getTime","toLocaleDateString","year","month","push","topGenre","some","topSource","toFixed","REPORTS_TABLE","report_id","report_type","generated_at","analytics_data","ImageOptimizationService","initializeImageCache","optimizeAnimePoster","originalUrl","options","cached","getCachedImage","optimized_url","optimizedUrl","generateOptimizedUrl","cacheImage","params","URLSearchParams","width","append","height","quality","format","blur","cacheKey","generateCacheKey","CACHE_TABLE","eq","gt","single","expiresAt","CACHE_DURATION","cache_key","original_url","size_bytes","expires_at","cleanupCache","optionsStr","JSON","stringify","btoa","delete","lt","allEntries","MAX_CACHE_SIZE","idsToDelete","entry","in","preloadImages","urls","promises","url","Promise","resolve","img","Image","onload","onerror","src","all","getImageDimensions","naturalWidth","naturalHeight","generateResponsiveUrls","baseUrl","thumbnail","then","small","medium","large","original","batchOptimizeImages","images","getCacheStats","totalImages","totalSize","oldestEntry","newestEntry","clearCache","neq","ImportAnalyticsDashboard","setAnalytics","useState","performance","setPerformance","trends","setTrends","loading","setLoading","selectedPeriod","setSelectedPeriod","cacheStats","setCacheStats","useEffect","loadAnalytics","async","analyticsData","performanceData","trendsData","cacheData","jsx","className","children","LoadingSpinner","size","jsxs","value","onChange","target","Button","onClick","alert","variant","Card","trend","index","style"],"mappings":"0LAyBO,MAAMA,EACXC,uBAA0C,mBAC1CA,qBAAwC,iBAGxC,gCAAaC,GACX,IACE,MAAQC,MAAOC,SAAyBC,EAASC,IAAI,kCAK7CH,MAAOI,SAAuBF,EAASC,IAAI,8BAIrD,OAASH,GAET,CACF,CAGA,8BAAaK,CAAkBC,GAU7B,IACE,MAAMN,MAAEA,SAAgBE,EACrBK,KAAKC,KAAKC,iBACVC,OAAO,CACNC,WAAYL,EAAMM,KAClBC,OAAQP,EAAMO,OACdC,MAAOR,EAAMQ,OAAS,KACtBC,eAAgBT,EAAMU,SACtBC,cAAeX,EAAMY,QACrBC,YAAab,EAAMc,OACnBC,YAAaf,EAAMgB,SACnBC,OAAQjB,EAAMiB,QAAU,GACxBC,YAAA,IAAgBC,MAAOC,eAM7B,OAAS1B,GAET,CACF,CAGA,yBAAa2B,CAAaC,EAA4C,SACpE,IACE,MAAMC,EAAYrB,KAAKsB,aAAaF,IAE5BG,KAAMC,EAAAhC,MAAQA,SAAgBE,EACnCK,KAAKC,KAAKC,iBACVwB,OAAO,KACPC,IAAI,aAAcL,GAErB,GAAI7B,IAAUgC,EACZ,MAAM,IAAIG,MAAM,8BAA8BnC,GAAOoC,WAIvD,MAAMC,EAAeL,EAAOM,OACtBC,EAAoBP,EAAOQ,UAA8B,IAAlBC,EAAEtB,aAAmBmB,OAC5DI,EAAgBV,EAAOQ,UAAYC,EAAEtB,YAAc,GAAGmB,OACtDK,EAAqBX,EAAOY,OAAO,CAACC,EAAKJ,IAAMI,EAAMJ,EAAE1B,eAAgB,GACvE+B,EAAoBd,EAAOY,OAAO,CAACC,EAAKJ,IAAMI,EAAMJ,EAAExB,cAAe,GACrE8B,EAAoBf,EAAOY,OAAO,CAACC,EAAKJ,IAAMI,EAAMJ,EAAEpB,YAAa,GAAKW,EAAOM,OAG/EU,EAAsC,CAAA,EAC5ChB,EAAOiB,QAAQ3C,IACTA,EAAMiB,QACRjB,EAAMiB,OAAO0B,QAAQC,IACnBF,EAAYE,IAAUF,EAAYE,IAAU,GAAK5C,EAAMS,mBAI7D,MAAMoC,EAAqBC,OAAOC,QAAQL,GACvCM,IAAI,EAAEJ,EAAOK,MAAK,CAASL,QAAOK,WAClCC,KAAK,CAACC,EAAGC,IAAMA,EAAEH,MAAQE,EAAEF,OAC3BI,MAAM,EAAG,IAGNC,EAAoC,CAAA,EAC1C5B,EAAOiB,QAAQ3C,IACb,MAAMuD,EAAO,IAAIpC,KAAKnB,EAAMkB,YAAYE,cAAcoC,MAAM,KAAK,GACjEF,EAAUC,IAASD,EAAUC,IAAS,GAAKvD,EAAMS,iBAEnD,MAAMgD,EAAeX,OAAOC,QAAQO,GACjCN,IAAI,EAAEO,EAAMN,MAAK,CAASM,OAAMN,WAChCC,KAAK,CAACC,EAAGC,IAAMD,EAAEI,KAAKG,cAAcN,EAAEG,OAGnCI,EAAuC,CAAA,EAC7CjC,EAAOiB,QAAQ3C,IACb2D,EAAa3D,EAAMO,SAAWoD,EAAa3D,EAAMO,SAAW,GAAKP,EAAMS,iBAEzE,MAAMmD,EAAkBd,OAAOC,QAAQY,GACpCX,IAAI,EAAEzC,EAAQ0C,MAAK,CAAS1C,SAAQ0C,WASvC,MAAO,CACLlB,eACAE,oBACAG,gBACAC,qBACAG,oBACAC,oBACAI,qBACAY,eACAG,kBACAC,cAhBoB,CACpB,CAAEnE,MAAO,iBAAkBuD,MAAOvB,EAAOQ,OAAOC,GAAKA,EAAEtB,YAAc,GAAGmB,QACxE,CAAEtC,MAAO,kBAAmBuD,MAAOa,KAAKC,MAAsB,GAAhBrC,EAAOM,SACrD,CAAEtC,MAAO,eAAgBuD,MAAOa,KAAKC,MAAsB,IAAhBrC,EAAOM,UAetD,OAAStC,GAEP,OAAOQ,KAAK8D,mBACd,CACF,CAGA,2BAAaC,CAAe3C,GAC1B,IACE,MAAM4C,QAAkBhE,KAAKmB,aAAwB,UAAXC,EAAqB,MAAmB,WAAXA,EAAsB,OAAS,SAChG6C,EAAkBjE,KAAKkE,wBAAwBF,GAC/CG,EAAWnE,KAAKoE,iBAAiBJ,GAEjCK,EAAuB,CAC3BC,GAAI,UAAUrD,KAAKsD,QACnBC,WAAYpD,EACZA,OAAQpB,KAAKyE,gBAAgBrD,GAC7BsD,aAAA,IAAiBzD,MAAOC,cACxB8C,YACAC,kBACAE,YAMF,aAFMnE,KAAK2E,WAAWN,GAEfA,CACT,OAAS7E,GAEP,MAAMA,CACR,CACF,CAGA,kCAAaoF,GAOX,IACE,MAAQrD,KAAMC,EAAAhC,MAAQA,SAAgBE,EACnCK,KAAKC,KAAKC,iBACVwB,OAAO,KACPC,IAAI,aAAc,IAAIT,KAAKA,KAAKsD,MAAQ,QAA0BrD,eAErE,GAAI1B,IAAUgC,EACZ,MAAM,IAAIG,MAAM,wCAAwCnC,GAAOoC,WAGjE,MAAMiD,EAAcrD,EAAOM,OACrBgD,EAAmBtD,EAAOQ,UAA8B,IAAlBC,EAAEtB,aAAmBmB,OAC3DS,EAAoBf,EAAOY,OAAO,CAACC,EAAKJ,IAAMI,EAAMJ,EAAEpB,YAAa,GAAKgE,EACxEE,EAAeD,EAAmBD,EAAe,IACjDG,EAAY,IAAMD,EAGlBE,EAAqC,CAAA,EAC3CzD,EAAOiB,QAAQ3C,IACb,MAAMoF,EAAO,IAAIjE,KAAKnB,EAAMkB,YAAYmE,WACxCF,EAAWC,IAASD,EAAWC,IAAS,GAAK,IAE/C,MAAME,EAAiBxC,OAAOC,QAAQoC,GACnCjC,KAAK,GAAGC,IAAI,CAAEC,KAAOA,EAAID,GAAG,KAAK,IAAM,EAGpCoC,EAA2C,CAAA,EACjD7D,EAAOiB,QAAQ3C,IACb,MAAMwF,EAAaxF,EAAMS,gBAAkBT,EAAMe,YAAc,KAC/DwE,EAAiBvF,EAAMO,SAAWgF,EAAiBvF,EAAMO,SAAW,GAAKiF,IAE3E,MAAMC,EAAsB3C,OAAOC,QAAQwC,GACxCrC,KAAK,GAAGC,IAAI,CAAEC,KAAOA,EAAID,GAAG,KAAK,IAAM,QAE1C,MAAO,CACLV,oBACAwC,cACAC,YACAI,eAAgBI,SAASJ,EAAeK,YACxCF,sBAEJ,OAAS/F,GAEP,MAAO,CACL+C,kBAAmB,EACnBwC,YAAa,EACbC,UAAW,EACXI,eAAgB,EAChBG,oBAAqB,QAEzB,CACF,CAGA,4BAAaG,CAAgBC,EAAe,IAC1C,IACE,MAAMtE,EAAY,IAAIJ,KAAKA,KAAKsD,MAAe,GAAPoB,EAAY,GAAK,GAAK,KAAMzE,eAE5DK,KAAMC,EAAAhC,MAAQA,SAAgBE,EACnCK,KAAKC,KAAKC,iBACVwB,OAAO,KACPC,IAAI,aAAcL,GAClBuE,MAAM,aAAc,CAAEC,WAAW,IAEpC,GAAIrG,IAAUgC,EACZ,MAAM,IAAIG,MAAM,2BAA2BnC,GAAOoC,WAGpD,MAAMwB,EAAgE,CAAA,EAWtE,OATA5B,EAAOiB,QAAQ3C,IACb,MAAMuD,EAAO,IAAIpC,KAAKnB,EAAMkB,YAAYE,cAAcoC,MAAM,KAAK,GAC5DF,EAAUC,KACbD,EAAUC,GAAQ,CAAEyC,QAAS,EAAGC,MAAO,IAEzC3C,EAAUC,GAAMyC,SAAW,EAC3B1C,EAAUC,GAAM0C,OAASjG,EAAMS,iBAG1BqC,OAAOC,QAAQO,GACnBN,IAAI,EAAEO,EAAM9B,MAAI,CAAS8B,UAAS9B,KAClCyB,KAAK,CAACC,EAAGC,IAAMD,EAAEI,KAAKG,cAAcN,EAAEG,MAC3C,OAAS7D,GAEP,MAAO,EACT,CACF,CAGA,mBAAe8B,CAAaF,GAC1B,MAAMmD,MAAUtD,KAChB,OAAQG,GACN,IAAK,MACH,OAAO,IAAIH,KAAKsD,EAAIyB,UAAY,OAAqB9E,cACvD,IAAK,OACH,OAAO,IAAID,KAAKsD,EAAIyB,UAAY,QAAyB9E,cAC3D,IAAK,QAIL,QACE,OAAO,IAAID,KAAKsD,EAAIyB,UAAY,QAA0B9E,cAH5D,IAAK,OACH,OAAO,IAAID,KAAKsD,EAAIyB,UAAY,SAA2B9E,cAIjE,CAEA,sBAAeuD,CAAgBrD,GAC7B,MAAMmD,MAAUtD,KAChB,OAAQG,GACN,IAAK,QACH,OAAOmD,EAAIrD,cAAcoC,MAAM,KAAK,GACtC,IAAK,SAEH,MAAO,GADW,IAAIrC,KAAKsD,EAAIyB,UAAY,QACvB9E,cAAcoC,MAAM,KAAK,SAASiB,EAAIrD,cAAcoC,MAAM,KAAK,KACrF,IAAK,UACH,OAAOiB,EAAI0B,mBAAmB,QAAS,CAAEC,KAAM,UAAWC,MAAO,SACnE,QACE,MAAO,gBAEb,CAEA,8BAAejC,CAAwBF,GACrC,MAAMC,EAA4B,GAUlC,GARID,EAAUe,YAAc,IAC1Bd,EAAgBmC,KAAK,+DAGnBpC,EAAUzB,kBAAoB,KAChC0B,EAAgBmC,KAAK,mFAGnBpC,EAAUrB,mBAAmBb,OAAS,EAAG,CAC3C,MAAMuE,EAAWrC,EAAUrB,mBAAmB,GAC9CsB,EAAgBmC,KAAK,2BAA2BC,EAAS3D,8BAC3D,CAMA,OAJIsB,EAAUL,cAAc2C,KAAKrE,GAAKA,EAAEc,MAAiC,GAAzBiB,EAAUnC,eACxDoC,EAAgBmC,KAAK,2EAGhBnC,CACT,CAEA,uBAAeG,CAAiBJ,GAC9B,MAAMG,EAAqB,GAQ3B,GANAA,EAASiC,KAAK,yBAAyBpC,EAAU7B,+BAA+B6B,EAAUnC,2BAEtFmC,EAAUrB,mBAAmBb,OAAS,GACxCqC,EAASiC,KAAK,uBAAuBpC,EAAUrB,mBAAmB,GAAGD,UAAUsB,EAAUrB,mBAAmB,GAAGI,gBAG7GiB,EAAUN,gBAAgB5B,OAAS,EAAG,CACxC,MAAMyE,EAAYvC,EAAUN,gBAAgBV,KAAK,CAACC,EAAGC,IAAMA,EAAEH,MAAQE,EAAEF,OAAO,GAC9EoB,EAASiC,KAAK,qBAAqBG,EAAUlG,WAAWkG,EAAUxD,eACpE,CAEA,MAAMgC,EAAef,EAAUjC,kBAAoBiC,EAAUnC,aAAgB,IAG7E,OAFAsC,EAASiC,KAAK,wBAAwBrB,EAAYyB,QAAQ,OAEnDrC,CACT,CAEA,wBAAeL,GACb,MAAO,CACLjC,aAAc,EACdE,kBAAmB,EACnBG,cAAe,EACfC,mBAAoB,EACpBG,kBAAmB,EACnBC,kBAAmB,EACnBI,mBAAoB,GACpBY,aAAc,GACdG,gBAAiB,GACjBC,cAAe,GAEnB,CAEA,uBAAqBgB,CAAWN,GAC9B,IACE,MAAM7E,MAAEA,SAAgBE,EACrBK,KAAKC,KAAKyG,eACVvG,OAAO,CACNwG,UAAWrC,EAAOC,GAClBqC,YAAatC,EAAOG,WACpBpD,OAAQiD,EAAOjD,OACfwF,aAAcvC,EAAOK,YACrBmC,eAAgBxC,EAAOL,UACvBC,gBAAiBI,EAAOJ,gBACxBE,SAAUE,EAAOF,UAMvB,OAAS3E,GAET,CACF,EClXK,MAAMsH,EACXxH,mBAAsC,cACtCA,sBAAyC,OACzCA,sBAAyC,IAGzC,iCAAayH,GACX,IACE,MAAMvH,MAAEA,SAAgBE,EAASC,IAAI,2BAIvC,OAASH,GAET,CACF,CAGA,gCAAawH,CACXC,EACAC,EAAoC,IAEpC,IAEE,MAAMC,QAAenH,KAAKoH,eAAeH,EAAaC,GACtD,GAAIC,EACF,OAAOA,EAAOE,cAIhB,MAAMC,QAAqBtH,KAAKuH,qBAAqBN,EAAaC,GAKlE,aAFMlH,KAAKwH,WAAWP,EAAaK,EAAcJ,GAE1CI,CACT,OAAS9H,GAEP,OAAOyH,CACT,CACF,CAGA,iCAAqBM,CACnBN,EACAC,GAKA,MAAMO,EAAS,IAAIC,gBAUnB,OARIR,EAAQS,OAAOF,EAAOG,OAAO,IAAKV,EAAQS,MAAMlC,YAChDyB,EAAQW,QAAQJ,EAAOG,OAAO,IAAKV,EAAQW,OAAOpC,YAClDyB,EAAQY,SAASL,EAAOG,OAAO,IAAKV,EAAQY,QAAQrC,YACpDyB,EAAQa,QAAQN,EAAOG,OAAO,IAAKV,EAAQa,QAC3Cb,EAAQc,MAAMP,EAAOG,OAAO,OAAQV,EAAQc,KAAKvC,YAI9C,GAAGwB,KAAeQ,EAAOhC,YAClC,CAGA,2BAAqB2B,CACnBH,EACAC,GAEA,IACE,MAAMe,EAAWjI,KAAKkI,iBAAiBjB,EAAaC,IAE9C3F,KAAEA,EAAA/B,MAAMA,SAAgBE,EAC3BK,KAAKC,KAAKmI,aACV1G,OAAO,KACP2G,GAAG,YAAaH,GAChBI,GAAG,cAAA,IAAkBpH,MAAOC,eAC5BoH,SAEH,OAAI9I,IAAU+B,EACL,KAGFA,CACT,OAAS/B,GAEP,OAAO,IACT,CACF,CAGA,uBAAqBgI,CACnBP,EACAK,EACAJ,GAEA,IACE,MAAMe,EAAWjI,KAAKkI,iBAAiBjB,EAAaC,GAC9CqB,EAAY,IAAItH,KAAKA,KAAKsD,MAAQvE,KAAKwI,iBAEvChJ,MAAEA,SAAgBE,EACrBK,KAAKC,KAAKmI,aACVjI,OAAO,CACNuI,UAAWR,EACXS,aAAczB,EACdI,cAAeC,EACfK,MAAOT,EAAQS,OAAS,EACxBE,OAAQX,EAAQW,QAAU,EAC1BE,OAAQb,EAAQa,QAAU,OAC1BY,WAAY,EACZC,WAAYL,EAAUrH,cACtBF,YAAA,IAAgBC,MAAOC,sBAQrBlB,KAAK6I,cACb,OAASrJ,GAET,CACF,CAGA,uBAAe0I,CACbjB,EACAC,GAEA,MAAM4B,EAAaC,KAAKC,UAAU9B,GAClC,OAAO+B,KAAK,GAAGhC,KAAe6B,IAChC,CAGA,yBAAqBD,GACnB,UAEQnJ,EACHK,KAAKC,KAAKmI,aACVe,SACAC,GAAG,cAAA,IAAkBlI,MAAOC,eAG/B,MAAQK,KAAM6H,SAAqB1J,EAChCK,KAAKC,KAAKmI,aACV1G,OAAO,kBACPmE,MAAM,aAAc,CAAEC,WAAW,IAEpC,GAAIuD,GAAcA,EAAWtH,OAAS9B,KAAKqJ,eAAgB,CACzD,MACMC,EADkBF,EAAWjG,MAAMnD,KAAKqJ,gBACVvG,IAAIyG,GAASA,EAAMjF,UAEjD5E,EACHK,KAAKC,KAAKmI,aACVe,SACAM,GAAG,KAAMF,EACd,CACF,OAAS9J,GAET,CACF,CAGA,0BAAaiK,CAAcC,GACzB,MAAMC,EAAWD,EAAK5G,IAAI8G,GACjB,IAAIC,QAAeC,IACxB,MAAMC,EAAM,IAAIC,MAChBD,EAAIE,OAAS,IAAMH,IACnBC,EAAIG,QAAU,IAAMJ,IACpBC,EAAII,IAAMP,WAIRC,QAAQO,IAAIT,EACpB,CAGA,+BAAaU,CAAmBT,GAC9B,IACE,OAAO,IAAIC,QAASC,IAClB,MAAMC,EAAM,IAAIC,MAChBD,EAAIE,OAAS,KACXH,EAAQ,CAAEnC,MAAOoC,EAAIO,aAAczC,OAAQkC,EAAIQ,iBAEjDR,EAAIG,QAAU,IAAMJ,EAAQ,MAC5BC,EAAII,IAAMP,GAEd,OAASpK,GAEP,OAAO,IACT,CACF,CAGA,6BAAOgL,CAAuBC,GAO5B,MAAO,CACLC,UAAW1K,KAAKuH,qBAAqBkD,EAAS,CAAE9C,MAAO,IAAKE,OAAQ,IAAKC,QAAS,KAAM6C,QAAYf,GACpGgB,MAAO5K,KAAKuH,qBAAqBkD,EAAS,CAAE9C,MAAO,IAAKE,OAAQ,IAAKC,QAAS,KAAM6C,QAAYf,GAChGiB,OAAQ7K,KAAKuH,qBAAqBkD,EAAS,CAAE9C,MAAO,IAAKE,OAAQ,IAAKC,QAAS,KAAM6C,QAAYf,GACjGkB,MAAO9K,KAAKuH,qBAAqBkD,EAAS,CAAE9C,MAAO,KAAME,OAAQ,KAAMC,QAAS,KAAM6C,QAAYf,GAClGmB,SAAUN,EAEd,CAGA,gCAAaO,CACXC,GAEA,IACE,MAAMtB,EAAWsB,EAAOnI,IAAI,EAAG8G,MAAK1C,aAClClH,KAAKgH,oBAAoB4C,EAAK1C,IAGhC,aAAa2C,QAAQO,IAAIT,EAC3B,OAASnK,GAEP,OAAOyL,EAAOnI,IAAI,EAAG8G,SAAUA,EACjC,CACF,CAGA,0BAAasB,GAMX,IACE,MAAM3J,KAAEA,EAAA/B,MAAMA,SAAgBE,EAC3BK,KAAKC,KAAKmI,aACV1G,OAAO,0BACPmE,MAAM,aAAc,CAAEC,WAAW,IAEpC,GAAIrG,IAAU+B,EACZ,MAAO,CAAE4J,YAAa,EAAGC,UAAW,EAAGC,YAAa,KAAMC,YAAa,MAGzE,MAAMF,EAAY7J,EAAKa,OAAO,CAACC,EAAKkH,IAAUlH,GAAOkH,EAAMZ,YAAc,GAAI,GACvE0C,EAAc9J,EAAKO,OAAS,EAAIP,EAAKA,EAAKO,OAAS,GAAGd,WAAa,KACnEsK,EAAc/J,EAAKO,OAAS,EAAIP,EAAK,GAAGP,WAAa,KAE3D,MAAO,CACLmK,YAAa5J,EAAKO,OAClBsJ,YACAC,cACAC,cAEJ,OAAS9L,GAEP,MAAO,CAAE2L,YAAa,EAAGC,UAAW,EAAGC,YAAa,KAAMC,YAAa,KACzE,CACF,CAGA,uBAAaC,GACX,UACQ7L,EACHK,KAAKC,KAAKmI,aACVe,SACAsC,IAAI,KAAM,uCACf,OAAShM,GAET,CACF,ECvQK,MAAMiM,EAAqC,KAChD,MAAOzH,EAAW0H,GAAgBC,EAAAA,SAA+B,OAC1DC,EAAaC,GAAkBF,EAAAA,SAAoC,OACnEG,EAAQC,GAAaJ,EAAAA,SAAkE,KACvFK,EAASC,GAAcN,EAAAA,UAAS,IAChCO,EAAgBC,GAAqBR,EAAAA,SAA4C,UACjFS,EAAYC,GAAiBV,EAAAA,SAAc,MAElDW,EAAAA,UAAU,KACRC,KACC,CAACL,IAEJ,MAAMK,EAAgBC,UACpB,IACEP,GAAW,GACX,MAAOQ,EAAeC,EAAiBC,EAAYC,SAAmB/C,QAAQO,IAAI,CAChF/K,EAAuB8B,aAAa+K,GACpC7M,EAAuBuF,wBACvBvF,EAAuBqG,gBAAgB,IACvCoB,EAAyBoE,kBAG3BQ,EAAae,GACbZ,EAAea,GACfX,EAAUY,GACVN,EAAcO,EAChB,OAASpN,GAET,CAAA,QACEyM,GAAW,EACb,GAyBF,OAAID,EAEAa,MAAC,OAAIC,UAAU,wCACbC,eAACC,EAAA,CAAeC,KAAK,SAMzBC,EAAAA,KAAC,MAAA,CAAIJ,UAAU,YAEbC,SAAA,CAAAG,EAAAA,KAAC,MAAA,CAAIJ,UAAU,oCACbC,SAAA,CAAAG,OAAC,MAAA,CACCH,SAAA,CAAAF,EAAAA,IAAC,KAAA,CAAGC,UAAU,mCAAmCC,SAAA,kCACjDF,EAAAA,IAAC,IAAA,CAAEC,UAAU,gBAAgBC,SAAA,4DAE/BG,EAAAA,KAAC,MAAA,CAAIJ,UAAU,aACbC,SAAA,CAAAG,EAAAA,KAAC,SAAA,CACCC,MAAOjB,EACPkB,SAAWnL,GAAMkK,EAAkBlK,EAAEoL,OAAOF,OAC5CL,UAAU,kGAEVC,SAAA,CAAAF,EAAAA,IAAC,SAAA,CAAOM,MAAM,MAAMJ,SAAA,kBACpBF,EAAAA,IAAC,SAAA,CAAOM,MAAM,OAAOJ,SAAA,gBACrBF,EAAAA,IAAC,SAAA,CAAOM,MAAM,QAAQJ,SAAA,iBACtBF,EAAAA,IAAC,SAAA,CAAOM,MAAM,OAAOJ,SAAA,uBAEtBO,EAAA,CAAOC,QAjDOf,UACrB,UACuBnN,EAAuB0E,eAAe,WAE3DyJ,MAAM,4DACR,OAAShO,GAEPgO,MAAM,4BACR,GAyCuCC,QAAQ,YAAYV,SAAA,6BAOzDG,EAAAA,KAAC,MAAA,CAAIJ,UAAU,uDACbC,SAAA,CAAAF,EAAAA,IAACa,GAAKZ,UAAU,MACdC,SAAAG,EAAAA,KAAC,MAAA,CAAIJ,UAAU,oBACbC,SAAA,CAAAF,EAAAA,IAAC,MAAA,CAAIC,UAAU,oEACbC,SAAAF,EAAAA,IAAC,QAAKC,UAAU,wBAAwBC,kBAE1CG,EAAAA,KAAC,MAAA,CAAIJ,UAAU,OACbC,SAAA,CAAAF,EAAAA,IAAC,IAAA,CAAEC,UAAU,oCAAoCC,SAAA,wBAChD,IAAA,CAAED,UAAU,mCAAoCC,SAAA/I,GAAWnC,cAAgB,kBAKjF6L,EAAA,CAAKZ,UAAU,MACdC,SAAAG,EAAAA,KAAC,MAAA,CAAIJ,UAAU,oBACbC,SAAA,CAAAF,EAAAA,IAAC,MAAA,CAAIC,UAAU,qEACbC,SAAAF,EAAAA,IAAC,QAAKC,UAAU,yBAAyBC,iBAE3CG,EAAAA,KAAC,MAAA,CAAIJ,UAAU,OACbC,SAAA,CAAAF,EAAAA,IAAC,IAAA,CAAEC,UAAU,oCAAoCC,SAAA,yBAChD,IAAA,CAAED,UAAU,mCAAoCC,SAAA/I,GAAW7B,oBAAsB,kBAKvFuL,EAAA,CAAKZ,UAAU,MACdC,SAAAG,EAAAA,KAAC,MAAA,CAAIJ,UAAU,oBACbC,SAAA,CAAAF,EAAAA,IAAC,MAAA,CAAIC,UAAU,sEACbC,SAAAF,EAAAA,IAAC,QAAKC,UAAU,0BAA0BC,kBAE5CG,EAAAA,KAAC,MAAA,CAAIJ,UAAU,OACbC,SAAA,CAAAF,EAAAA,IAAC,IAAA,CAAEC,UAAU,oCAAoCC,SAAA,iBACjDF,EAAAA,IAAC,IAAA,CAAEC,UAAU,mCACVC,SAAAnB,GAAa7G,YAAc,GAAG6G,EAAY7G,YAAYyB,QAAQ,MAAQ,qBAM9EkH,EAAA,CAAKZ,UAAU,MACdC,SAAAG,EAAAA,KAAC,MAAA,CAAIJ,UAAU,oBACbC,SAAA,CAAAF,EAAAA,IAAC,MAAA,CAAIC,UAAU,sEACbC,SAAAF,EAAAA,IAAC,QAAKC,UAAU,0BAA0BC,iBAE5CG,EAAAA,KAAC,MAAA,CAAIJ,UAAU,OACbC,SAAA,CAAAF,EAAAA,IAAC,IAAA,CAAEC,UAAU,oCAAoCC,SAAA,oBACjDF,EAAAA,IAAC,IAAA,CAAEC,UAAU,mCACVC,YAAaxK,kBAAoB,IAAIqJ,EAAYrJ,kBAAoB,KAAMiE,QAAQ,MAAQ,kBAQtG0G,EAAAA,KAAC,MAAA,CAAIJ,UAAU,wCAEbC,SAAA,CAAAG,EAAAA,KAACQ,EAAA,CAAKZ,UAAU,MACdC,SAAA,CAAAF,EAAAA,IAAC,KAAA,CAAGC,UAAU,6BAA6BC,SAAA,2BAC1C,MAAA,CAAID,UAAU,YACZC,SAAAjB,EAAO3I,MAAM,EAAG,GAAGL,IAAI,CAAC6K,EAAOC,IAC9BV,EAAAA,KAAC,MAAA,CAAgBJ,UAAU,oCACzBC,SAAA,CAAAF,EAAAA,IAAC,OAAA,CAAKC,UAAU,wBAAyBC,SAAAY,EAAMtK,OAC/C6J,EAAAA,KAAC,MAAA,CAAIJ,UAAU,qBACbC,SAAA,CAAAG,EAAAA,KAAC,OAAA,CAAKJ,UAAU,gBAAiBC,SAAA,CAAAY,EAAM7H,QAAQ,cAC/CoH,EAAAA,KAAC,OAAA,CAAKJ,UAAU,iBAAkBC,SAAA,CAAAY,EAAM5H,MAAM,iBAJxC6H,SAYhBV,EAAAA,KAACQ,EAAA,CAAKZ,UAAU,MACdC,SAAA,CAAAF,EAAAA,IAAC,KAAA,CAAGC,UAAU,6BAA6BC,SAAA,wBAC3CF,EAAAA,IAAC,MAAA,CAAIC,UAAU,YACZC,SAAA/I,GAAWN,gBAAgBZ,IAAI,CAACzC,EAAQuN,IACvCV,OAAC,MAAA,CAAgBJ,UAAU,oCACzBC,SAAA,CAAAF,EAAAA,IAAC,OAAA,CAAKC,UAAU,iCAAkCC,SAAA1M,EAAOA,SACzD6M,EAAAA,KAAC,MAAA,CAAIJ,UAAU,0BACbC,SAAA,CAAAF,EAAAA,IAAC,MAAA,CAAIC,UAAU,oCACbC,SAAAF,EAAAA,IAAC,MAAA,CACCC,UAAU,+BACVe,MAAO,CACLlG,MAAWtH,EAAO0C,OAASiB,GAAW7B,oBAAsB,GAAM,IAA3D,SAIb0K,EAAAA,IAAC,OAAA,CAAKC,UAAU,wBAAyBC,WAAOhK,aAX1C6K,SAmBhBV,EAAAA,KAACQ,EAAA,CAAKZ,UAAU,MACdC,SAAA,CAAAF,EAAAA,IAAC,KAAA,CAAGC,UAAU,6BAA6BC,SAAA,mCAC1C,MAAA,CAAID,UAAU,YACZC,SAAA/I,GAAWrB,mBAAmBQ,MAAM,EAAG,GAAGL,IAAI,CAACJ,EAAOkL,IACrDV,EAAAA,KAAC,MAAA,CAAgBJ,UAAU,oCACzBC,SAAA,CAAAF,EAAAA,IAAC,OAAA,CAAKC,UAAU,sBAAuBC,SAAArK,EAAMA,QAC7CwK,EAAAA,KAAC,MAAA,CAAIJ,UAAU,0BACbC,SAAA,CAAAF,EAAAA,IAAC,MAAA,CAAIC,UAAU,oCACbC,SAAAF,EAAAA,IAAC,MAAA,CACCC,UAAU,gCACVe,MAAO,CACLlG,MAAWjF,EAAMK,OAASiB,GAAWrB,mBAAmB,IAAII,OAAS,GAAM,IAApE,SAIb8J,EAAAA,IAAC,OAAA,CAAKC,UAAU,wBAAyBC,WAAMhK,aAXzC6K,SAmBhBV,EAAAA,KAACQ,EAAA,CAAKZ,UAAU,MACdC,SAAA,CAAAF,EAAAA,IAAC,KAAA,CAAGC,UAAU,6BAA6BC,SAAA,0BAC3CG,EAAAA,KAAC,MAAA,CAAIJ,UAAU,YACbC,SAAA,CAAAG,EAAAA,KAAC,MAAA,CAAIJ,UAAU,uBACbC,SAAA,CAAAF,EAAAA,IAAC,OAAA,CAAKC,UAAU,wBAAwBC,SAAA,qBACxCG,EAAAA,KAAC,OAAA,CAAKJ,UAAU,sBAAuBC,SAAA,CAAAnB,GAAaxG,gBAAkB,EAAE,YAE1E8H,EAAAA,KAAC,MAAA,CAAIJ,UAAU,uBACbC,SAAA,CAAAF,EAAAA,IAAC,OAAA,CAAKC,UAAU,wBAAwBC,SAAA,gCACvC,OAAA,CAAKD,UAAU,iCAAkCC,SAAAnB,GAAarG,qBAAuB,WAExF2H,EAAAA,KAAC,MAAA,CAAIJ,UAAU,uBACbC,SAAA,CAAAF,EAAAA,IAAC,OAAA,CAAKC,UAAU,wBAAwBC,SAAA,eACxCF,EAAAA,IAAC,OAAA,CAAKC,UAAU,mCACbC,SAAAnB,GAAa5G,UAAY,GAAG4G,EAAY5G,UAAUwB,QAAQ,MAAQ,mBAQ7E0G,EAAAA,KAACQ,EAAA,CAAKZ,UAAU,MACdC,SAAA,CAAAG,EAAAA,KAAC,MAAA,CAAIJ,UAAU,yCACbC,SAAA,CAAAF,EAAAA,IAAC,KAAA,CAAGC,UAAU,wBAAwBC,SAAA,+BACtCF,EAAAA,IAACS,GAAOC,QA7LGf,UACjB,UACQ1F,EAAyByE,aAC/BiC,MAAM,qCACNjB,GACF,OAAS/M,GAEPgO,MAAM,wBACR,GAqLmCC,QAAQ,YAAYR,KAAK,KAAKF,SAAA,uBAI7DG,EAAAA,KAAC,MAAA,CAAIJ,UAAU,wCACbC,SAAA,CAAAG,EAAAA,KAAC,MAAA,CAAIJ,UAAU,cACbC,SAAA,CAAAF,MAAC,IAAA,CAAEC,UAAU,mCAAoCC,SAAAX,GAAYjB,aAAe,IAC5E0B,EAAAA,IAAC,IAAA,CAAEC,UAAU,wBAAwBC,SAAA,qBAEvCG,EAAAA,KAAC,MAAA,CAAIJ,UAAU,cACbC,SAAA,CAAAF,MAAC,IAAA,CAAEC,UAAU,oCACVC,SAAAX,GAAYhB,UAAY,IAAIgB,EAAWhB,UAAY,KAAO,MAAM5E,QAAQ,QAAU,SAErFqG,EAAAA,IAAC,IAAA,CAAEC,UAAU,wBAAwBC,SAAA,kBAEvCG,EAAAA,KAAC,MAAA,CAAIJ,UAAU,cACbC,SAAA,CAAAF,EAAAA,IAAC,IAAA,CAAEC,UAAU,qCACVC,SAAAX,GAAYf,YAAc,IAAIpK,KAAKmL,EAAWf,aAAapF,qBAAuB,QAErF4G,EAAAA,IAAC,IAAA,CAAEC,UAAU,wBAAwBC,SAAA,oBAEvCG,EAAAA,KAAC,MAAA,CAAIJ,UAAU,cACbC,SAAA,CAAAF,EAAAA,IAAC,IAAA,CAAEC,UAAU,qCACVC,SAAAX,GAAYd,YAAc,IAAIrK,KAAKmL,EAAWd,aAAarF,qBAAuB,QAErF4G,EAAAA,IAAC,IAAA,CAAEC,UAAU,wBAAwBC,SAAA,0BAM1C/I,GAAWL,eAAiBK,EAAUL,cAAc7B,OAAS,GAC5DoL,EAAAA,KAACQ,EAAA,CAAKZ,UAAU,MACdC,SAAA,CAAAF,EAAAA,IAAC,KAAA,CAAGC,UAAU,6BAA6BC,SAAA,qBAC3CF,EAAAA,IAAC,MAAA,CAAIC,UAAU,YACZC,SAAA/I,EAAUL,cAAcb,IAAI,CAACtD,EAAOoO,IACnCV,OAAC,MAAA,CAAgBJ,UAAU,6DACzBC,SAAA,CAAAF,EAAAA,IAAC,OAAA,CAAKC,UAAU,mCAAoCC,SAAAvN,EAAMA,QAC1D0N,EAAAA,KAAC,OAAA,CAAKJ,UAAU,uBAAwBC,SAAA,CAAAvN,EAAMuD,MAAM,oBAF5C6K,SAUlBV,EAAAA,KAACQ,EAAA,CAAKZ,UAAU,MACdC,SAAA,CAAAF,EAAAA,IAAC,KAAA,CAAGC,UAAU,6BAA6BC,SAAA,uBAC3CG,EAAAA,KAAC,MAAA,CAAIJ,UAAU,YACZC,SAAA,CAAAnB,GAAa7G,aAAe6G,EAAY7G,YAAc,IACrD8H,MAAC,MAAA,CAAIC,UAAU,uDACbC,SAAAF,EAAAA,IAAC,IAAA,CAAEC,UAAU,0BAA0BC,0GAM1CnB,GAAarJ,mBAAqBqJ,EAAYrJ,kBAAoB,KACjEsK,MAAC,MAAA,CAAIC,UAAU,mDACbC,SAAAF,EAAAA,IAAC,IAAA,CAAEC,UAAU,wBAAwBC,iGAMxC/I,GAAWrB,oBAAsBqB,EAAUrB,mBAAmBb,OAAS,GACtE+K,EAAAA,IAAC,MAAA,CAAIC,UAAU,qDACbC,SAAAG,EAAAA,KAAC,IAAA,CAAEJ,UAAU,yBAAyBC,SAAA,CAAA,8BACR/I,EAAUrB,mBAAmB,GAAGD,MAAM,2CAKxEmK,EAAAA,IAAC,OAAIC,UAAU,uDACbC,eAAC,IAAA,CAAED,UAAU,0BAA0BC,SAAA"}