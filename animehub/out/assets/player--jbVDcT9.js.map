{"version":3,"file":"player--jbVDcT9.js","sources":["../../src/components/player/SmartVideoPlayer.tsx","../../src/components/player/IframePlayer.tsx"],"sourcesContent":["import { useState, useRef, useEffect, useCallback, useMemo } from 'react';\nimport { motion } from 'framer-motion';\nimport { SparkleLoadingSpinner } from '../base/LoadingSpinner';\nimport { VideoService, type VideoSource } from '../../services/videoService';\n\ninterface SmartVideoPlayerProps {\n  sources: VideoSource[];\n  animeId: string;\n  episodeNumber: number;\n  title: string;\n  onTimeUpdate?: (currentTime: number, duration: number) => void;\n  onPlay?: () => void;\n  onPause?: () => void;\n  onEnded?: () => void;\n  onError?: (error: string) => void;\n  autoPlay?: boolean;\n  startTime?: number;\n  className?: string;\n}\n\ninterface PlayerState {\n  currentSource: VideoSource | null;\n  currentTime: number;\n  duration: number;\n  isPlaying: boolean;\n  isLoading: boolean;\n  error: string | null;\n  volume: number;\n  isMuted: boolean;\n  quality: string;\n  retryCount: number;\n  isRetrying: boolean;\n}\n\nexport default function SmartVideoPlayer({\n  sources,\n  animeId,\n  episodeNumber,\n  title,\n  onTimeUpdate,\n  onPlay,\n  onPause,\n  onEnded,\n  onError,\n  autoPlay = false,\n  startTime = 0,\n  className = ''\n}: SmartVideoPlayerProps) {\n  const [playerState, setPlayerState] = useState<PlayerState>({\n    currentSource: null,\n    currentTime: 0,\n    duration: 0,\n    isPlaying: false,\n    isLoading: true,\n    error: null,\n    volume: 1,\n    isMuted: false,\n    quality: '720p',\n    retryCount: 0,\n    isRetrying: false\n  });\n\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const iframeRef = useRef<HTMLIFrameElement>(null);\n\n  // Initialize player with best available source (memoized for performance)\n  const initializePlayer = useCallback(() => {\n    if (sources.length === 0) {\n      setPlayerState(prev => ({ ...prev, error: 'No video sources available', isLoading: false }));\n      return;\n    }\n\n    // Find best quality source or default to first\n    const bestSource = sources.find(s => s.quality === '1080p') || \n                      sources.find(s => s.quality === '720p') || \n                      sources[0];\n\n    setPlayerState(prev => ({\n      ...prev,\n      currentSource: bestSource,\n      quality: bestSource.quality,\n      isLoading: false\n    }));\n  }, [sources]);\n\n  useEffect(() => {\n    initializePlayer();\n  }, [initializePlayer]);\n\n  // Video preloading for next episode\n  const preloadNextEpisode = useCallback(() => {\n    if (sources.length > 1) {\n      const nextSource = sources[1]; // Preload next source\n      const preloadLink = document.createElement('link');\n      preloadLink.rel = 'preload';\n      preloadLink.as = 'video';\n      preloadLink.href = nextSource.url;\n      document.head.appendChild(preloadLink);\n    }\n  }, [sources]);\n\n  // Buffer optimization\n  const optimizeBuffer = useCallback(() => {\n    if (videoRef.current) {\n      const video = videoRef.current;\n      \n      // Set buffer size for better performance\n      if ('webkitAudioDecodedByteCount' in video) {\n        // WebKit specific optimizations\n        (video as any).webkitAudioDecodedByteCount = 0;\n      }\n      \n      // Set preload strategy\n      video.preload = 'metadata';\n      \n      // Optimize for mobile\n      if (navigator.userAgent.includes('Mobile')) {\n        video.playsInline = true;\n        video.controls = true;\n      }\n    }\n  }, []);\n\n  // Throttle utility for adaptive bitrate\n  const throttle = useCallback((func: Function, delay: number) => {\n    let timeoutId: NodeJS.Timeout | null = null;\n    let lastExecTime = 0;\n    \n    return (...args: any[]) => {\n      const currentTime = Date.now();\n      \n      if (currentTime - lastExecTime > delay) {\n        func(...args);\n        lastExecTime = currentTime;\n      } else {\n        if (timeoutId) clearTimeout(timeoutId);\n        timeoutId = setTimeout(() => {\n          func(...args);\n          lastExecTime = Date.now();\n        }, delay - (currentTime - lastExecTime));\n      }\n    };\n  }, []);\n\n  // Throttled adaptive bitrate streaming (max 1 call per 2 seconds)\n  const throttledAdaptiveBitrate = useCallback(() => {\n    if (videoRef.current && sources.length > 1) {\n      const video = videoRef.current;\n      const currentTime = video.currentTime;\n      \n      // Switch quality based on buffer health\n      if (video.buffered.length > 0) {\n        const bufferedEnd = video.buffered.end(video.buffered.length - 1);\n        const bufferAhead = bufferedEnd - currentTime;\n        \n        // If buffer is low, switch to lower quality\n        if (bufferAhead < 10 && playerState.quality !== '480p') {\n          const lowerQualitySource = sources.find(s => s.quality === '480p') || sources[sources.length - 1];\n          if (lowerQualitySource) {\n            setPlayerState(prev => ({\n              ...prev,\n              currentSource: lowerQualitySource,\n              quality: lowerQualitySource.quality\n            }));\n          }\n        }\n        // If buffer is healthy, switch to higher quality\n        else if (bufferAhead > 30 && playerState.quality !== '1080p') {\n          const higherQualitySource = sources.find(s => s.quality === '1080p') || sources[0];\n          if (higherQualitySource) {\n            setPlayerState(prev => ({\n              ...prev,\n              currentSource: higherQualitySource,\n              quality: higherQualitySource.quality\n            }));\n          }\n        }\n      }\n    }\n  }, [sources, playerState.quality]);\n\n  // Create throttled version (max 1 call per 2 seconds)\n  const throttledHandleAdaptiveBitrate = useMemo(() => \n    throttle(throttledAdaptiveBitrate, 2000), \n    [throttle, throttledAdaptiveBitrate]\n  );\n\n  // Handle YouTube iframe API\n  const handleYouTubeReady = useCallback(() => {\n    if (!iframeRef.current) return;\n\n    // YouTube iframe API would be initialized here\n    // For now, we'll handle basic iframe events\n    console.log('YouTube player ready');\n  }, []);\n\n  // Handle video time updates\n  const handleTimeUpdate = useCallback(() => {\n    if (videoRef.current) {\n      const currentTime = videoRef.current.currentTime;\n      const duration = videoRef.current.duration;\n      \n      setPlayerState(prev => ({ ...prev, currentTime, duration }));\n      onTimeUpdate?.(currentTime, duration);\n    }\n  }, [onTimeUpdate]);\n\n  // Handle play/pause\n  const handlePlay = useCallback(() => {\n    setPlayerState(prev => ({ ...prev, isPlaying: true }));\n    onPlay?.();\n  }, [onPlay]);\n\n  const handlePause = useCallback(() => {\n    setPlayerState(prev => ({ ...prev, isPlaying: false }));\n    onPause?.();\n  }, [onPause]);\n\n  // Handle video end\n  const handleEnded = useCallback(() => {\n    setPlayerState(prev => ({ ...prev, isPlaying: false }));\n    onEnded?.();\n  }, [onEnded]);\n\n  // Handle errors with retry mechanism\n  const handleError = useCallback((error: string) => {\n    const maxRetries = 3;\n    const retryDelay = 2000; // 2 seconds\n    \n    setPlayerState(prev => {\n      if (prev.retryCount < maxRetries) {\n        // Retry after delay\n        setTimeout(() => {\n          setPlayerState(current => ({\n            ...current,\n            isRetrying: true,\n            error: null,\n            isLoading: true,\n            retryCount: current.retryCount + 1\n          }));\n          \n          // Force reload the video\n          if (videoRef.current) {\n            videoRef.current.load();\n          }\n        }, retryDelay);\n        \n        return {\n          ...prev,\n          error: `Retrying... (${prev.retryCount + 1}/${maxRetries})`,\n          isLoading: false,\n          isRetrying: true\n        };\n      } else {\n        // Max retries reached\n        return {\n          ...prev,\n          error: `Failed after ${maxRetries} attempts: ${error}`,\n          isLoading: false,\n          isRetrying: false\n        };\n      }\n    });\n    \n    onError?.(error);\n  }, [onError]);\n\n  // Change quality\n  const changeQuality = useCallback((quality: string) => {\n    const newSource = sources.find(s => s.quality === quality);\n    if (newSource) {\n      setPlayerState(prev => ({\n        ...prev,\n        currentSource: newSource,\n        quality,\n        isLoading: true\n      }));\n    }\n  }, [sources]);\n\n  // Get available qualities\n  const availableQualities = sources.map(s => s.quality).filter((quality, index, self) => \n    self.indexOf(quality) === index\n  );\n\n  // Render YouTube iframe\n  const renderYouTubePlayer = (source: VideoSource) => {\n    const embedUrl = VideoService.getYouTubeEmbedUrl(source.url, {\n      autoplay: autoPlay,\n      start: startTime,\n      quality: source.quality,\n    });\n\n    return (\n      <iframe\n        ref={iframeRef}\n        src={embedUrl}\n        title={title}\n        className=\"w-full h-full\"\n        allow=\"autoplay; encrypted-media; picture-in-picture; fullscreen\"\n        onLoad={handleYouTubeReady}\n      />\n    );\n  };\n\n  // Render iframe for streaming sites (anikai.to, etc.)\n  const renderIframePlayer = (source: VideoSource) => {\n    // Check if this is a streaming site page that can't be embedded\n    // But allow HiAnime.do to be embedded directly\n    if (VideoService.isStreamingSitePage(source.url) && !source.url.toLowerCase().includes('hianime.do')) {\n      return renderExternalLinkFallback(source);\n    }\n\n    const embedUrl = VideoService.getIframeEmbedUrl(source.url, {\n      autoplay: autoPlay,\n      start: startTime,\n      quality: source.quality,\n    });\n\n    return (\n      <iframe\n        ref={iframeRef}\n        src={embedUrl}\n        title={title}\n        className=\"w-full h-full\"\n        allow=\"autoplay; encrypted-media; picture-in-picture; fullscreen\"\n        sandbox=\"allow-same-origin allow-scripts allow-popups allow-forms\"\n        onLoad={() => console.log('Iframe player loaded')}\n        onError={() => handleError('Failed to load video player')}\n      />\n    );\n  };\n\n  // Render external link fallback for streaming sites\n  const renderExternalLinkFallback = (source: VideoSource) => (\n    <div className=\"w-full h-full bg-gradient-to-br from-blue-900 to-black flex items-center justify-center\">\n      <motion.div\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        className=\"text-center text-white max-w-md mx-auto px-4\"\n      >\n        <div className=\"w-16 h-16 bg-blue-500/20 rounded-full flex items-center justify-center mx-auto mb-4\">\n          <i className=\"ri-external-link-line text-3xl text-blue-400\"></i>\n        </div>\n        <h3 className=\"text-xl font-bold mb-2\">External Video Source</h3>\n        <p className=\"text-gray-400 mb-4\">\n          This video is hosted on an external streaming site. Click the button below to watch it in a new tab.\n        </p>\n        \n        <div className=\"bg-gray-800/50 rounded-lg p-3 mb-4\">\n          <p className=\"text-sm text-gray-300 break-all\">{source.url}</p>\n        </div>\n        \n        <div className=\"flex gap-2 justify-center\">\n          <a\n            href={source.url}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            className=\"px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors flex items-center gap-2\"\n          >\n            <i className=\"ri-external-link-line\"></i>\n            Watch on External Site\n          </a>\n          {sources.length > 1 && (\n            <button\n              onClick={() => {\n                // Try next available source\n                const currentIndex = sources.findIndex(s => s.url === source.url);\n                const nextSource = sources[currentIndex + 1] || sources[0];\n                setPlayerState(prev => ({\n                  ...prev,\n                  currentSource: nextSource,\n                  error: null,\n                  isLoading: true\n                }));\n              }}\n              className=\"px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700 transition-colors\"\n            >\n              Try Different Source\n            </button>\n          )}\n        </div>\n      </motion.div>\n    </div>\n  );\n\n  // Render HLS video player\n  const renderHLSPlayer = (source: VideoSource) => {\n    const processedSource = VideoService.processVideoSource(source, animeId, episodeNumber, {\n      autoplay: autoPlay,\n      start: startTime,\n      quality: source.quality,\n    });\n\n    return (\n      <video\n        ref={videoRef}\n        className=\"w-full h-full\"\n        controls\n        autoPlay={autoPlay}\n        crossOrigin=\"anonymous\"\n        onTimeUpdate={handleTimeUpdate}\n        onPlay={handlePlay}\n        onPause={handlePause}\n        onEnded={handleEnded}\n        onError={(e) => {\n          const target = e.target as HTMLVideoElement;\n          const error = target.error;\n          let errorMessage = 'HLS stream failed to load';\n          \n          if (error) {\n            switch (error.code) {\n              case 1: errorMessage = 'Video loading aborted'; break;\n              case 2: errorMessage = 'Network error - check your connection'; break;\n              case 3: errorMessage = 'Video decoding error'; break;\n              case 4: errorMessage = 'Video source not supported'; break;\n            }\n          }\n          \n          handleError(errorMessage);\n        }}\n        onLoadStart={() => {\n          setPlayerState(prev => ({ ...prev, isLoading: true }));\n          optimizeBuffer();\n        }}\n        onLoadedData={() => {\n          setPlayerState(prev => ({ ...prev, isLoading: false }));\n          preloadNextEpisode();\n        }}\n        onProgress={() => throttledHandleAdaptiveBitrate()}\n        onWaiting={() => {\n          // Video is buffering, optimize quality\n          throttledHandleAdaptiveBitrate();\n        }}\n      >\n        <source src={processedSource.url} type=\"application/x-mpegURL\" />\n        Your browser does not support HLS streaming.\n      </video>\n    );\n  };\n\n  // Render direct video player\n  const renderDirectVideoPlayer = (source: VideoSource) => {\n    const processedSource = VideoService.processVideoSource(source, animeId, episodeNumber, {\n      autoplay: autoPlay,\n      start: startTime,\n      quality: source.quality,\n    });\n\n    return (\n      <video\n        ref={videoRef}\n        src={processedSource.url}\n        className=\"w-full h-full\"\n        controls\n        autoPlay={autoPlay}\n        crossOrigin=\"anonymous\"\n        onTimeUpdate={handleTimeUpdate}\n        onPlay={handlePlay}\n        onPause={handlePause}\n        onEnded={handleEnded}\n        onError={(e) => {\n          const target = e.target as HTMLVideoElement;\n          const error = target.error;\n          let errorMessage = 'Video playback failed';\n          \n          if (error) {\n            switch (error.code) {\n              case 1: errorMessage = 'Video loading aborted'; break;\n              case 2: errorMessage = 'Network error - check your connection'; break;\n              case 3: errorMessage = 'Video decoding error'; break;\n              case 4: errorMessage = 'Video source not supported'; break;\n            }\n          }\n          \n          handleError(errorMessage);\n        }}\n        onLoadStart={() => setPlayerState(prev => ({ ...prev, isLoading: true }))}\n        onLoadedData={() => setPlayerState(prev => ({ ...prev, isLoading: false }))}\n      >\n        Your browser does not support the video tag.\n      </video>\n    );\n  };\n\n  // Render loading state\n  const renderLoading = () => (\n    <div className=\"w-full h-full bg-gradient-to-br from-gray-900 to-black flex items-center justify-center\">\n      <motion.div\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        className=\"text-center text-white\"\n      >\n        <SparkleLoadingSpinner size=\"xl\" text=\"Loading Player...\" />\n        <p className=\"text-gray-400 mt-4\">Preparing your video experience</p>\n      </motion.div>\n    </div>\n  );\n\n  // Manual retry function\n  const handleManualRetry = useCallback(() => {\n    setPlayerState(prev => ({\n      ...prev,\n      error: null,\n      isLoading: true,\n      retryCount: 0,\n      isRetrying: false\n    }));\n    \n    if (videoRef.current) {\n      videoRef.current.load();\n    }\n  }, []);\n\n  // Try different source\n  const handleTryDifferentSource = useCallback(() => {\n    if (sources.length > 1) {\n      const currentIndex = sources.findIndex(s => s === playerState.currentSource);\n      const nextSource = sources[(currentIndex + 1) % sources.length];\n      setPlayerState(prev => ({\n        ...prev,\n        currentSource: nextSource,\n        quality: nextSource.quality,\n        error: null,\n        isLoading: true,\n        retryCount: 0,\n        isRetrying: false\n      }));\n    }\n  }, [sources, playerState.currentSource]);\n\n  // Render error state\n  const renderError = () => (\n    <div className=\"w-full h-full bg-gradient-to-br from-red-900 to-black flex items-center justify-center\">\n      <motion.div\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        className=\"text-center text-white max-w-md mx-auto px-4\"\n      >\n        <div className=\"w-16 h-16 bg-red-500/20 rounded-full flex items-center justify-center mx-auto mb-4\">\n          <i className=\"ri-error-warning-line text-3xl text-red-400\"></i>\n        </div>\n        <h3 className=\"text-xl font-bold mb-2\">Playback Error</h3>\n        <p className=\"text-gray-400 mb-4\">{playerState.error}</p>\n        \n        {/* Retry status */}\n        {playerState.isRetrying && (\n          <div className=\"bg-blue-500/20 border border-blue-500/30 rounded-lg p-3 mb-4\">\n            <div className=\"flex items-center justify-center\">\n              <SparkleLoadingSpinner size=\"sm\" />\n              <span className=\"ml-2 text-blue-200\">Retrying...</span>\n            </div>\n          </div>\n        )}\n        \n        {/* CORS-specific error message */}\n        {playerState.error?.includes('CORS') && (\n          <div className=\"bg-yellow-500/20 border border-yellow-500/30 rounded-lg p-3 mb-4\">\n            <p className=\"text-yellow-200 text-sm\">\n              This video source is blocked by CORS policy. Try using a different video source or contact the site administrator.\n            </p>\n          </div>\n        )}\n        \n        <div className=\"flex gap-2 justify-center\">\n          <button\n            onClick={handleManualRetry}\n            disabled={playerState.isRetrying}\n            className=\"px-4 py-2 bg-teal-600 hover:bg-teal-700 disabled:bg-gray-600 disabled:cursor-not-allowed text-white rounded-lg transition-colors\"\n          >\n            <i className=\"ri-refresh-line mr-2\"></i>\n            Try Again\n          </button>\n          {sources.length > 1 && (\n            <button\n              onClick={handleTryDifferentSource}\n              disabled={playerState.isRetrying}\n              className=\"px-4 py-2 bg-blue-600 hover:bg-blue-700 disabled:bg-gray-500 disabled:cursor-not-allowed text-white rounded-lg transition-colors\"\n            >\n              <i className=\"ri-swap-line mr-2\"></i>\n              Try Different Source\n            </button>\n          )}\n        </div>\n      </motion.div>\n    </div>\n  );\n\n  // Quality selector\n  const renderQualitySelector = () => (\n    <div className=\"absolute top-4 right-4 z-10\">\n      <div className=\"bg-black/80 backdrop-blur-sm rounded-lg p-2\">\n        <select\n          value={playerState.quality}\n          onChange={(e) => changeQuality(e.target.value)}\n          className=\"bg-transparent text-white text-sm border border-gray-600 rounded px-2 py-1\"\n        >\n          {availableQualities.map(quality => (\n            <option key={quality} value={quality} className=\"bg-gray-800\">\n              {quality}\n            </option>\n          ))}\n        </select>\n      </div>\n    </div>\n  );\n\n  // Main render\n  if (playerState.error) {\n    return (\n      <div className={`relative bg-black rounded-lg overflow-hidden ${className}`}>\n        {renderError()}\n      </div>\n    );\n  }\n\n  if (playerState.isLoading || !playerState.currentSource) {\n    return (\n      <div className={`relative bg-black rounded-lg overflow-hidden ${className}`}>\n        {renderLoading()}\n      </div>\n    );\n  }\n\n  const sourceType = VideoService.detectVideoSource(playerState.currentSource.url);\n\n  return (\n    <div className={`relative bg-black rounded-lg overflow-hidden ${className}`}>\n      {/* Quality Selector */}\n      {availableQualities.length > 1 && renderQualitySelector()}\n      \n      {/* Video Player */}\n      {sourceType === 'youtube' ? (\n        renderYouTubePlayer(playerState.currentSource)\n      ) : sourceType === 'iframe' ? (\n        renderIframePlayer(playerState.currentSource)\n      ) : sourceType === 'hls' ? (\n        renderHLSPlayer(playerState.currentSource)\n      ) : (\n        renderDirectVideoPlayer(playerState.currentSource)\n      )}\n      \n      {/* Loading Overlay */}\n      {playerState.isLoading && (\n        <div className=\"absolute inset-0 bg-black/50 flex items-center justify-center\">\n          <div className=\"w-8 h-8 border-2 border-white border-t-transparent rounded-full animate-spin\"></div>\n        </div>\n      )}\n    </div>\n  );\n}\n","import React from 'react';\n\ninterface IframePlayerProps {\n  src: string;\n  title?: string;\n  width?: string | number;\n  height?: string | number;\n  allowFullScreen?: boolean;\n  className?: string;\n}\n\nexport const IframePlayer: React.FC<IframePlayerProps> = ({\n  src,\n  title = \"Video Player\",\n  width = \"100%\",\n  height = \"500px\",\n  allowFullScreen = true,\n  className = \"\"\n}) => {\n  // Check if the URL is a 9anime page and needs special handling\n  const is9animeUrl = src.includes('9anime.org.lv') || src.includes('hianime.do');\n  \n  // Check if it's a gogoanime URL (which should be embeddable)\n  const isGogoanimeUrl = src.includes('gogoanime.me.uk') || src.includes('gogoanime');\n  \n  // Check if it's a megaplay URL (which should be embeddable)\n  const isMegaplayUrl = src.includes('megaplay.buzz') || src.includes('megaplay');\n  \n  return (\n    <div className={`iframe-player-container ${className}`}>\n      {is9animeUrl && !isGogoanimeUrl && !isMegaplayUrl ? (\n        <div className=\"relative w-full h-full bg-gray-900 rounded-lg overflow-hidden\">\n          <div className=\"absolute inset-0 flex items-center justify-center bg-gray-800\">\n            <div className=\"text-center text-white p-6\">\n              <div className=\"text-4xl mb-4\">🎬</div>\n              <h3 className=\"text-xl font-semibold mb-2\">9anime Player</h3>\n              <p className=\"text-gray-300 mb-4\">\n                This episode is hosted on 9anime.org.lv\n              </p>\n              <a\n                href={src}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"inline-flex items-center px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors\"\n              >\n                <span className=\"mr-2\">▶️</span>\n                Watch on 9anime\n              </a>\n            </div>\n          </div>\n        </div>\n      ) : (\n        <iframe\n          src={src}\n          title={title}\n          width={width}\n          height={height}\n          allowFullScreen={allowFullScreen}\n          frameBorder=\"0\"\n          allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n          className=\"w-full h-full rounded-lg shadow-lg\"\n          style={{\n            minHeight: typeof height === 'string' ? height : `${height}px`,\n            border: 'none',\n            borderRadius: '8px'\n          }}\n          sandbox=\"allow-scripts allow-same-origin allow-presentation allow-forms\"\n        />\n      )}\n    </div>\n  );\n};\n\nexport default IframePlayer;\n"],"names":["SmartVideoPlayer","sources","animeId","episodeNumber","title","onTimeUpdate","onPlay","onPause","onEnded","onError","autoPlay","startTime","className","playerState","setPlayerState","useState","currentSource","currentTime","duration","isPlaying","isLoading","error","volume","isMuted","quality","retryCount","isRetrying","videoRef","useRef","iframeRef","initializePlayer","useCallback","length","prev","bestSource","find","s","useEffect","preloadNextEpisode","nextSource","preloadLink","document","createElement","rel","as","href","url","head","appendChild","optimizeBuffer","current","video","webkitAudioDecodedByteCount","preload","navigator","userAgent","includes","playsInline","controls","throttle","func","delay","timeoutId","lastExecTime","args","Date","now","setTimeout","throttledAdaptiveBitrate","buffered","bufferAhead","end","lowerQualitySource","higherQualitySource","throttledHandleAdaptiveBitrate","useMemo","handleYouTubeReady","handleTimeUpdate","handlePlay","handlePause","handleEnded","handleError","load","changeQuality","newSource","availableQualities","map","filter","index","self","indexOf","renderExternalLinkFallback","source","jsx","children","jsxs","motion","div","initial","opacity","animate","target","onClick","currentIndex","findIndex","handleManualRetry","handleTryDifferentSource","SparkleLoadingSpinner","size","disabled","text","sourceType","VideoService","detectVideoSource","value","onChange","e","embedUrl","getYouTubeEmbedUrl","autoplay","start","ref","src","allow","onLoad","renderYouTubePlayer","isStreamingSitePage","toLowerCase","getIframeEmbedUrl","sandbox","renderIframePlayer","processedSource","processVideoSource","crossOrigin","errorMessage","code","onLoadStart","onLoadedData","onProgress","onWaiting","type","renderHLSPlayer","renderDirectVideoPlayer","IframePlayer","width","height","allowFullScreen","is9animeUrl","isGogoanimeUrl","isMegaplayUrl","frameBorder","style","minHeight","border","borderRadius"],"mappings":"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"}