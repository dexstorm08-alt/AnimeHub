{"version":3,"file":"GenrePreferences-B6Uurv7K.js","sources":["../../src/services/userPreferencesService.ts","../../src/components/profile/GenrePreferences.tsx"],"sourcesContent":["import { supabase } from '../lib/supabase'\r\nimport type { Tables } from '../lib/supabase'\r\n\r\ntype UserPreferences = Tables<'user_preferences'>\r\n\r\nexport interface UserPreferencesData {\r\n  favorite_genres: string[]\r\n  preferred_language: string\r\n  auto_play_next: boolean\r\n  quality_preference: string\r\n  theme_preference: string\r\n  notification_settings: {\r\n    email: boolean\r\n    push: boolean\r\n    recommendations: boolean\r\n  }\r\n  privacy_settings: {\r\n    profile_public: boolean\r\n    watch_history_public: boolean\r\n  }\r\n}\r\n\r\nexport class UserPreferencesService {\r\n  // Get user preferences\r\n  static async getUserPreferences(userId: string): Promise<UserPreferences | null> {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('user_preferences')\r\n        .select('*')\r\n        .eq('user_id', userId)\r\n        .single()\r\n\r\n      if (error) {\r\n        if (error.code === 'PGRST116') {\r\n          // No preferences found, create default ones\r\n          return await this.createDefaultPreferences(userId)\r\n        }\r\n        console.error('Error fetching user preferences:', error)\r\n        return null\r\n      }\r\n\r\n      return data\r\n    } catch (err) {\r\n      console.error('Error fetching user preferences:', err)\r\n      return null\r\n    }\r\n  }\r\n\r\n  // Create default preferences for new user\r\n  static async createDefaultPreferences(userId: string): Promise<UserPreferences | null> {\r\n    try {\r\n      const defaultPreferences = {\r\n        user_id: userId,\r\n        favorite_genres: [],\r\n        preferred_language: 'en',\r\n        auto_play_next: true,\r\n        quality_preference: 'auto',\r\n        theme_preference: 'light',\r\n        notification_settings: {\r\n          email: true,\r\n          push: true,\r\n          recommendations: true\r\n        },\r\n        privacy_settings: {\r\n          profile_public: true,\r\n          watch_history_public: false\r\n        }\r\n      }\r\n\r\n      const { data, error } = await supabase\r\n        .from('user_preferences')\r\n        .insert(defaultPreferences)\r\n        .select()\r\n        .single()\r\n\r\n      if (error) {\r\n        console.error('Error creating default preferences:', error)\r\n        return null\r\n      }\r\n\r\n      return data\r\n    } catch (err) {\r\n      console.error('Error creating default preferences:', err)\r\n      return null\r\n    }\r\n  }\r\n\r\n  // Update user preferences\r\n  static async updateUserPreferences(\r\n    userId: string, \r\n    updates: Partial<UserPreferencesData>\r\n  ): Promise<UserPreferences | null> {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('user_preferences')\r\n        .update({\r\n          ...updates,\r\n          updated_at: new Date().toISOString()\r\n        })\r\n        .eq('user_id', userId)\r\n        .select()\r\n        .single()\r\n\r\n      if (error) {\r\n        console.error('Error updating user preferences:', error)\r\n        return null\r\n      }\r\n\r\n      return data\r\n    } catch (err) {\r\n      console.error('Error updating user preferences:', err)\r\n      return null\r\n    }\r\n  }\r\n\r\n  // Update favorite genres\r\n  static async updateFavoriteGenres(userId: string, genres: string[]): Promise<boolean> {\r\n    try {\r\n      const { error } = await supabase\r\n        .from('user_preferences')\r\n        .update({\r\n          favorite_genres: genres,\r\n          updated_at: new Date().toISOString()\r\n        })\r\n        .eq('user_id', userId)\r\n\r\n      if (error) {\r\n        console.error('Error updating favorite genres:', error)\r\n        return false\r\n      }\r\n\r\n      return true\r\n    } catch (err) {\r\n      console.error('Error updating favorite genres:', err)\r\n      return false\r\n    }\r\n  }\r\n\r\n  // Get available genres from anime database\r\n  static async getAvailableGenres(): Promise<string[]> {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('anime')\r\n        .select('genres')\r\n        .not('genres', 'is', null)\r\n\r\n      if (error) {\r\n        console.error('Error fetching genres:', error)\r\n        return []\r\n      }\r\n\r\n      // Extract unique genres from all anime\r\n      const allGenres = data.flatMap(anime => anime.genres || [])\r\n      const uniqueGenres = Array.from(new Set(allGenres)).sort()\r\n      \r\n      return uniqueGenres\r\n    } catch (err) {\r\n      console.error('Error fetching genres:', err)\r\n      return []\r\n    }\r\n  }\r\n\r\n  // Get recommended anime based on user's favorite genres\r\n  static async getRecommendedAnime(userId: string, limit: number = 10): Promise<any[]> {\r\n    try {\r\n      const preferences = await this.getUserPreferences(userId)\r\n      if (!preferences || preferences.favorite_genres.length === 0) {\r\n        return []\r\n      }\r\n\r\n      const { data, error } = await supabase\r\n        .from('anime')\r\n        .select('*')\r\n        .overlaps('genres', preferences.favorite_genres)\r\n        .limit(limit)\r\n\r\n      if (error) {\r\n        console.error('Error fetching recommended anime:', error)\r\n        return []\r\n      }\r\n\r\n      return data || []\r\n    } catch (err) {\r\n      console.error('Error fetching recommended anime:', err)\r\n      return []\r\n    }\r\n  }\r\n}\r\n","import { useState, useEffect } from 'react'\r\nimport { motion, AnimatePresence } from 'framer-motion'\r\nimport { SparkleLoadingSpinner } from '../base/LoadingSpinner'\r\nimport { UserPreferencesService } from '../../services/userPreferencesService'\r\n\r\ninterface GenrePreferencesProps {\r\n  userId: string\r\n  onSave: (genres: string[]) => void\r\n  onCancel: () => void\r\n}\r\n\r\nexport default function GenrePreferences({ userId, onSave, onCancel }: GenrePreferencesProps) {\r\n  const [availableGenres, setAvailableGenres] = useState<string[]>([])\r\n  const [selectedGenres, setSelectedGenres] = useState<string[]>([])\r\n  const [loading, setLoading] = useState(true)\r\n  const [saving, setSaving] = useState(false)\r\n\r\n  // Load available genres and user's current preferences\r\n  useEffect(() => {\r\n    const loadData = async () => {\r\n      try {\r\n        setLoading(true)\r\n        \r\n        // Load available genres and user preferences in parallel\r\n        const [genres, preferences] = await Promise.all([\r\n          UserPreferencesService.getAvailableGenres(),\r\n          UserPreferencesService.getUserPreferences(userId)\r\n        ])\r\n        \r\n        setAvailableGenres(genres)\r\n        setSelectedGenres(preferences?.favorite_genres || [])\r\n      } catch (error) {\r\n        console.error('Error loading genre preferences:', error)\r\n      } finally {\r\n        setLoading(false)\r\n      }\r\n    }\r\n\r\n    loadData()\r\n  }, [userId])\r\n\r\n  const handleGenreToggle = (genre: string) => {\r\n    setSelectedGenres(prev => {\r\n      if (prev.includes(genre)) {\r\n        return prev.filter(g => g !== genre)\r\n      } else {\r\n        return [...prev, genre]\r\n      }\r\n    })\r\n  }\r\n\r\n  const handleSave = async () => {\r\n    try {\r\n      setSaving(true)\r\n      const success = await UserPreferencesService.updateFavoriteGenres(userId, selectedGenres)\r\n      \r\n      if (success) {\r\n        onSave(selectedGenres)\r\n      } else {\r\n        alert('Failed to save preferences. Please try again.')\r\n      }\r\n    } catch (error) {\r\n      console.error('Error saving preferences:', error)\r\n      alert('Failed to save preferences. Please try again.')\r\n    } finally {\r\n      setSaving(false)\r\n    }\r\n  }\r\n\r\n  const handleSelectAll = () => {\r\n    setSelectedGenres(availableGenres)\r\n  }\r\n\r\n  const handleClearAll = () => {\r\n    setSelectedGenres([])\r\n  }\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"flex items-center justify-center p-8\">\r\n        <SparkleLoadingSpinner size=\"md\" text=\"Loading genres...\" />\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <motion.div\r\n      initial={{ opacity: 0, y: 20 }}\r\n      animate={{ opacity: 1, y: 0 }}\r\n      exit={{ opacity: 0, y: -20 }}\r\n      className=\"bg-white rounded-xl p-6 shadow-lg\"\r\n    >\r\n      <div className=\"mb-6\">\r\n        <h3 className=\"text-2xl font-bold text-teal-800 mb-2\">Select Your Favorite Genres</h3>\r\n        <p className=\"text-teal-600\">\r\n          Choose the genres you enjoy most. This helps us recommend anime you'll love!\r\n        </p>\r\n        <div className=\"mt-3 flex items-center space-x-4 text-sm text-teal-500\">\r\n          <span>{selectedGenres.length} selected</span>\r\n          <button\r\n            onClick={handleSelectAll}\r\n            className=\"text-blue-600 hover:text-blue-700 underline\"\r\n          >\r\n            Select All\r\n          </button>\r\n          <button\r\n            onClick={handleClearAll}\r\n            className=\"text-red-600 hover:text-red-700 underline\"\r\n          >\r\n            Clear All\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Genre Grid */}\r\n      <div className=\"grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 gap-3 mb-6 max-h-96 overflow-y-auto\">\r\n        <AnimatePresence>\r\n          {availableGenres.map((genre, index) => {\r\n            const isSelected = selectedGenres.includes(genre)\r\n            return (\r\n              <motion.button\r\n                key={genre}\r\n                initial={{ opacity: 0, scale: 0.8 }}\r\n                animate={{ opacity: 1, scale: 1 }}\r\n                exit={{ opacity: 0, scale: 0.8 }}\r\n                transition={{ delay: index * 0.02 }}\r\n                onClick={() => handleGenreToggle(genre)}\r\n                className={`p-3 rounded-lg border-2 transition-all duration-200 ${\r\n                  isSelected\r\n                    ? 'border-teal-500 bg-teal-50 text-teal-800 shadow-md'\r\n                    : 'border-gray-200 bg-white text-gray-700 hover:border-teal-300 hover:bg-teal-25'\r\n                }`}\r\n              >\r\n                <div className=\"flex items-center justify-between\">\r\n                  <span className=\"font-medium text-sm\">{genre}</span>\r\n                  {isSelected && (\r\n                    <motion.i\r\n                      initial={{ scale: 0 }}\r\n                      animate={{ scale: 1 }}\r\n                      className=\"ri-check-line text-teal-600 text-sm ml-2\"\r\n                    />\r\n                  )}\r\n                </div>\r\n              </motion.button>\r\n            )\r\n          })}\r\n        </AnimatePresence>\r\n      </div>\r\n\r\n      {/* Selected Genres Preview */}\r\n      {selectedGenres.length > 0 && (\r\n        <motion.div\r\n          initial={{ opacity: 0, height: 0 }}\r\n          animate={{ opacity: 1, height: 'auto' }}\r\n          className=\"mb-6 p-4 bg-teal-50 rounded-lg border border-teal-200\"\r\n        >\r\n          <h4 className=\"font-semibold text-teal-800 mb-2\">Your Selected Genres:</h4>\r\n          <div className=\"flex flex-wrap gap-2\">\r\n            {selectedGenres.map((genre) => (\r\n              <motion.span\r\n                key={genre}\r\n                initial={{ opacity: 0, scale: 0.8 }}\r\n                animate={{ opacity: 1, scale: 1 }}\r\n                className=\"px-3 py-1 bg-teal-600 text-white text-sm rounded-full\"\r\n              >\r\n                {genre}\r\n              </motion.span>\r\n            ))}\r\n          </div>\r\n        </motion.div>\r\n      )}\r\n\r\n      {/* Action Buttons */}\r\n      <div className=\"flex justify-end space-x-3\">\r\n        <button\r\n          onClick={onCancel}\r\n          disabled={saving}\r\n          className=\"px-6 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors disabled:opacity-50\"\r\n        >\r\n          Cancel\r\n        </button>\r\n        <button\r\n          onClick={handleSave}\r\n          disabled={saving}\r\n          className=\"px-6 py-2 bg-teal-600 text-white rounded-lg hover:bg-teal-700 transition-colors disabled:opacity-50 flex items-center\"\r\n        >\r\n          {saving ? (\r\n            <>\r\n              <div className=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin mr-2\"></div>\r\n              Saving...\r\n            </>\r\n          ) : (\r\n            <>\r\n              <i className=\"ri-save-line mr-2\"></i>\r\n              Save Preferences\r\n            </>\r\n          )}\r\n        </button>\r\n      </div>\r\n    </motion.div>\r\n  )\r\n}\r\n"],"names":["UserPreferencesService","getUserPreferences","userId","data","error","supabase","from","select","eq","single","code","this","createDefaultPreferences","err","defaultPreferences","user_id","favorite_genres","preferred_language","auto_play_next","quality_preference","theme_preference","notification_settings","email","push","recommendations","privacy_settings","profile_public","watch_history_public","insert","updateUserPreferences","updates","update","updated_at","Date","toISOString","updateFavoriteGenres","genres","getAvailableGenres","not","allGenres","flatMap","anime","Array","Set","sort","getRecommendedAnime","limit","preferences","length","overlaps","GenrePreferences","onSave","onCancel","availableGenres","setAvailableGenres","useState","selectedGenres","setSelectedGenres","loading","setLoading","saving","setSaving","useEffect","async","Promise","all","loadData","jsx","className","children","SparkleLoadingSpinner","size","text","jsxs","motion","div","initial","opacity","y","animate","exit","onClick","AnimatePresence","map","genre","index","isSelected","includes","button","scale","transition","delay","prev","filter","g","handleGenreToggle","i","height","span","disabled","alert","Fragment"],"mappings":"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"}