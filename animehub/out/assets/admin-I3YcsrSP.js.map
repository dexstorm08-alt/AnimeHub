{"version":3,"file":"admin-I3YcsrSP.js","sources":["../../src/services/adminService.ts","../../src/services/adminAnimeService.ts","../../src/components/admin/AddAnimeModal.tsx","../../src/components/admin/EditAnimeModal.tsx","../../src/services/animeImporterService.ts","../../src/components/admin/TrailerDebugger.tsx","../../src/components/admin/EnhancedAnimeImporter.tsx","../../src/services/hianimeScraperService.ts","../../src/components/admin/ScrapedEpisodesModal.tsx","../../src/components/admin/AnimeScraperComponent.tsx"],"sourcesContent":["import { supabase } from '../lib/supabase'\n\nexport interface AdminStats {\n  totalUsers: number\n  totalAnime: number\n  totalEpisodes: number\n  totalReviews: number\n  recentUsers: number\n  activeUsers: number\n  premiumUsers: number\n  totalWatchTime: string\n}\n\nexport interface UserManagement {\n  id: string\n  email: string\n  username: string\n  avatar_url: string | null\n  subscription_type: 'free' | 'premium' | 'vip'\n  role: 'user' | 'moderator' | 'admin'\n  is_admin: boolean\n  created_at: string\n  last_login?: string\n  total_watch_time?: number\n  anime_watched?: number\n}\n\nexport interface SystemHealth {\n  database_status: 'healthy' | 'warning' | 'error'\n  api_response_time: number\n  storage_usage: number\n  active_connections: number\n  error_rate: number\n}\n\nexport interface ContentReport {\n  id: string\n  content_id: string\n  content_type: 'anime' | 'episode'\n  report_type: 'inappropriate_content' | 'copyright' | 'spam' | 'other'\n  title: string\n  description: string\n  status: 'pending' | 'investigating' | 'resolved' | 'dismissed'\n  priority: 'low' | 'medium' | 'high'\n  reported_by: string\n  created_at: string\n  updated_at: string\n  resolved_by?: string\n  resolution_notes?: string\n}\n\nexport interface AnalyticsData {\n  userGrowth: Array<{ date: string; users: number }>\n  animeViews: Array<{ anime: string; views: number }>\n  popularGenres: Array<{ genre: string; count: number }>\n  deviceStats: Array<{ device: string; percentage: number }>\n  revenueData?: Array<{ date: string; revenue: number }>\n}\n\nexport interface AdminSettings {\n  site_name: string\n  site_description: string\n  maintenance_mode: boolean\n  allow_registration: boolean\n  max_file_size: number\n  allowed_file_types: string[]\n  email_notifications: boolean\n  analytics_enabled: boolean\n  cache_enabled: boolean\n  cache_duration: number\n  social_login_enabled: boolean\n  premium_features_enabled: boolean\n}\n\nexport class AdminService {\n  // Check if current user is admin\n  static async isAdmin(): Promise<boolean> {\n    try {\n      const { data: { user } } = await supabase.auth.getUser()\n      if (!user) return false\n\n      const { data: profile } = await supabase\n        .from('users')\n        .select('role, is_admin')\n        .eq('id', user.id)\n        .single()\n\n      return !!(profile?.is_admin || profile?.role === 'admin')\n    } catch (error) {\n      console.error('Error checking admin status:', error)\n      return false\n    }\n  }\n\n  // Get admin dashboard statistics\n  static async getAdminStats(): Promise<AdminStats> {\n    try {\n      const [\n        usersResult,\n        animeResult,\n        episodesResult,\n        reviewsResult,\n        recentUsersResult,\n        premiumUsersResult\n      ] = await Promise.all([\n        supabase.from('users').select('id', { count: 'exact' }),\n        supabase.from('anime').select('id', { count: 'exact' }),\n        supabase.from('episodes').select('id', { count: 'exact' }),\n        supabase.from('reviews').select('id', { count: 'exact' }),\n        supabase.from('users').select('id', { count: 'exact' }).gte('created_at', new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString()),\n        supabase.from('users').select('id', { count: 'exact' }).neq('subscription_type', 'free')\n      ])\n\n      // Calculate active users (users with recent activity)\n      const activeUsersResult = await supabase\n        .from('user_progress')\n        .select('user_id', { count: 'exact' })\n        .gte('last_watched', new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString())\n\n      // Calculate total watch time (simplified)\n      const watchTimeResult = await supabase\n        .from('user_progress')\n        .select('progress_seconds')\n\n      const totalWatchTimeSeconds = watchTimeResult.data?.reduce((total, progress) => \n        total + (progress.progress_seconds || 0), 0) || 0\n\n      const totalWatchTimeHours = Math.round(totalWatchTimeSeconds / 3600)\n\n      return {\n        totalUsers: usersResult.count || 0,\n        totalAnime: animeResult.count || 0,\n        totalEpisodes: episodesResult.count || 0,\n        totalReviews: reviewsResult.count || 0,\n        recentUsers: recentUsersResult.count || 0,\n        activeUsers: activeUsersResult.count || 0,\n        premiumUsers: premiumUsersResult.count || 0,\n        totalWatchTime: `${totalWatchTimeHours} hours`\n      }\n    } catch (error) {\n      console.error('Error fetching admin stats:', error)\n      throw new Error('Failed to fetch admin statistics')\n    }\n  }\n\n  // Get all users for management\n  static async getAllUsers(page: number = 1, limit: number = 20): Promise<{ users: UserManagement[], total: number }> {\n    try {\n      const offset = (page - 1) * limit\n\n      const { data: users, count, error } = await supabase\n        .from('users')\n        .select(`\n          id,\n          email,\n          username,\n          avatar_url,\n          subscription_type,\n          role,\n          is_admin,\n          created_at\n        `, { count: 'exact' })\n        .order('created_at', { ascending: false })\n        .range(offset, offset + limit - 1)\n\n      if (error) throw error\n\n      // Get additional user stats\n      const userIds = users?.map(u => u.id) || []\n      \n      const [watchTimeResult, animeWatchedResult] = await Promise.all([\n        supabase\n          .from('user_progress')\n          .select('user_id, progress_seconds')\n          .in('user_id', userIds),\n        supabase\n          .from('user_progress')\n          .select('user_id, episode_id')\n          .in('user_id', userIds)\n          .eq('is_completed', true)\n      ])\n\n      // Calculate stats per user\n      const userStats = new Map()\n      watchTimeResult.data?.forEach(progress => {\n        const current = userStats.get(progress.user_id) || { watchTime: 0, animeWatched: 0 }\n        userStats.set(progress.user_id, {\n          ...current,\n          watchTime: current.watchTime + (progress.progress_seconds || 0)\n        })\n      })\n\n      animeWatchedResult.data?.forEach(progress => {\n        const current = userStats.get(progress.user_id) || { watchTime: 0, animeWatched: 0 }\n        userStats.set(progress.user_id, {\n          ...current,\n          animeWatched: current.animeWatched + 1\n        })\n      })\n\n      const enrichedUsers: UserManagement[] = users?.map(user => ({\n        ...user,\n        total_watch_time: userStats.get(user.id)?.watchTime || 0, // Keep in seconds\n        anime_watched: userStats.get(user.id)?.animeWatched || 0\n      })) || []\n\n      return {\n        users: enrichedUsers,\n        total: count || 0\n      }\n    } catch (error) {\n      console.error('Error fetching users:', error)\n      throw new Error('Failed to fetch users')\n    }\n  }\n\n  // Update user role/subscription\n  static async updateUser(userId: string, updates: Partial<UserManagement>): Promise<UserManagement> {\n    try {\n      const { data, error } = await supabase\n        .from('users')\n        .update({\n          ...updates,\n          updated_at: new Date().toISOString()\n        })\n        .eq('id', userId)\n        .select()\n        .single()\n\n      if (error) throw error\n      return data\n    } catch (error) {\n      console.error('Error updating user:', error)\n      throw new Error('Failed to update user')\n    }\n  }\n\n  // Delete user\n  static async deleteUser(userId: string): Promise<boolean> {\n    try {\n      // Check if user is an admin\n      const { data: user } = await supabase\n        .from('users')\n        .select('role')\n        .eq('id', userId)\n        .single()\n\n      if (user?.role === 'admin') {\n        throw new Error('Cannot delete admin users. Use database directly.')\n      }\n\n      const { error } = await supabase\n        .from('users')\n        .delete()\n        .eq('id', userId)\n\n      if (error) throw error\n      return true\n    } catch (error) {\n      console.error('Error deleting user:', error)\n      throw new Error('Failed to delete user')\n    }\n  }\n\n  // Get system health\n  static async getSystemHealth(): Promise<SystemHealth> {\n    try {\n      const startTime = Date.now()\n      \n      // Test database connection\n      const { error: dbError } = await supabase\n        .from('users')\n        .select('id')\n        .limit(1)\n\n      const apiResponseTime = Date.now() - startTime\n      const database_status = dbError ? 'error' : (apiResponseTime > 1000 ? 'warning' : 'healthy')\n\n      // Get storage usage (simplified)\n      const { count: totalRecords } = await supabase\n        .from('users')\n        .select('*', { count: 'exact', head: true })\n\n      // Simulate other metrics (in real app, these would come from monitoring)\n      const storage_usage = Math.min(100, (totalRecords || 0) / 1000 * 10) // Simplified calculation\n      const active_connections = Math.floor(Math.random() * 50) + 10 // Simulated\n      const error_rate = dbError ? 100 : Math.random() * 5 // Simulated\n\n      return {\n        database_status,\n        api_response_time: apiResponseTime,\n        storage_usage: Math.round(storage_usage),\n        active_connections,\n        error_rate: Math.round(error_rate * 100) / 100\n      }\n    } catch (error) {\n      console.error('Error fetching system health:', error)\n      return {\n        database_status: 'error',\n        api_response_time: 0,\n        storage_usage: 0,\n        active_connections: 0,\n        error_rate: 100\n      }\n    }\n  }\n\n  // Get recent activity\n  static async getRecentActivity(limit: number = 10): Promise<any[]> {\n    try {\n      const [newUsers, newReviews, newProgress] = await Promise.all([\n        supabase\n          .from('users')\n          .select('id, username, email, created_at')\n          .order('created_at', { ascending: false })\n          .limit(limit),\n        supabase\n          .from('reviews')\n          .select(`\n            id, rating, created_at,\n            user:user_id (username),\n            anime:anime_id (title)\n          `)\n          .order('created_at', { ascending: false })\n          .limit(limit),\n        supabase\n          .from('user_progress')\n          .select(`\n            id, is_completed, last_watched,\n            user:user_id (username),\n            episode:episode_id (\n              title,\n              anime:anime_id (title)\n            )\n          `)\n          .order('last_watched', { ascending: false })\n          .limit(limit)\n      ])\n\n      const activities: any[] = []\n\n      // Add user registrations\n      newUsers.data?.forEach(user => {\n        activities.push({\n          type: 'user_registration',\n          user: user.username,\n          timestamp: user.created_at,\n          description: `${user.username} registered`\n        })\n      })\n\n      // Add reviews\n      newReviews.data?.forEach((review: any) => {\n        activities.push({\n          type: 'review',\n          user: review.user?.username,\n          anime: review.anime?.title,\n          rating: review.rating,\n          timestamp: review.created_at,\n          description: `${review.user?.username} rated ${review.anime?.title} ${review.rating}/10`\n        })\n      })\n\n      // Add watch progress\n      newProgress.data?.forEach((progress: any) => {\n        activities.push({\n          type: progress.is_completed ? 'episode_completed' : 'episode_watched',\n          user: progress.user?.username,\n          anime: progress.episode?.anime?.title,\n          episode: progress.episode?.title,\n          timestamp: progress.last_watched,\n          description: `${progress.user?.username} ${progress.is_completed ? 'completed' : 'watched'} ${progress.episode?.title}`\n        })\n      })\n\n      // Sort by timestamp and return top activities\n      return activities\n        .sort((a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime())\n        .slice(0, limit)\n    } catch (error) {\n      console.error('Error fetching recent activity:', error)\n      return []\n    }\n  }\n\n  // Create admin user (for initial setup)\n  static async createAdminUser(email: string, password: string, username: string): Promise<boolean> {\n    try {\n      // First create auth user\n      const { data: authData, error: authError } = await supabase.auth.admin.createUser({\n        email,\n        password,\n        email_confirm: true\n      })\n\n      if (authError) throw authError\n\n      // Then create user profile with admin role\n      const { error: profileError } = await supabase\n        .from('users')\n        .insert({\n          id: authData.user.id,\n          email,\n          username,\n          role: 'admin',\n          is_admin: true,\n          subscription_type: 'vip'\n        })\n\n      if (profileError) throw profileError\n      return true\n    } catch (error) {\n      console.error('Error creating admin user:', error)\n      throw new Error('Failed to create admin user')\n    }\n  }\n\n  // Content Reports Management\n  static async getContentReports(page: number = 1, limit: number = 20): Promise<{ reports: ContentReport[], total: number }> {\n    try {\n      const offset = (page - 1) * limit\n\n      const { data: reports, count, error } = await supabase\n        .from('content_reports')\n        .select(`\n          *,\n          reporter:reported_by(username),\n          resolver:resolved_by(username)\n        `, { count: 'exact' })\n        .order('created_at', { ascending: false })\n        .range(offset, offset + limit - 1)\n\n      if (error) throw error\n\n      return {\n        reports: reports || [],\n        total: count || 0\n      }\n    } catch (error) {\n      console.error('Error fetching content reports:', error)\n      // Return empty results if table doesn't exist\n      return {\n        reports: [],\n        total: 0\n      }\n    }\n  }\n\n  static async updateReportStatus(reportId: string, status: ContentReport['status'], resolutionNotes?: string): Promise<boolean> {\n    try {\n      const { data: { user } } = await supabase.auth.getUser()\n      if (!user) throw new Error('Not authenticated')\n\n      const { error } = await supabase\n        .from('content_reports')\n        .update({\n          status,\n          resolved_by: user.id,\n          resolution_notes: resolutionNotes,\n          updated_at: new Date().toISOString()\n        })\n        .eq('id', reportId)\n\n      if (error) throw error\n      return true\n    } catch (error) {\n      console.error('Error updating report status:', error)\n      throw new Error('Failed to update report status')\n    }\n  }\n\n  static async createContentReport(reportData: Omit<ContentReport, 'id' | 'created_at' | 'updated_at'>): Promise<boolean> {\n    try {\n      const { error } = await supabase\n        .from('content_reports')\n        .insert({\n          ...reportData,\n          created_at: new Date().toISOString(),\n          updated_at: new Date().toISOString()\n        })\n\n      if (error) throw error\n      return true\n    } catch (error) {\n      console.error('Error creating content report:', error)\n      throw new Error('Failed to create content report')\n    }\n  }\n\n  // Analytics Data\n  static async getAnalyticsData(timeRange: '7d' | '30d' | '90d' = '7d'): Promise<AnalyticsData> {\n    try {\n      const days = timeRange === '7d' ? 7 : timeRange === '30d' ? 30 : 90\n      const startDate = new Date(Date.now() - days * 24 * 60 * 60 * 1000)\n\n      // User growth data\n      const { data: userGrowth } = await supabase\n        .from('users')\n        .select('created_at')\n        .gte('created_at', startDate.toISOString())\n\n      // Process user growth by date\n      const growthMap = new Map()\n      userGrowth?.forEach(user => {\n        const date = new Date(user.created_at).toISOString().split('T')[0]\n        growthMap.set(date, (growthMap.get(date) || 0) + 1)\n      })\n\n      const userGrowthData = Array.from(growthMap.entries()).map(([date, users]) => ({\n        date,\n        users\n      }))\n\n      // Popular genres\n      const { data: genreData } = await supabase\n        .from('anime')\n        .select('genres')\n        .not('genres', 'is', null)\n\n      const genreCount = new Map()\n      genreData?.forEach(anime => {\n        if (anime.genres) {\n          anime.genres.forEach((genre: string) => {\n            genreCount.set(genre, (genreCount.get(genre) || 0) + 1)\n          })\n        }\n      })\n\n      const popularGenres = Array.from(genreCount.entries())\n        .map(([genre, count]) => ({ genre, count }))\n        .sort((a, b) => b.count - a.count)\n        .slice(0, 10)\n\n      // Top anime by views (simplified - using watchlist as proxy)\n      const { data: animeViews } = await supabase\n        .from('user_watchlist')\n        .select(`\n          anime_id,\n          anime:anime_id(title)\n        `)\n\n      const animeViewCount = new Map()\n      animeViews?.forEach(watchlist => {\n        if (watchlist.anime && typeof watchlist.anime === 'object' && 'title' in watchlist.anime) {\n          const title = (watchlist.anime as any).title\n          animeViewCount.set(title, (animeViewCount.get(title) || 0) + 1)\n        }\n      })\n\n      const topAnime = Array.from(animeViewCount.entries())\n        .map(([anime, views]) => ({ anime, views }))\n        .sort((a, b) => b.views - a.views)\n        .slice(0, 10)\n\n      // Device stats (mock data for now)\n      const deviceStats = [\n        { device: 'Desktop', percentage: 45 },\n        { device: 'Mobile', percentage: 40 },\n        { device: 'Tablet', percentage: 15 }\n      ]\n\n      return {\n        userGrowth: userGrowthData,\n        animeViews: topAnime,\n        popularGenres,\n        deviceStats\n      }\n    } catch (error) {\n      console.error('Error fetching analytics data:', error)\n      throw new Error('Failed to fetch analytics data')\n    }\n  }\n\n  // Admin Settings\n  static async getAdminSettings(): Promise<AdminSettings> {\n    try {\n      const { data: settings, error } = await supabase\n        .from('admin_settings')\n        .select('*')\n        .single()\n\n      if (error && error.code !== 'PGRST116') throw error\n\n      // Return default settings if none exist\n      if (!settings) {\n        return {\n          site_name: 'AnimeHub',\n          site_description: 'Your ultimate anime streaming platform',\n          maintenance_mode: false,\n          allow_registration: true,\n          max_file_size: 5242880,\n          allowed_file_types: ['image/jpeg', 'image/png', 'image/gif', 'image/webp'],\n          email_notifications: true,\n          analytics_enabled: true,\n          cache_enabled: true,\n          cache_duration: 3600,\n          social_login_enabled: true,\n          premium_features_enabled: true\n        }\n      }\n\n      return settings\n    } catch (error) {\n      console.error('Error fetching admin settings:', error)\n      throw new Error('Failed to fetch admin settings')\n    }\n  }\n\n  static async updateAdminSettings(settings: Partial<AdminSettings>): Promise<boolean> {\n    try {\n      const { error } = await supabase\n        .from('admin_settings')\n        .upsert({\n          ...settings,\n          updated_at: new Date().toISOString()\n        })\n\n      if (error) throw error\n      return true\n    } catch (error) {\n      console.error('Error updating admin settings:', error)\n      throw new Error('Failed to update admin settings')\n    }\n  }\n\n  // Anime Management Methods\n  static async getAllAnime(page: number = 1, limit: number = 20): Promise<{ anime: any[], total: number }> {\n    try {\n      const offset = (page - 1) * limit\n\n      const { data: anime, count, error } = await supabase\n        .from('anime')\n        .select(`\n          *,\n          episodes:episodes(id, title, episode_number, duration, video_url, created_at),\n          reviews:reviews(id, rating, created_at)\n        `, { count: 'exact' })\n        .order('created_at', { ascending: false })\n        .range(offset, offset + limit - 1)\n\n      if (error) throw error\n\n      // Calculate additional stats for each anime\n      const enrichedAnime = await Promise.all(anime?.map(async (item) => {\n        // Get unique viewers count (users who have watched any episode of this anime)\n        const { data: viewers } = await supabase\n          .from('user_progress')\n          .select('user_id')\n          .in('episode_id', item.episodes?.map((ep: any) => ep.id) || [])\n          .not('user_id', 'is', null)\n\n        const uniqueViewers = new Set(viewers?.map((v: any) => v.user_id) || []).size\n\n        // Get content reports count for this anime\n        let reports = null;\n        try {\n          const { data: reportsData } = await supabase\n            .from('content_reports')\n            .select('id')\n            .eq('content_id', item.id)\n            .eq('content_type', 'anime');\n          reports = reportsData;\n        } catch (error) {\n          // If content_reports table doesn't exist, just return empty array\n          console.warn('content_reports table not found, skipping reports count');\n          reports = [];\n        }\n\n        return {\n          ...item,\n          episode_count: item.episodes?.length || 0,\n          average_rating: item.reviews?.length > 0 \n            ? (item.reviews.reduce((sum: number, review: any) => sum + review.rating, 0) / item.reviews.length).toFixed(1)\n            : 'N/A',\n          total_reviews: item.reviews?.length || 0,\n          views: uniqueViewers,\n          reports: reports?.length || 0\n        }\n      }) || [])\n\n      return {\n        anime: enrichedAnime,\n        total: count || 0\n      }\n    } catch (error) {\n      console.error('Error fetching anime:', error)\n      throw new Error('Failed to fetch anime')\n    }\n  }\n\n  static async createAnime(animeData: any): Promise<boolean> {\n    try {\n      const { error } = await supabase\n        .from('anime')\n        .insert({\n          ...animeData,\n          created_at: new Date().toISOString(),\n          updated_at: new Date().toISOString()\n        })\n\n      if (error) throw error\n      return true\n    } catch (error) {\n      console.error('Error creating anime:', error)\n      throw new Error('Failed to create anime')\n    }\n  }\n\n  static async updateAnime(animeId: string, updates: any): Promise<boolean> {\n    try {\n      console.log('Updating anime with data:', updates)\n      \n      // Clean the updates object - remove null/undefined values and convert empty strings to null\n      const cleanedUpdates = Object.entries(updates).reduce((acc, [key, value]) => {\n        if (value === '' || value === null || value === undefined) {\n          acc[key] = null\n        } else if (Array.isArray(value) && value.length === 0) {\n          acc[key] = null\n        } else {\n          acc[key] = value\n        }\n        return acc\n      }, {} as any)\n\n      // Add updated_at timestamp\n      cleanedUpdates.updated_at = new Date().toISOString()\n\n      console.log('Cleaned updates:', cleanedUpdates)\n\n      const { error } = await supabase\n        .from('anime')\n        .update(cleanedUpdates)\n        .eq('id', animeId)\n\n      if (error) {\n        console.error('Supabase update error:', error)\n        throw error\n      }\n      \n      console.log('Anime updated successfully')\n      return true\n    } catch (error) {\n      console.error('Error updating anime:', error)\n      throw new Error(`Failed to update anime: ${error instanceof Error ? error.message : 'Unknown error'}`)\n    }\n  }\n\n  static async deleteAnime(animeId: string): Promise<boolean> {\n    try {\n      console.log(`Deleting anime ${animeId} and all related data...`);\n\n      // Get all episodes for this anime first (needed for user_progress cleanup)\n      const { data: episodes } = await supabase\n        .from('episodes')\n        .select('id')\n        .eq('anime_id', animeId);\n\n      const episodeIds = episodes?.map(ep => ep.id) || [];\n\n          // Delete related data in proper order\n          await Promise.all([\n            // Delete user progress for all episodes of this anime\n            episodeIds.length > 0 ? supabase.from('user_progress').delete().in('episode_id', episodeIds) : Promise.resolve(),\n            \n            // Delete reviews for this anime\n            supabase.from('reviews').delete().eq('anime_id', animeId),\n            \n            // Delete user watchlist entries for this anime\n            supabase.from('user_watchlist').delete().eq('anime_id', animeId),\n            \n            // Delete user favorites for this anime\n            supabase.from('user_favorites').delete().eq('anime_id', animeId),\n            \n            // Delete content reports for this anime (with fallback)\n            supabase.from('content_reports').delete().eq('content_id', animeId).eq('content_type', 'anime'),\n            \n            // Delete episodes for this anime (this will cascade to user_progress via ON DELETE CASCADE)\n            supabase.from('episodes').delete().eq('anime_id', animeId)\n          ]);\n\n      // Finally delete the anime itself\n      const { error } = await supabase\n        .from('anime')\n        .delete()\n        .eq('id', animeId);\n\n      if (error) throw error;\n      \n      console.log(`Successfully deleted anime ${animeId} and all related data`);\n      return true;\n    } catch (error) {\n      console.error('Error deleting anime:', error);\n      throw new Error('Failed to delete anime');\n    }\n  }\n\n  static async updateAnimeStatus(animeId: string, status: 'published' | 'pending' | 'draft'): Promise<boolean> {\n    try {\n      const { error } = await supabase\n        .from('anime')\n        .update({\n          status,\n          updated_at: new Date().toISOString()\n        })\n        .eq('id', animeId)\n\n      if (error) throw error\n      return true\n    } catch (error) {\n      console.error('Error updating anime status:', error)\n      throw new Error('Failed to update anime status')\n    }\n  }\n\n  static async bulkUpdateAnimeStatus(animeIds: string[], status: 'published' | 'pending' | 'draft'): Promise<boolean> {\n    try {\n      const { error } = await supabase\n        .from('anime')\n        .update({\n          status,\n          updated_at: new Date().toISOString()\n        })\n        .in('id', animeIds)\n\n      if (error) throw error\n      return true\n    } catch (error) {\n      console.error('Error bulk updating anime status:', error)\n      throw new Error('Failed to bulk update anime status')\n    }\n  }\n\n  static async bulkDeleteAnime(animeIds: string[]): Promise<boolean> {\n    try {\n      console.log(`Bulk deleting ${animeIds.length} anime and all related data...`);\n\n      // Get all episodes for these anime first\n      const { data: episodes } = await supabase\n        .from('episodes')\n        .select('id')\n        .in('anime_id', animeIds);\n\n      const episodeIds = episodes?.map(ep => ep.id) || [];\n\n          // Delete related data for all anime\n          await Promise.all([\n            // Delete user progress for all episodes of these anime\n            episodeIds.length > 0 ? supabase.from('user_progress').delete().in('episode_id', episodeIds) : Promise.resolve(),\n            \n            // Delete reviews for these anime\n            supabase.from('reviews').delete().in('anime_id', animeIds),\n            \n            // Delete user watchlist entries for these anime\n            supabase.from('user_watchlist').delete().in('anime_id', animeIds),\n            \n            // Delete user favorites for these anime\n            supabase.from('user_favorites').delete().in('anime_id', animeIds),\n            \n            // Delete content reports for these anime (with fallback)\n            supabase.from('content_reports').delete().in('content_id', animeIds).eq('content_type', 'anime'),\n            \n            // Delete episodes for these anime\n            supabase.from('episodes').delete().in('anime_id', animeIds)\n          ]);\n\n      // Delete the anime\n      const { error } = await supabase\n        .from('anime')\n        .delete()\n        .in('id', animeIds);\n\n      if (error) throw error;\n      \n      console.log(`Successfully bulk deleted ${animeIds.length} anime and all related data`);\n      return true;\n    } catch (error) {\n      console.error('Error bulk deleting anime:', error);\n      throw new Error('Failed to bulk delete anime');\n    }\n  }\n\n  // Episode Management Methods\n  static async getAnimeEpisodes(animeId: string): Promise<any[]> {\n    try {\n      const { data: episodes, error } = await supabase\n        .from('episodes')\n        .select('id, episode_number, title, description, duration, thumbnail_url, video_url, created_at')\n        .eq('anime_id', animeId)\n        .order('episode_number', { ascending: true })\n        .limit(50) // Reduced limit for faster queries\n\n      if (error) throw error\n      return episodes || []\n    } catch (error) {\n      console.error('Error fetching anime episodes:', error)\n      throw new Error('Failed to fetch episodes')\n    }\n  }\n\n  static async createEpisode(episodeData: any): Promise<boolean> {\n    try {\n      const { error } = await supabase\n        .from('episodes')\n        .insert({\n          ...episodeData,\n          created_at: new Date().toISOString(),\n          updated_at: new Date().toISOString()\n        })\n\n      if (error) throw error\n      return true\n    } catch (error) {\n      console.error('Error creating episode:', error)\n      throw new Error('Failed to create episode')\n    }\n  }\n\n  static async updateEpisode(episodeId: string, updates: any): Promise<boolean> {\n    try {\n      const { error } = await supabase\n        .from('episodes')\n        .update({\n          ...updates,\n          updated_at: new Date().toISOString()\n        })\n        .eq('id', episodeId)\n\n      if (error) throw error\n      return true\n    } catch (error) {\n      console.error('Error updating episode:', error)\n      throw new Error('Failed to update episode')\n    }\n  }\n\n  static async deleteEpisode(episodeId: string): Promise<boolean> {\n    try {\n      // Delete related data first\n      await Promise.all([\n        supabase.from('user_progress').delete().eq('episode_id', episodeId),\n        supabase.from('reviews').delete().eq('episode_id', episodeId)\n      ])\n\n      // Delete the episode\n      const { error } = await supabase\n        .from('episodes')\n        .delete()\n        .eq('id', episodeId)\n\n      if (error) throw error\n      return true\n    } catch (error) {\n      console.error('Error deleting episode:', error)\n      throw new Error('Failed to delete episode')\n    }\n  }\n\n  static async reorderEpisodes(_animeId: string, episodeOrders: { id: string; episode_number: number }[]): Promise<boolean> {\n    try {\n      const updates = episodeOrders.map(({ id, episode_number }) => \n        supabase\n          .from('episodes')\n          .update({ \n            episode_number,\n            updated_at: new Date().toISOString()\n          })\n          .eq('id', id)\n      )\n\n      await Promise.all(updates)\n      return true\n    } catch (error) {\n      console.error('Error reordering episodes:', error)\n      throw new Error('Failed to reorder episodes')\n    }\n  }\n\n  // User Management Methods\n  static async updateUserRole(userId: string, role: 'user' | 'moderator' | 'admin'): Promise<boolean> {\n    try {\n      // Check if user is trying to change an admin's role\n      const { data: currentUser } = await supabase\n        .from('users')\n        .select('role')\n        .eq('id', userId)\n        .single()\n\n      if (currentUser?.role === 'admin') {\n        throw new Error('Cannot change admin role through UI. Use database directly.')\n      }\n\n      const { error } = await supabase\n        .from('users')\n        .update({\n          role,\n          is_admin: role === 'admin'\n        })\n        .eq('id', userId)\n\n      if (error) throw error\n      return true\n    } catch (error) {\n      console.error('Error updating user role:', error)\n      throw new Error('Failed to update user role')\n    }\n  }\n\n  static async updateUserSubscription(userId: string, subscriptionType: 'free' | 'premium' | 'vip'): Promise<boolean> {\n    try {\n      const { error } = await supabase\n        .from('users')\n        .update({\n          subscription_type: subscriptionType\n        })\n        .eq('id', userId)\n\n      if (error) throw error\n      return true\n    } catch (error) {\n      console.error('Error updating user subscription:', error)\n      throw new Error('Failed to update user subscription')\n    }\n  }\n\n  static async getAnimeAnalytics(animeId: string): Promise<any> {\n    try {\n      // Get anime basic info\n      const { data: anime, error: animeError } = await supabase\n        .from('anime')\n        .select('*')\n        .eq('id', animeId)\n        .single()\n\n      if (animeError) throw animeError\n\n      // Get episodes for this anime\n      const { data: episodes } = await supabase\n        .from('episodes')\n        .select('id, title, episode_number, duration, video_url, created_at')\n        .eq('anime_id', animeId)\n        .order('episode_number', { ascending: true })\n\n      // Get reviews for this anime\n      const { data: reviews } = await supabase\n        .from('reviews')\n        .select('id, rating, review_text, created_at, user_id')\n        .eq('anime_id', animeId)\n        .order('created_at', { ascending: false })\n\n      // Get unique viewers count (users who have watched any episode of this anime)\n      const { data: viewers } = await supabase\n        .from('user_progress')\n        .select('user_id, episode_id, progress_seconds, is_completed, last_watched')\n        .in('episode_id', episodes?.map(ep => ep.id) || [])\n\n        // Get content reports for this anime\n        let reports = null;\n        try {\n          const { data: reportsData } = await supabase\n            .from('content_reports')\n            .select('id, report_type, status, priority, created_at')\n            .eq('content_id', animeId)\n            .eq('content_type', 'anime');\n          reports = reportsData;\n        } catch (error) {\n          // If content_reports table doesn't exist, just return empty array\n          console.warn('content_reports table not found, skipping reports');\n          reports = [];\n        }\n\n      // Calculate analytics\n      const uniqueViewers = new Set(viewers?.map(v => v.user_id) || []).size\n      const completedViews = viewers?.filter(v => v.is_completed).length || 0\n      const totalWatchTime = viewers?.reduce((sum, v) => sum + (v.progress_seconds || 0), 0) || 0\n      const averageRating = reviews && reviews.length > 0 \n        ? (reviews.reduce((sum, review) => sum + review.rating, 0) / reviews.length).toFixed(1)\n        : 'N/A'\n\n      return {\n        ...anime,\n        episodes: episodes || [],\n        reviews: reviews || [],\n        analytics: {\n          views: uniqueViewers,\n          completedViews,\n          totalWatchTime,\n          averageRating,\n          totalReviews: reviews?.length || 0,\n          reports: reports?.length || 0,\n          episodeCount: episodes?.length || 0\n        },\n        reports: reports || []\n      }\n    } catch (error) {\n      console.error('Error fetching anime analytics:', error)\n      throw new Error('Failed to fetch anime analytics')\n    }\n  }\n}\n","import { supabase, isSupabaseConfigured } from '../lib/supabase'\r\nimport type { Tables } from '../lib/supabase'\r\n\r\ntype Anime = Tables<'anime'>\r\ntype Episode = Tables<'episodes'>\r\n\r\nexport interface CreateAnimeData {\r\n  title: string\r\n  title_japanese?: string\r\n  description?: string\r\n  poster_url?: string\r\n  banner_url?: string\r\n  trailer_url?: string\r\n  rating?: number\r\n  year?: number\r\n  status?: 'ongoing' | 'completed' | 'upcoming'\r\n  type?: 'tv' | 'movie' | 'ova' | 'special'\r\n  genres?: string[]\r\n  studios?: string[]\r\n  total_episodes?: number\r\n  duration?: number\r\n  age_rating?: 'G' | 'PG' | 'PG-13' | 'R' | '18+'\r\n}\r\n\r\nexport interface CreateEpisodeData {\r\n  anime_id: string\r\n  episode_number: number\r\n  title?: string\r\n  description?: string\r\n  thumbnail_url?: string\r\n  video_url?: string\r\n  duration?: number\r\n  is_premium?: boolean\r\n  air_date?: string\r\n}\r\n\r\nexport interface AnimeWithEpisodes extends Anime {\r\n  episodes?: Episode[]\r\n  episode_count?: number\r\n}\r\n\r\nexport class AdminAnimeService {\r\n  // Get all anime with pagination and filters\r\n  static async getAnimeList(page: number = 1, limit: number = 20, filters?: {\r\n    search?: string\r\n    status?: string\r\n    genre?: string\r\n    type?: string\r\n  }) {\r\n    try {\r\n      // First, get the total count without pagination\r\n      let countQuery = supabase\r\n        .from('anime')\r\n        .select('*', { count: 'exact', head: true })\r\n\r\n      // Apply filters to count query\r\n      if (filters?.search) {\r\n        countQuery = countQuery.or(`title.ilike.%${filters.search}%,title_japanese.ilike.%${filters.search}%`)\r\n      }\r\n      if (filters?.status && filters.status !== 'all') {\r\n        countQuery = countQuery.eq('status', filters.status)\r\n      }\r\n      if (filters?.type && filters.type !== 'all') {\r\n        countQuery = countQuery.eq('type', filters.type)\r\n      }\r\n      if (filters?.genre && filters.genre !== 'all') {\r\n        countQuery = countQuery.contains('genres', [filters.genre])\r\n      }\r\n\r\n      const { count, error: countError } = await countQuery\r\n\r\n      if (countError) {\r\n        console.error('Error fetching anime count:', countError)\r\n        return { anime: [], total: 0, error: countError.message }\r\n      }\r\n\r\n      // Now get the actual data with pagination\r\n      let dataQuery = supabase\r\n        .from('anime')\r\n        .select(`\r\n          *,\r\n          episodes (id, episode_number, title, duration, is_premium)\r\n        `)\r\n        .order('created_at', { ascending: false })\r\n\r\n      // Apply filters to data query\r\n      if (filters?.search) {\r\n        dataQuery = dataQuery.or(`title.ilike.%${filters.search}%,title_japanese.ilike.%${filters.search}%`)\r\n      }\r\n      if (filters?.status && filters.status !== 'all') {\r\n        dataQuery = dataQuery.eq('status', filters.status)\r\n      }\r\n      if (filters?.type && filters.type !== 'all') {\r\n        dataQuery = dataQuery.eq('type', filters.type)\r\n      }\r\n      if (filters?.genre && filters.genre !== 'all') {\r\n        dataQuery = dataQuery.contains('genres', [filters.genre])\r\n      }\r\n\r\n      // Apply pagination\r\n      const from = (page - 1) * limit\r\n      const to = from + limit - 1\r\n\r\n      const { data, error } = await dataQuery.range(from, to)\r\n\r\n      if (error) {\r\n        console.error('Error fetching anime list:', error)\r\n        return { anime: [], total: 0, error: error.message }\r\n      }\r\n\r\n      // Transform data to include episode count\r\n      const animeWithCounts = data?.map((anime: any) => ({\r\n        ...anime,\r\n        episode_count: anime.episodes?.length || 0\r\n      })) || []\r\n\r\n      return {\r\n        anime: animeWithCounts,\r\n        total: count || 0,\r\n        page,\r\n        totalPages: Math.ceil((count || 0) / limit)\r\n      }\r\n    } catch (err) {\r\n      console.error('Error fetching anime list:', err)\r\n      return { anime: [], total: 0, error: 'Failed to fetch anime list' }\r\n    }\r\n  }\r\n\r\n  // Create new anime\r\n  static async createAnime(animeData: CreateAnimeData): Promise<Anime | null> {\r\n    try {\r\n      if (!isSupabaseConfigured) {\r\n        console.error('🚨 Supabase is not configured properly')\r\n        console.error('Please check your .env.local file and ensure VITE_SUPABASE_URL and VITE_SUPABASE_ANON_KEY are set correctly')\r\n        throw new Error('Database not configured. Please set up Supabase credentials in .env.local file.')\r\n      }\r\n\r\n      console.log('Creating anime with data:', animeData)\r\n      \r\n      const { data, error } = await supabase\r\n        .from('anime')\r\n        .insert(animeData)\r\n        .select()\r\n        .single()\r\n\r\n      if (error) {\r\n        console.error('Supabase error creating anime:', error)\r\n        throw new Error(`Database error: ${error.message}`)\r\n      }\r\n\r\n      console.log('Anime created successfully:', data)\r\n      return data\r\n    } catch (err) {\r\n      console.error('Error creating anime:', err)\r\n      throw err\r\n    }\r\n  }\r\n\r\n  // Update anime\r\n  static async updateAnime(animeId: string, updates: Partial<CreateAnimeData>): Promise<Anime | null> {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('anime')\r\n        .update({\r\n          ...updates,\r\n          updated_at: new Date().toISOString()\r\n        })\r\n        .eq('id', animeId)\r\n        .select()\r\n        .single()\r\n\r\n      if (error) {\r\n        console.error('Error updating anime:', error)\r\n        return null\r\n      }\r\n\r\n      return data\r\n    } catch (err) {\r\n      console.error('Error updating anime:', err)\r\n      return null\r\n    }\r\n  }\r\n\r\n  // Delete anime\r\n  static async deleteAnime(animeId: string): Promise<boolean> {\r\n    try {\r\n      const { error } = await supabase\r\n        .from('anime')\r\n        .delete()\r\n        .eq('id', animeId)\r\n\r\n      if (error) {\r\n        console.error('Error deleting anime:', error)\r\n        return false\r\n      }\r\n\r\n      return true\r\n    } catch (err) {\r\n      console.error('Error deleting anime:', err)\r\n      return false\r\n    }\r\n  }\r\n\r\n  // Get anime by ID with episodes\r\n  static async getAnimeById(animeId: string): Promise<AnimeWithEpisodes | null> {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('anime')\r\n        .select(`\r\n          *,\r\n          episodes (*)\r\n        `)\r\n        .eq('id', animeId)\r\n        .single()\r\n\r\n      if (error) {\r\n        console.error('Error fetching anime:', error)\r\n        return null\r\n      }\r\n\r\n      // Sort episodes by episode number\r\n      const sortedEpisodes = data.episodes?.sort((a: any, b: any) => \r\n        a.episode_number - b.episode_number\r\n      ) || []\r\n\r\n      return {\r\n        ...data,\r\n        episodes: sortedEpisodes,\r\n        episode_count: sortedEpisodes.length\r\n      }\r\n    } catch (err) {\r\n      console.error('Error fetching anime:', err)\r\n      return null\r\n    }\r\n  }\r\n\r\n  // Create episode\r\n  static async createEpisode(episodeData: CreateEpisodeData): Promise<Episode | null> {\r\n    try {\r\n      if (!isSupabaseConfigured) {\r\n        console.error('🚨 Supabase is not configured properly')\r\n        console.error('Please check your .env.local file and ensure VITE_SUPABASE_URL and VITE_SUPABASE_ANON_KEY are set correctly')\r\n        throw new Error('Database not configured. Please set up Supabase credentials in .env.local file.')\r\n      }\r\n\r\n      console.log('Creating episode with data:', episodeData)\r\n      \r\n      const { data, error } = await supabase\r\n        .from('episodes')\r\n        .insert(episodeData)\r\n        .select()\r\n        .single()\r\n\r\n      if (error) {\r\n        console.error('Supabase error creating episode:', error)\r\n        throw new Error(`Database error: ${error.message}`)\r\n      }\r\n\r\n      console.log('Episode created successfully:', data)\r\n      return data\r\n    } catch (err) {\r\n      console.error('Error creating episode:', err)\r\n      throw err\r\n    }\r\n  }\r\n\r\n  // Update episode\r\n  static async updateEpisode(episodeId: string, updates: Partial<CreateEpisodeData>): Promise<Episode | null> {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('episodes')\r\n        .update(updates)\r\n        .eq('id', episodeId)\r\n        .select()\r\n        .single()\r\n\r\n      if (error) {\r\n        console.error('Error updating episode:', error)\r\n        return null\r\n      }\r\n\r\n      return data\r\n    } catch (err) {\r\n      console.error('Error updating episode:', err)\r\n      return null\r\n    }\r\n  }\r\n\r\n  // Delete episode\r\n  static async deleteEpisode(episodeId: string): Promise<boolean> {\r\n    try {\r\n      const { error } = await supabase\r\n        .from('episodes')\r\n        .delete()\r\n        .eq('id', episodeId)\r\n\r\n      if (error) {\r\n        console.error('Error deleting episode:', error)\r\n        return false\r\n      }\r\n\r\n      return true\r\n    } catch (err) {\r\n      console.error('Error deleting episode:', err)\r\n      return false\r\n    }\r\n  }\r\n\r\n  // Bulk delete anime\r\n  static async bulkDeleteAnime(animeIds: string[]): Promise<boolean> {\r\n    try {\r\n      const { error } = await supabase\r\n        .from('anime')\r\n        .delete()\r\n        .in('id', animeIds)\r\n\r\n      if (error) {\r\n        console.error('Error bulk deleting anime:', error)\r\n        return false\r\n      }\r\n\r\n      return true\r\n    } catch (err) {\r\n      console.error('Error bulk deleting anime:', err)\r\n      return false\r\n    }\r\n  }\r\n\r\n  // Get available genres from existing anime\r\n  static async getAvailableGenres(): Promise<string[]> {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('anime')\r\n        .select('genres')\r\n        .not('genres', 'is', null)\r\n\r\n      if (error) {\r\n        console.error('Error fetching genres:', error)\r\n        return []\r\n      }\r\n\r\n      const allGenres = data.flatMap((anime: any) => anime.genres || [])\r\n      return Array.from(new Set(allGenres)).sort()\r\n    } catch (err) {\r\n      console.error('Error fetching genres:', err)\r\n      return []\r\n    }\r\n  }\r\n\r\n  // Get available studios from existing anime\r\n  static async getAvailableStudios(): Promise<string[]> {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('anime')\r\n        .select('studios')\r\n        .not('studios', 'is', null)\r\n\r\n      if (error) {\r\n        console.error('Error fetching studios:', error)\r\n        return []\r\n      }\r\n\r\n      const allStudios = data.flatMap((anime: any) => anime.studios || [])\r\n      return Array.from(new Set(allStudios)).sort()\r\n    } catch (err) {\r\n      console.error('Error fetching studios:', err)\r\n      return []\r\n    }\r\n  }\r\n}\r\n","import { useState, useEffect } from 'react'\r\nimport { motion, AnimatePresence } from 'framer-motion'\r\nimport { AdminAnimeService } from '../../services/adminAnimeService'\r\nimport { isSupabaseConfigured } from '../../lib/supabase'\r\nimport Button from '../../components/base/Button'\r\nimport Input from '../../components/base/Input'\r\nimport { SparkleLoadingSpinner } from '../base/LoadingSpinner'\r\n\r\ninterface AddAnimeModalProps {\r\n  isOpen: boolean\r\n  onClose: () => void\r\n  onSuccess: (anime: any) => void\r\n}\r\n\r\nexport default function AddAnimeModal({ isOpen, onClose, onSuccess }: AddAnimeModalProps) {\r\n  const [formData, setFormData] = useState({\r\n    title: '',\r\n    title_japanese: '',\r\n    description: '',\r\n    poster_url: '',\r\n    banner_url: '',\r\n    trailer_url: '',\r\n    rating: 0,\r\n    year: new Date().getFullYear(),\r\n    status: 'ongoing' as 'ongoing' | 'completed' | 'upcoming',\r\n    type: 'tv' as 'tv' | 'movie' | 'ova' | 'special',\r\n    genres: [] as string[],\r\n    studios: [] as string[],\r\n    total_episodes: 1,\r\n    duration: 24,\r\n    age_rating: 'PG-13' as 'G' | 'PG' | 'PG-13' | 'R' | '18+'\r\n  })\r\n\r\n  const [availableGenres, setAvailableGenres] = useState<string[]>([])\r\n  const [availableStudios, setAvailableStudios] = useState<string[]>([])\r\n  const [newGenre, setNewGenre] = useState('')\r\n  const [newStudio, setNewStudio] = useState('')\r\n  const [loading, setLoading] = useState(false)\r\n  const [error, setError] = useState<string | null>(null)\r\n\r\n  // Reset form when modal closes\r\n  useEffect(() => {\r\n    if (!isOpen) {\r\n      setFormData({\r\n        title: '',\r\n        title_japanese: '',\r\n        description: '',\r\n        poster_url: '',\r\n        banner_url: '',\r\n        trailer_url: '',\r\n        rating: 0,\r\n        year: new Date().getFullYear(),\r\n        status: 'ongoing',\r\n        type: 'tv',\r\n        genres: [],\r\n        studios: [],\r\n        total_episodes: 1,\r\n        duration: 24,\r\n        age_rating: 'PG-13'\r\n      })\r\n      setError(null)\r\n      setNewGenre('')\r\n      setNewStudio('')\r\n    }\r\n  }, [isOpen])\r\n\r\n  // Load available genres and studios\r\n  useEffect(() => {\r\n    if (isOpen) {\r\n      const loadData = async () => {\r\n        try {\r\n          const [genres, studios] = await Promise.all([\r\n            AdminAnimeService.getAvailableGenres(),\r\n            AdminAnimeService.getAvailableStudios()\r\n          ])\r\n          setAvailableGenres(genres)\r\n          setAvailableStudios(studios)\r\n        } catch (err) {\r\n          console.error('Error loading data:', err)\r\n        }\r\n      }\r\n      loadData()\r\n    }\r\n  }, [isOpen])\r\n\r\n  const handleInputChange = (field: string, value: any) => {\r\n    setFormData(prev => ({\r\n      ...prev,\r\n      [field]: value\r\n    }))\r\n    setError(null)\r\n  }\r\n\r\n  const handleAddGenre = () => {\r\n    if (newGenre.trim() && !formData.genres.includes(newGenre.trim())) {\r\n      setFormData(prev => ({\r\n        ...prev,\r\n        genres: [...prev.genres, newGenre.trim()]\r\n      }))\r\n      setNewGenre('')\r\n    }\r\n  }\r\n\r\n  const handleRemoveGenre = (genre: string) => {\r\n    setFormData(prev => ({\r\n      ...prev,\r\n      genres: prev.genres.filter(g => g !== genre)\r\n    }))\r\n  }\r\n\r\n  const handleAddStudio = () => {\r\n    if (newStudio.trim() && !formData.studios.includes(newStudio.trim())) {\r\n      setFormData(prev => ({\r\n        ...prev,\r\n        studios: [...prev.studios, newStudio.trim()]\r\n      }))\r\n      setNewStudio('')\r\n    }\r\n  }\r\n\r\n  const handleDemoData = () => {\r\n    setFormData({\r\n      title: 'Demon Slayer: Kimetsu no Yaiba',\r\n      title_japanese: '鬼滅の刃',\r\n      description: 'A family is attacked by demons and only two members survive - Tanjiro and his sister Nezuko, who is turning into a demon slowly. Tanjiro sets out to become a demon slayer to avenge his family and cure his sister.',\r\n      poster_url: 'https://images.unsplash.com/photo-1578662996442-48f60103fc96?w=400&h=600&fit=crop',\r\n      banner_url: 'https://images.unsplash.com/photo-1578662996442-48f60103fc96?w=1200&h=400&fit=crop',\r\n      trailer_url: 'https://www.youtube.com/watch?v=VQGCKyvzIM4',\r\n      rating: 8.7,\r\n      year: 2019,\r\n      status: 'completed' as 'ongoing' | 'completed' | 'upcoming',\r\n      type: 'tv' as 'tv' | 'movie' | 'ova' | 'special',\r\n      genres: ['Action', 'Supernatural', 'Historical', 'Shounen'],\r\n      studios: ['Ufotable'],\r\n      total_episodes: 26,\r\n      duration: 24,\r\n      age_rating: 'R' as 'G' | 'PG' | 'PG-13' | 'R' | '18+'\r\n    })\r\n    setError(null)\r\n  }\r\n\r\n  const handleSubmit = async (e: React.FormEvent) => {\r\n    e.preventDefault()\r\n    \r\n    console.log('Form submission started with data:', formData)\r\n    \r\n    if (!isSupabaseConfigured) {\r\n      setError('Database is not configured. Please check your Supabase settings.')\r\n      return\r\n    }\r\n    \r\n    if (!formData.title.trim()) {\r\n      setError('Title is required')\r\n      return\r\n    }\r\n\r\n    setLoading(true)\r\n    setError(null)\r\n\r\n        try {\r\n          console.log('Calling AdminAnimeService.createAnime with:', formData)\r\n          \r\n          const anime = await AdminAnimeService.createAnime(formData)\r\n          \r\n          console.log('Create anime result:', anime)\r\n          \r\n          if (anime) {\r\n            onSuccess(anime)\r\n            onClose()\r\n          } else {\r\n            setError('Failed to create anime. Please check your database connection and try again.')\r\n          }\r\n        } catch (err) {\r\n          console.error('Error creating anime:', err)\r\n          if (err instanceof Error) {\r\n            setError(err.message)\r\n          } else {\r\n            setError('Failed to create anime. Please try again.')\r\n          }\r\n        } finally {\r\n          setLoading(false)\r\n        }\r\n  }\r\n\r\n  if (!isOpen) return null\r\n\r\n  return (\r\n    <AnimatePresence>\r\n      <motion.div\r\n        initial={{ opacity: 0 }}\r\n        animate={{ opacity: 1 }}\r\n        exit={{ opacity: 0 }}\r\n        className=\"fixed inset-0 bg-black/50 flex items-center justify-center p-4 z-50\"\r\n        onClick={onClose}\r\n      >\r\n        <motion.div\r\n          initial={{ scale: 0.9, opacity: 0 }}\r\n          animate={{ scale: 1, opacity: 1 }}\r\n          exit={{ scale: 0.9, opacity: 0 }}\r\n          className=\"bg-white rounded-xl shadow-2xl w-full max-w-4xl max-h-[90vh] overflow-y-auto\"\r\n          onClick={(e) => e.stopPropagation()}\r\n        >\r\n          <div className=\"p-6\">\r\n            <div className=\"flex items-center justify-between mb-6\">\r\n              <h2 className=\"text-2xl font-bold text-teal-800\">Add New Anime</h2>\r\n              <div className=\"flex items-center gap-3\">\r\n                <button\r\n                  type=\"button\"\r\n                  onClick={handleDemoData}\r\n                  className=\"px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors duration-200 text-sm\"\r\n                  title=\"Fill with demo data for testing\"\r\n                >\r\n                  <i className=\"ri-magic-line mr-2\"></i>\r\n                  Demo Data\r\n                </button>\r\n                <button\r\n                  onClick={onClose}\r\n                  className=\"text-gray-400 hover:text-gray-600 transition-colors\"\r\n                >\r\n                  <i className=\"ri-close-line text-2xl\"></i>\r\n                </button>\r\n              </div>\r\n            </div>\r\n\r\n                  {error && (\r\n                    <div className=\"mb-4 p-4 bg-red-100 border border-red-300 text-red-700 rounded-lg\">\r\n                      <div className=\"flex items-start gap-3\">\r\n                        <i className=\"ri-error-warning-line text-xl mt-0.5\"></i>\r\n                        <div>\r\n                          <p className=\"font-semibold mb-2\">{error}</p>\r\n                          {error.includes('Database not configured') && (\r\n                            <div className=\"text-sm\">\r\n                              <p className=\"mb-2\">To fix this:</p>\r\n                              <ol className=\"list-decimal list-inside space-y-1 text-xs\">\r\n                                <li>Create a Supabase project at <a href=\"https://supabase.com/dashboard\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"text-blue-600 underline\">supabase.com</a></li>\r\n                                <li>Create a <code className=\"bg-red-200 px-1 rounded\">.env.local</code> file in your project root</li>\r\n                                <li>Add your Supabase URL and API key</li>\r\n                                <li>Restart the development server</li>\r\n                              </ol>\r\n                              <p className=\"mt-2 text-xs\">\r\n                                See <code className=\"bg-red-200 px-1 rounded\">SUPABASE-SETUP-GUIDE.md</code> for detailed instructions.\r\n                              </p>\r\n                            </div>\r\n                          )}\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  )}\r\n\r\n            <form onSubmit={handleSubmit} className=\"space-y-6\">\r\n              {/* Basic Information */}\r\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n                <div>\r\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                    Title *\r\n                  </label>\r\n                  <Input\r\n                    type=\"text\"\r\n                    value={formData.title}\r\n                    onChange={(e) => handleInputChange('title', e.target.value)}\r\n                    placeholder=\"Anime title\"\r\n                    required\r\n                  />\r\n                </div>\r\n\r\n                <div>\r\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                    Japanese Title\r\n                  </label>\r\n                  <Input\r\n                    type=\"text\"\r\n                    value={formData.title_japanese}\r\n                    onChange={(e) => handleInputChange('title_japanese', e.target.value)}\r\n                    placeholder=\"Japanese title\"\r\n                  />\r\n                </div>\r\n\r\n                <div>\r\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                    Year\r\n                  </label>\r\n                  <Input\r\n                    type=\"number\"\r\n                    value={formData.year || ''}\r\n                    onChange={(e) => {\r\n                      const value = e.target.value === '' ? new Date().getFullYear() : parseInt(e.target.value)\r\n                      handleInputChange('year', isNaN(value) ? new Date().getFullYear() : value)\r\n                    }}\r\n                    min=\"1900\"\r\n                    max={new Date().getFullYear() + 1}\r\n                  />\r\n                </div>\r\n\r\n                <div>\r\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                    Rating\r\n                  </label>\r\n                  <Input\r\n                    type=\"number\"\r\n                    value={formData.rating || ''}\r\n                    onChange={(e) => {\r\n                      const value = e.target.value === '' ? 0 : parseFloat(e.target.value)\r\n                      handleInputChange('rating', isNaN(value) ? 0 : value)\r\n                    }}\r\n                    min=\"0\"\r\n                    max=\"10\"\r\n                    step=\"0.1\"\r\n                    placeholder=\"0-10\"\r\n                  />\r\n                </div>\r\n              </div>\r\n\r\n              {/* Description */}\r\n              <div>\r\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                  Description\r\n                </label>\r\n                <textarea\r\n                  value={formData.description}\r\n                  onChange={(e) => handleInputChange('description', e.target.value)}\r\n                  className=\"w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-teal-500 focus:border-transparent\"\r\n                  rows={4}\r\n                  placeholder=\"Anime description...\"\r\n                />\r\n              </div>\r\n\r\n              {/* URLs */}\r\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n                <div>\r\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                    Poster URL\r\n                  </label>\r\n                  <Input\r\n                    type=\"url\"\r\n                    value={formData.poster_url}\r\n                    onChange={(e) => handleInputChange('poster_url', e.target.value)}\r\n                    placeholder=\"https://example.com/poster.jpg\"\r\n                  />\r\n                </div>\r\n\r\n                <div>\r\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                    Banner URL\r\n                  </label>\r\n                  <Input\r\n                    type=\"url\"\r\n                    value={formData.banner_url}\r\n                    onChange={(e) => handleInputChange('banner_url', e.target.value)}\r\n                    placeholder=\"https://example.com/banner.jpg\"\r\n                  />\r\n                </div>\r\n\r\n                <div>\r\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                    Trailer URL\r\n                  </label>\r\n                  <Input\r\n                    type=\"url\"\r\n                    value={formData.trailer_url}\r\n                    onChange={(e) => handleInputChange('trailer_url', e.target.value)}\r\n                    placeholder=\"https://youtube.com/watch?v=...\"\r\n                  />\r\n                </div>\r\n              </div>\r\n\r\n              {/* Status, Type, Age Rating */}\r\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n                <div>\r\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                    Status\r\n                  </label>\r\n                  <select\r\n                    value={formData.status}\r\n                    onChange={(e) => handleInputChange('status', e.target.value)}\r\n                    className=\"w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-teal-500 focus:border-transparent\"\r\n                  >\r\n                    <option value=\"ongoing\">Ongoing</option>\r\n                    <option value=\"completed\">Completed</option>\r\n                    <option value=\"upcoming\">Upcoming</option>\r\n                  </select>\r\n                </div>\r\n\r\n                <div>\r\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                    Type\r\n                  </label>\r\n                  <select\r\n                    value={formData.type}\r\n                    onChange={(e) => handleInputChange('type', e.target.value)}\r\n                    className=\"w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-teal-500 focus:border-transparent\"\r\n                  >\r\n                    <option value=\"tv\">TV Series</option>\r\n                    <option value=\"movie\">Movie</option>\r\n                    <option value=\"ova\">OVA</option>\r\n                    <option value=\"special\">Special</option>\r\n                  </select>\r\n                </div>\r\n\r\n                <div>\r\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                    Age Rating\r\n                  </label>\r\n                  <select\r\n                    value={formData.age_rating}\r\n                    onChange={(e) => handleInputChange('age_rating', e.target.value)}\r\n                    className=\"w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-teal-500 focus:border-transparent\"\r\n                  >\r\n                    <option value=\"G\">G</option>\r\n                    <option value=\"PG\">PG</option>\r\n                    <option value=\"PG-13\">PG-13</option>\r\n                    <option value=\"R\">R</option>\r\n                    <option value=\"18+\">18+</option>\r\n                  </select>\r\n                </div>\r\n              </div>\r\n\r\n              {/* Episodes and Duration */}\r\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n                <div>\r\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                    Total Episodes\r\n                  </label>\r\n                  <Input\r\n                    type=\"number\"\r\n                    value={formData.total_episodes || ''}\r\n                    onChange={(e) => {\r\n                      const value = e.target.value === '' ? 1 : parseInt(e.target.value)\r\n                      handleInputChange('total_episodes', isNaN(value) ? 1 : value)\r\n                    }}\r\n                    min=\"1\"\r\n                  />\r\n                </div>\r\n\r\n                <div>\r\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                    Duration (minutes)\r\n                  </label>\r\n                  <Input\r\n                    type=\"number\"\r\n                    value={formData.duration || ''}\r\n                    onChange={(e) => {\r\n                      const value = e.target.value === '' ? 24 : parseInt(e.target.value)\r\n                      handleInputChange('duration', isNaN(value) ? 24 : value)\r\n                    }}\r\n                    min=\"1\"\r\n                    placeholder=\"24\"\r\n                  />\r\n                </div>\r\n              </div>\r\n\r\n              {/* Genres */}\r\n              <div>\r\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                  Genres\r\n                </label>\r\n                <div className=\"flex flex-wrap gap-2 mb-3\">\r\n                  {formData.genres.map((genre) => (\r\n                    <span\r\n                      key={genre}\r\n                      className=\"px-3 py-1 bg-teal-100 text-teal-800 rounded-full text-sm flex items-center gap-2\"\r\n                    >\r\n                      {genre}\r\n                      <button\r\n                        type=\"button\"\r\n                        onClick={() => handleRemoveGenre(genre)}\r\n                        className=\"text-teal-600 hover:text-teal-800\"\r\n                      >\r\n                        <i className=\"ri-close-line text-sm\"></i>\r\n                      </button>\r\n                    </span>\r\n                  ))}\r\n                </div>\r\n                <div className=\"flex gap-2\">\r\n                  <Input\r\n                    type=\"text\"\r\n                    value={newGenre}\r\n                    onChange={(e) => setNewGenre(e.target.value)}\r\n                    placeholder=\"Add genre\"\r\n                    onKeyPress={(e) => e.key === 'Enter' && (e.preventDefault(), handleAddGenre())}\r\n                  />\r\n                  <Button type=\"button\" onClick={handleAddGenre} size=\"sm\">\r\n                    Add\r\n                  </Button>\r\n                </div>\r\n              </div>\r\n\r\n              {/* Studios */}\r\n              <div>\r\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                  Studios\r\n                </label>\r\n                <div className=\"flex flex-wrap gap-2 mb-3\">\r\n                  {formData.studios.map((studio) => (\r\n                    <span\r\n                      key={studio}\r\n                      className=\"px-3 py-1 bg-purple-100 text-purple-800 rounded-full text-sm flex items-center gap-2\"\r\n                    >\r\n                      {studio}\r\n                      <button\r\n                        type=\"button\"\r\n                        onClick={() => handleRemoveStudio(studio)}\r\n                        className=\"text-purple-600 hover:text-purple-800\"\r\n                      >\r\n                        <i className=\"ri-close-line text-sm\"></i>\r\n                      </button>\r\n                    </span>\r\n                  ))}\r\n                </div>\r\n                <div className=\"flex gap-2\">\r\n                  <Input\r\n                    type=\"text\"\r\n                    value={newStudio}\r\n                    onChange={(e) => setNewStudio(e.target.value)}\r\n                    placeholder=\"Add studio\"\r\n                    onKeyPress={(e) => e.key === 'Enter' && (e.preventDefault(), handleAddStudio())}\r\n                  />\r\n                  <Button type=\"button\" onClick={handleAddStudio} size=\"sm\">\r\n                    Add\r\n                  </Button>\r\n                </div>\r\n              </div>\r\n\r\n              {/* Submit Buttons */}\r\n              <div className=\"flex justify-end gap-3 pt-4 border-t\">\r\n                <Button\r\n                  type=\"button\"\r\n                  variant=\"secondary\"\r\n                  onClick={onClose}\r\n                  disabled={loading}\r\n                >\r\n                  Cancel\r\n                </Button>\r\n                <Button\r\n                  type=\"submit\"\r\n                  disabled={loading}\r\n                  className=\"flex items-center gap-2\"\r\n                >\r\n                  {loading ? (\r\n                    <>\r\n                      <SparkleLoadingSpinner size=\"sm\" text=\"Creating...\" />\r\n                    </>\r\n                  ) : (\r\n                    <>\r\n                      <i className=\"ri-add-line\"></i>\r\n                      Create Anime\r\n                    </>\r\n                  )}\r\n                </Button>\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </motion.div>\r\n      </motion.div>\r\n    </AnimatePresence>\r\n  )\r\n}\r\n","import { useState, useEffect } from 'react';\nimport { motion } from 'framer-motion';\nimport { AdminService } from '../../services/adminService';\n\ninterface EditAnimeModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onSuccess: () => void;\n  anime: any;\n}\n\nexport default function EditAnimeModal({ isOpen, onClose, onSuccess, anime }: EditAnimeModalProps) {\n  const [formData, setFormData] = useState({\n    title: '',\n    title_japanese: '',\n    description: '',\n    poster_url: '',\n    banner_url: '',\n    trailer_url: '',\n    rating: '',\n    year: '',\n    status: 'draft',\n    type: 'TV',\n    genres: [] as string[],\n    studios: [] as string[],\n    total_episodes: '',\n    duration: '',\n    age_rating: ''\n  });\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [availableGenres] = useState([\n    'Action', 'Adventure', 'Comedy', 'Drama', 'Fantasy', 'Horror', 'Mystery',\n    'Romance', 'Sci-Fi', 'Slice of Life', 'Sports', 'Supernatural', 'Thriller'\n  ]);\n  const [availableStudios] = useState([\n    'Studio Ghibli', 'Toei Animation', 'Madhouse', 'Bones', 'MAPPA', 'Ufotable',\n    'Wit Studio', 'A-1 Pictures', 'Production I.G', 'Kyoto Animation'\n  ]);\n\n  useEffect(() => {\n    if (anime && isOpen) {\n      setFormData({\n        title: anime.title || '',\n        title_japanese: anime.title_japanese || '',\n        description: anime.description || '',\n        poster_url: anime.poster_url || '',\n        banner_url: anime.banner_url || '',\n        trailer_url: anime.trailer_url || '',\n        rating: anime.rating?.toString() || '',\n        year: anime.year?.toString() || '',\n        status: anime.status || 'draft',\n        type: anime.type || 'TV',\n        genres: anime.genres || [],\n        studios: anime.studios || [],\n        total_episodes: anime.total_episodes?.toString() || '',\n        duration: anime.duration?.toString() || '',\n        age_rating: anime.age_rating || ''\n      });\n    }\n  }, [anime, isOpen]);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setLoading(true);\n    setError(null);\n\n    // Validate required fields\n    if (!formData.title.trim()) {\n      setError('Title is required');\n      setLoading(false);\n      return;\n    }\n\n    try {\n      // Convert form data to proper types\n      const updateData = {\n        title: formData.title || null,\n        title_japanese: formData.title_japanese || null,\n        description: formData.description || null,\n        poster_url: formData.poster_url || null,\n        banner_url: formData.banner_url || null,\n        trailer_url: formData.trailer_url || null,\n        rating: formData.rating ? parseFloat(formData.rating) : null,\n        year: formData.year ? parseInt(formData.year) : null,\n        status: formData.status,\n        type: formData.type,\n        genres: formData.genres.length > 0 ? formData.genres : null,\n        studios: formData.studios.length > 0 ? formData.studios : null,\n        total_episodes: formData.total_episodes ? parseInt(formData.total_episodes) : null,\n        duration: formData.duration ? parseInt(formData.duration) : null,\n        age_rating: formData.age_rating || null\n      };\n\n      console.log('Sending update data:', updateData);\n      await AdminService.updateAnime(anime.id, updateData);\n      onSuccess();\n      onClose();\n    } catch (err) {\n      console.error('Failed to update anime:', err);\n      const errorMessage = err instanceof Error ? err.message : 'Failed to update anime';\n      setError(`Update failed: ${errorMessage}`);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleGenreToggle = (genre: string) => {\n    setFormData(prev => ({\n      ...prev,\n      genres: prev.genres.includes(genre)\n        ? prev.genres.filter(g => g !== genre)\n        : [...prev.genres, genre]\n    }));\n  };\n\n  const handleStudioToggle = (studio: string) => {\n    setFormData(prev => ({\n      ...prev,\n      studios: prev.studios.includes(studio)\n        ? prev.studios.filter(s => s !== studio)\n        : [...prev.studios, studio]\n    }));\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center z-50 p-4\">\n      <motion.div\n        initial={{ opacity: 0, scale: 0.95 }}\n        animate={{ opacity: 1, scale: 1 }}\n        exit={{ opacity: 0, scale: 0.95 }}\n        className=\"bg-white rounded-xl shadow-2xl max-w-4xl w-full max-h-[90vh] overflow-y-auto\"\n      >\n        <div className=\"flex items-center justify-between p-6 border-b border-gray-200\">\n          <h2 className=\"text-2xl font-bold text-gray-900\">Edit Anime</h2>\n          <button\n            onClick={onClose}\n            className=\"text-gray-400 hover:text-gray-600 transition-colors p-2 rounded-full hover:bg-gray-100\"\n          >\n            <svg className=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n            </svg>\n          </button>\n        </div>\n\n        <form onSubmit={handleSubmit} className=\"p-6 space-y-6\">\n          {error && (\n            <div className=\"bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded\">\n              {error}\n            </div>\n          )}\n\n          {/* Basic Information */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Title *\n              </label>\n              <input\n                type=\"text\"\n                required\n                value={formData.title}\n                onChange={(e) => setFormData(prev => ({ ...prev, title: e.target.value }))}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500\"\n                placeholder=\"Anime title\"\n              />\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Japanese Title\n              </label>\n              <input\n                type=\"text\"\n                value={formData.title_japanese}\n                onChange={(e) => setFormData(prev => ({ ...prev, title_japanese: e.target.value }))}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500\"\n                placeholder=\"Japanese title\"\n              />\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Year\n              </label>\n              <input\n                type=\"number\"\n                value={formData.year}\n                onChange={(e) => setFormData(prev => ({ ...prev, year: e.target.value }))}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500\"\n                placeholder=\"2024\"\n                min=\"1900\"\n                max=\"2030\"\n              />\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Rating\n              </label>\n              <input\n                type=\"number\"\n                step=\"0.1\"\n                min=\"0\"\n                max=\"10\"\n                value={formData.rating}\n                onChange={(e) => setFormData(prev => ({ ...prev, rating: e.target.value }))}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500\"\n                placeholder=\"8.5\"\n              />\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Status\n              </label>\n              <select\n                value={formData.status}\n                onChange={(e) => setFormData(prev => ({ ...prev, status: e.target.value }))}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500\"\n              >\n                <option value=\"draft\">Draft</option>\n                <option value=\"pending\">Pending</option>\n                <option value=\"published\">Published</option>\n              </select>\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Type\n              </label>\n              <select\n                value={formData.type}\n                onChange={(e) => setFormData(prev => ({ ...prev, type: e.target.value }))}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500\"\n              >\n                <option value=\"TV\">TV</option>\n                <option value=\"Movie\">Movie</option>\n                <option value=\"OVA\">OVA</option>\n                <option value=\"ONA\">ONA</option>\n                <option value=\"Special\">Special</option>\n              </select>\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Total Episodes\n              </label>\n              <input\n                type=\"number\"\n                value={formData.total_episodes}\n                onChange={(e) => setFormData(prev => ({ ...prev, total_episodes: e.target.value }))}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500\"\n                placeholder=\"12\"\n                min=\"1\"\n              />\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Duration (minutes)\n              </label>\n              <input\n                type=\"number\"\n                value={formData.duration}\n                onChange={(e) => setFormData(prev => ({ ...prev, duration: e.target.value }))}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500\"\n                placeholder=\"24\"\n                min=\"1\"\n              />\n            </div>\n          </div>\n\n          {/* Description */}\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n              Description\n            </label>\n            <textarea\n              value={formData.description}\n              onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}\n              rows={4}\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500\"\n              placeholder=\"Anime description...\"\n            />\n          </div>\n\n          {/* URLs */}\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Poster URL\n              </label>\n              <input\n                type=\"url\"\n                value={formData.poster_url}\n                onChange={(e) => setFormData(prev => ({ ...prev, poster_url: e.target.value }))}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500\"\n                placeholder=\"https://example.com/poster.jpg\"\n              />\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Banner URL\n              </label>\n              <input\n                type=\"url\"\n                value={formData.banner_url}\n                onChange={(e) => setFormData(prev => ({ ...prev, banner_url: e.target.value }))}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500\"\n                placeholder=\"https://example.com/banner.jpg\"\n              />\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Trailer URL\n              </label>\n              <input\n                type=\"url\"\n                value={formData.trailer_url}\n                onChange={(e) => setFormData(prev => ({ ...prev, trailer_url: e.target.value }))}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500\"\n                placeholder=\"https://youtube.com/embed/...\"\n              />\n            </div>\n          </div>\n\n          {/* Genres */}\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n              Genres\n            </label>\n            <div className=\"grid grid-cols-3 md:grid-cols-4 gap-2\">\n              {availableGenres.map(genre => (\n                <label key={genre} className=\"flex items-center space-x-2\">\n                  <input\n                    type=\"checkbox\"\n                    checked={formData.genres.includes(genre)}\n                    onChange={() => handleGenreToggle(genre)}\n                    className=\"rounded border-gray-300 text-blue-600 focus:ring-blue-500\"\n                  />\n                  <span className=\"text-sm text-gray-700\">{genre}</span>\n                </label>\n              ))}\n            </div>\n          </div>\n\n          {/* Studios */}\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n              Studios\n            </label>\n            <div className=\"grid grid-cols-2 md:grid-cols-3 gap-2\">\n              {availableStudios.map(studio => (\n                <label key={studio} className=\"flex items-center space-x-2\">\n                  <input\n                    type=\"checkbox\"\n                    checked={formData.studios.includes(studio)}\n                    onChange={() => handleStudioToggle(studio)}\n                    className=\"rounded border-gray-300 text-blue-600 focus:ring-blue-500\"\n                  />\n                  <span className=\"text-sm text-gray-700\">{studio}</span>\n                </label>\n              ))}\n            </div>\n          </div>\n\n          {/* Actions */}\n          <div className=\"flex justify-end space-x-3 pt-6 border-t border-gray-200\">\n            <button\n              type=\"button\"\n              onClick={onClose}\n              className=\"px-6 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50 transition-colors\"\n            >\n              Cancel\n            </button>\n            <button\n              type=\"submit\"\n              disabled={loading}\n              className=\"px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 transition-colors\"\n            >\n              {loading ? 'Updating...' : 'Update Anime'}\n            </button>\n          </div>\n        </form>\n      </motion.div>\n    </div>\n  );\n}\n","import { supabase } from '../lib/supabase'\nimport type { Tables } from '../lib/supabase'\n\ntype Anime = Tables<'anime'>\n\n// External API Types\ninterface JikanAnime {\n  mal_id: number\n  title: string\n  title_japanese?: string\n  title_synonyms?: string[]\n  images?: {\n    jpg?: {\n      image_url?: string\n      small_image_url?: string\n      large_image_url?: string\n    }\n    webp?: {\n      image_url?: string\n      small_image_url?: string\n      large_image_url?: string\n    }\n  }\n  trailer?: {\n    youtube_id?: string\n    url?: string\n    embed_url?: string\n  }\n  type?: string\n  source?: string\n  episodes?: number\n  status?: string\n  airing?: boolean\n  aired?: {\n    from?: string\n    to?: string\n    prop?: {\n      from?: { year?: number; month?: number; day?: number }\n      to?: { year?: number; month?: number; day?: number }\n    }\n  }\n  duration?: string\n  rating?: string\n  score?: number\n  scored_by?: number\n  rank?: number\n  popularity?: number\n  members?: number\n  favorites?: number\n  synopsis?: string\n  background?: string\n  season?: string\n  year?: number\n  broadcast?: {\n    day?: string\n    time?: string\n    timezone?: string\n    string?: string\n  }\n  producers?: Array<{ mal_id: number; type: string; name: string; url: string }>\n  licensors?: Array<{ mal_id: number; type: string; name: string; url: string }>\n  studios?: Array<{ mal_id: number; type: string; name: string; url: string }>\n  genres?: Array<{ mal_id: number; type: string; name: string; url: string }>\n  explicit_genres?: Array<{ mal_id: number; type: string; name: string; url: string }>\n  themes?: Array<{ mal_id: number; type: string; name: string; url: string }>\n  demographics?: Array<{ mal_id: number; type: string; name: string; url: string }>\n}\n\ninterface AniListAnime {\n  id: number\n  title: {\n    romaji?: string\n    english?: string\n    native?: string\n    userPreferred?: string\n  }\n  description?: string\n  format?: string\n  status?: string\n  startDate?: {\n    year?: number\n    month?: number\n    day?: number\n  }\n  endDate?: {\n    year?: number\n    month?: number\n    day?: number\n  }\n  season?: string\n  seasonYear?: number\n  seasonInt?: number\n  episodes?: number\n  duration?: number\n  source?: string\n  trailer?: {\n    id?: string\n    site?: string\n    thumbnail?: string\n  }\n  coverImage?: {\n    extraLarge?: string\n    large?: string\n    medium?: string\n    color?: string\n  }\n  bannerImage?: string\n  genres?: string[]\n  synonyms?: string[]\n  averageScore?: number\n  meanScore?: number\n  popularity?: number\n  trending?: number\n  favourites?: number\n  studios?: {\n    nodes: Array<{\n      id: number\n      name: string\n    }>\n  }\n  externalLinks?: Array<{\n    id: number\n    url: string\n    site: string\n    type?: string\n    language?: string\n  }>\n}\n\ninterface ImportResult {\n  success: boolean\n  imported: number\n  skipped: number\n  errors: string[]\n  duplicates: string[]\n}\n\nexport class AnimeImporterService {\n  private static readonly JIKAN_BASE_URL = 'https://api.jikan.moe/v4'\n  private static readonly ANILIST_BASE_URL = 'https://graphql.anilist.co'\n  \n  // Search anime from Jikan API\n  static async searchJikanAnime(query: string, limit: number = 20): Promise<JikanAnime[]> {\n    try {\n      // Jikan API has a maximum limit of 25 for search requests\n      const safeLimit = Math.min(limit, 25)\n      const response = await fetch(`${this.JIKAN_BASE_URL}/anime?q=${encodeURIComponent(query)}&limit=${safeLimit}`)\n      \n      if (!response.ok) {\n        if (response.status === 400) {\n          throw new Error(`Jikan API error: Invalid request parameters. Please check your search query and try again.`)\n        }\n        throw new Error(`Jikan API error: ${response.status}`)\n      }\n      \n      const data = await response.json()\n      return data.data || []\n    } catch (error) {\n      console.error('Error searching Jikan anime:', error)\n      throw new Error(`Failed to search anime: ${error instanceof Error ? error.message : 'Unknown error'}`)\n    }\n  }\n\n  // Search anime from AniList API\n  static async searchAniListAnime(query: string, limit: number = 20): Promise<AniListAnime[]> {\n    try {\n      const graphqlQuery = `\n        query ($search: String, $perPage: Int) {\n          Page(perPage: $perPage) {\n            media(search: $search, type: ANIME) {\n              id\n              title {\n                romaji\n                english\n                native\n                userPreferred\n              }\n              description\n              format\n              status\n              startDate {\n                year\n                month\n                day\n              }\n              endDate {\n                year\n                month\n                day\n              }\n              season\n              seasonYear\n              seasonInt\n              episodes\n              duration\n              source\n              trailer {\n                id\n                site\n                thumbnail\n              }\n              coverImage {\n                extraLarge\n                large\n                medium\n                color\n              }\n              bannerImage\n              trailer {\n                id\n                site\n                thumbnail\n              }\n              genres\n              synonyms\n              averageScore\n              meanScore\n              popularity\n              trending\n              favourites\n              studios {\n                nodes {\n                  id\n                  name\n                }\n              }\n              relations {\n                edges {\n                  id\n                  relationType\n                  node {\n                    id\n                    idMal\n                    title {\n                      romaji\n                      english\n                      native\n                    }\n                    format\n                    status\n                    episodes\n                    startDate {\n                      year\n                    }\n                    coverImage {\n                      large\n                      medium\n                    }\n                  }\n                }\n              }\n              characters(sort: [ROLE, RELEVANCE], perPage: 20) {\n                edges {\n                  id\n                  role\n                  node {\n                    id\n                    name {\n                      full\n                      native\n                      alternative\n                    }\n                    image {\n                      large\n                      medium\n                    }\n                    description\n                  }\n                }\n              }\n              externalLinks {\n                id\n                url\n                site\n                type\n                language\n              }\n            }\n          }\n        }\n      `\n\n      const response = await fetch(this.ANILIST_BASE_URL, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          query: graphqlQuery,\n          variables: {\n            search: query,\n            perPage: limit\n          }\n        })\n      })\n\n      if (!response.ok) {\n        throw new Error(`AniList API error: ${response.status}`)\n      }\n\n      const data = await response.json()\n      return data.data?.Page?.media || []\n    } catch (error) {\n      console.error('Error searching AniList anime:', error)\n      throw new Error(`Failed to search anime: ${error instanceof Error ? error.message : 'Unknown error'}`)\n    }\n  }\n\n  // Convert Jikan anime data to our database format\n  static mapJikanToDatabase(jikanAnime: JikanAnime): Partial<Anime> {\n    const duration = jikanAnime.duration ? this.parseDuration(jikanAnime.duration) : null\n    \n    // Debug trailer data\n    console.log('🎬 Jikan trailer debug:', {\n      title: jikanAnime.title,\n      trailer: jikanAnime.trailer,\n      hasEmbedUrl: !!jikanAnime.trailer?.embed_url,\n      hasYoutubeId: !!jikanAnime.trailer?.youtube_id,\n      embedUrl: jikanAnime.trailer?.embed_url,\n      youtubeId: jikanAnime.trailer?.youtube_id\n    })\n    \n    return {\n      title: jikanAnime.title,\n      title_japanese: jikanAnime.title_japanese || null,\n      description: jikanAnime.synopsis || null,\n      poster_url: jikanAnime.images?.jpg?.large_image_url || jikanAnime.images?.webp?.large_image_url || null,\n      banner_url: null, // Jikan doesn't provide banner images\n      trailer_url: jikanAnime.trailer?.embed_url || (jikanAnime.trailer?.youtube_id ? `https://www.youtube.com/embed/${jikanAnime.trailer.youtube_id}` : null),\n      rating: jikanAnime.score || null,\n      year: jikanAnime.year || jikanAnime.aired?.prop?.from?.year || null,\n      status: this.mapJikanStatus(jikanAnime.status),\n      type: this.mapJikanType(jikanAnime.type),\n      genres: jikanAnime.genres?.map(g => g.name) || [],\n      studios: jikanAnime.studios?.map(s => s.name) || [],\n      total_episodes: jikanAnime.episodes || null,\n      duration: duration,\n      age_rating: this.mapJikanRating(jikanAnime.rating)\n    }\n  }\n\n  // Convert AniList anime data to our database format\n  static mapAniListToDatabase(aniListAnime: AniListAnime): Partial<Anime> {\n    const title = aniListAnime.title?.english || aniListAnime.title?.romaji || aniListAnime.title?.native || ''\n    const year = aniListAnime.startDate?.year || aniListAnime.seasonYear || null\n    \n    // Debug trailer data\n    console.log('🎬 AniList trailer debug:', {\n      title: title,\n      trailer: aniListAnime.trailer,\n      hasTrailer: !!aniListAnime.trailer?.id,\n      trailerId: aniListAnime.trailer?.id,\n      trailerSite: aniListAnime.trailer?.site\n    })\n    \n    const trailerUrl = aniListAnime.trailer?.id ? this.formatTrailerUrl(aniListAnime.trailer.id, aniListAnime.trailer.site) : null\n    \n    return {\n      title: title,\n      title_japanese: aniListAnime.title?.native || null,\n      description: aniListAnime.description ? this.stripHtmlTags(aniListAnime.description) : null,\n      poster_url: aniListAnime.coverImage?.large || aniListAnime.coverImage?.medium || null,\n      banner_url: aniListAnime.bannerImage || null,\n      trailer_url: trailerUrl,\n      rating: aniListAnime.averageScore ? aniListAnime.averageScore / 10 : null, // AniList uses 0-100 scale\n      year: year,\n      status: this.mapAniListStatus(aniListAnime.status),\n      type: this.mapAniListType(aniListAnime.format),\n      genres: aniListAnime.genres || [],\n      studios: aniListAnime.studios?.nodes?.map(s => s.name) || [],\n      total_episodes: aniListAnime.episodes || null,\n      duration: aniListAnime.duration || null,\n      age_rating: null // AniList doesn't provide age rating in this query\n    }\n  }\n\n  // Import anime from external API\n  static async importAnime(animeData: Partial<Anime>): Promise<Anime | null> {\n    try {\n      // Check for duplicates by title (use maybeSingle to handle no results gracefully)\n      const { data: existingAnime, error: duplicateError } = await supabase\n        .from('anime')\n        .select('id, title')\n        .ilike('title', animeData.title || '')\n        .maybeSingle()\n\n      // If there's an error checking for duplicates, log it but continue\n      if (duplicateError) {\n        console.warn('Error checking for duplicates:', duplicateError.message)\n      }\n\n      if (existingAnime) {\n        console.log(`Anime \"${animeData.title}\" already exists, skipping import`)\n        return existingAnime as Anime\n      }\n\n      // Insert new anime\n      const { data, error } = await supabase\n        .from('anime')\n        .insert({\n          ...animeData,\n          created_at: new Date().toISOString(),\n          updated_at: new Date().toISOString()\n        })\n        .select()\n        .single()\n\n      if (error) {\n        console.error('Error importing anime:', error)\n        throw new Error(`Failed to import anime: ${error.message}`)\n      }\n\n      console.log(`Successfully imported anime: ${animeData.title}`)\n      return data\n    } catch (error) {\n      console.error('Import anime error:', error)\n      throw error\n    }\n  }\n\n  // Bulk import anime from search results\n  static async bulkImportAnime(\n    searchQuery: string, \n    source: 'jikan' | 'anilist' = 'jikan',\n    limit: number = 10\n  ): Promise<ImportResult> {\n    const result: ImportResult = {\n      success: true,\n      imported: 0,\n      skipped: 0,\n      errors: [],\n      duplicates: []\n    }\n\n    try {\n      let searchResults: any[] = []\n      \n      if (source === 'jikan') {\n        searchResults = await this.searchJikanAnime(searchQuery, limit)\n      } else {\n        searchResults = await this.searchAniListAnime(searchQuery, limit)\n      }\n\n      // Optimize with batch processing\n      const batchSize = 3 // Smaller batches for better performance\n      for (let i = 0; i < searchResults.length; i += batchSize) {\n        const batch = searchResults.slice(i, i + batchSize)\n        \n        // Process batch in parallel for better performance\n        const batchPromises = batch.map(async (anime) => {\n          try {\n            const mappedData = source === 'jikan' \n              ? this.mapJikanToDatabase(anime)\n              : this.mapAniListToDatabase(anime)\n\n            // Enhance trailer data by checking both sources\n            await this.enhanceTrailerData(mappedData)\n\n            // Quick duplicate check (optimized - only check ID)\n            const { data: existingAnime } = await supabase\n              .from('anime')\n              .select('id')\n              .ilike('title', mappedData.title || '')\n              .maybeSingle()\n\n            if (existingAnime) {\n              return { type: 'duplicate', title: mappedData.title || 'Unknown' }\n            }\n\n            // Import the anime\n            const importedAnime = await this.importAnime(mappedData)\n            if (importedAnime) {\n              return { type: 'success', title: mappedData.title }\n            } else {\n              return { type: 'duplicate', title: mappedData.title || 'Unknown' }\n            }\n          } catch (error) {\n            return { type: 'error', title: anime.title || 'Unknown', error: error instanceof Error ? error.message : 'Unknown error' }\n          }\n        })\n\n        // Wait for batch to complete\n        const batchResults = await Promise.all(batchPromises)\n        \n        // Process results\n        batchResults.forEach(batchResult => {\n          switch (batchResult.type) {\n            case 'success':\n              result.imported++\n              break\n            case 'duplicate':\n              result.skipped++\n              result.duplicates.push(batchResult.title)\n              break\n            case 'error':\n              result.errors.push(`${batchResult.title}: ${batchResult.error}`)\n              break\n          }\n        })\n\n        // Small delay between batches to prevent overwhelming the API\n        if (i + batchSize < searchResults.length) {\n          await new Promise(resolve => setTimeout(resolve, 200))\n        }\n      }\n\n      return result\n    } catch (error) {\n      result.success = false\n      result.errors.push(`Bulk import failed: ${error instanceof Error ? error.message : 'Unknown error'}`)\n      return result\n    }\n  }\n\n  // Helper methods for data mapping\n  private static mapJikanStatus(status?: string): 'ongoing' | 'completed' | 'upcoming' | null {\n    if (!status) return null\n    \n    switch (status.toLowerCase()) {\n      case 'currently airing':\n      case 'airing':\n        return 'ongoing'\n      case 'finished airing':\n      case 'finished':\n        return 'completed'\n      case 'not yet aired':\n      case 'upcoming':\n        return 'upcoming'\n      default:\n        return null\n    }\n  }\n\n  private static mapJikanType(type?: string): 'tv' | 'movie' | 'ova' | 'special' | null {\n    if (!type) return null\n    \n    switch (type.toLowerCase()) {\n      case 'tv':\n        return 'tv'\n      case 'movie':\n        return 'movie'\n      case 'ova':\n        return 'ova'\n      case 'special':\n        return 'special'\n      default:\n        return 'tv' // Default to TV\n    }\n  }\n\n  private static mapJikanRating(rating?: string): string | null {\n    if (!rating) return null\n    \n    switch (rating.toLowerCase()) {\n      case 'g - all ages':\n        return 'G'\n      case 'pg - children':\n        return 'PG'\n      case 'pg-13 - teens 13 or older':\n        return 'PG-13'\n      case 'r - 17+ (violence & profanity)':\n      case 'r+ - mild nudity':\n        return 'R'\n      case 'rx - hentai':\n        return '18+'\n      default:\n        return null\n    }\n  }\n\n  private static mapAniListStatus(status?: string): 'ongoing' | 'completed' | 'upcoming' | null {\n    if (!status) return null\n    \n    switch (status.toLowerCase()) {\n      case 'releasing':\n        return 'ongoing'\n      case 'finished':\n        return 'completed'\n      case 'not yet released':\n        return 'upcoming'\n      default:\n        return null\n    }\n  }\n\n  private static mapAniListType(format?: string): 'tv' | 'movie' | 'ova' | 'special' | null {\n    if (!format) return null\n    \n    switch (format.toLowerCase()) {\n      case 'tv':\n        return 'tv'\n      case 'movie':\n        return 'movie'\n      case 'ova':\n        return 'ova'\n      case 'special':\n        return 'special'\n      default:\n        return 'tv' // Default to TV\n    }\n  }\n\n  private static parseDuration(duration: string): number | null {\n    // Parse duration like \"24 min per ep\" or \"1 hr 30 min\"\n    const match = duration.match(/(\\d+)\\s*min/)\n    return match ? parseInt(match[1]) : null\n  }\n\n  private static stripHtmlTags(html: string): string {\n    return html.replace(/<[^>]*>/g, '').replace(/&[^;]+;/g, ' ').trim()\n  }\n\n  // Helper function to format trailer URLs for embedding\n  private static formatTrailerUrl(id: string, site?: string): string {\n    switch (site?.toLowerCase()) {\n      case 'youtube':\n        return `https://www.youtube.com/embed/${id}`\n      case 'dailymotion':\n        return `https://www.dailymotion.com/embed/video/${id}`\n      case 'vimeo':\n        return `https://player.vimeo.com/video/${id}`\n      default:\n        // Default to YouTube embed if site is not specified\n        return `https://www.youtube.com/embed/${id}`\n    }\n  }\n\n  // Helper function to get watch URL (for external links)\n  private static formatTrailerWatchUrl(id: string, site?: string): string {\n    switch (site?.toLowerCase()) {\n      case 'youtube':\n        return `https://www.youtube.com/watch?v=${id}`\n      case 'dailymotion':\n        return `https://www.dailymotion.com/video/${id}`\n      case 'vimeo':\n        return `https://vimeo.com/${id}`\n      default:\n        return `https://www.youtube.com/watch?v=${id}`\n    }\n  }\n\n  // Test function to debug trailer data\n  static async testTrailerData(query: string = \"Attack on Titan\"): Promise<void> {\n    try {\n      console.log('🔍 Testing trailer data for:', query)\n      \n      // Test Jikan\n      console.log('📡 Testing Jikan API...')\n      const jikanResults = await this.searchJikanAnime(query, 1)\n      if (jikanResults.length > 0) {\n        const jikanAnime = jikanResults[0]\n        console.log('🎬 Jikan trailer data:', {\n          title: jikanAnime.title,\n          trailer: jikanAnime.trailer,\n          mappedTrailerUrl: jikanAnime.trailer?.embed_url || (jikanAnime.trailer?.youtube_id ? `https://www.youtube.com/embed/${jikanAnime.trailer.youtube_id}` : null)\n        })\n      }\n      \n      // Test AniList\n      console.log('📡 Testing AniList API...')\n      const anilistResults = await this.searchAniListAnime(query, 1)\n      if (anilistResults.length > 0) {\n        const anilistAnime = anilistResults[0]\n        console.log('🎬 AniList trailer data:', {\n          title: anilistAnime.title?.english || anilistAnime.title?.romaji,\n          trailer: anilistAnime.trailer,\n          mappedTrailerUrl: anilistAnime.trailer?.id ? this.formatTrailerUrl(anilistAnime.trailer.id, anilistAnime.trailer.site) : null\n        })\n      }\n    } catch (error) {\n      console.error('❌ Error testing trailer data:', error)\n    }\n  }\n\n  // Get trending anime from Jikan\n  static async getTrendingJikanAnime(limit: number = 10): Promise<JikanAnime[]> {\n    try {\n      const response = await fetch(`${this.JIKAN_BASE_URL}/top/anime?limit=${limit}`)\n      \n      if (!response.ok) {\n        throw new Error(`Jikan API error: ${response.status}`)\n      }\n      \n      const data = await response.json()\n      return data.data || []\n    } catch (error) {\n      console.error('Error fetching trending anime:', error)\n      throw new Error(`Failed to fetch trending anime: ${error instanceof Error ? error.message : 'Unknown error'}`)\n    }\n  }\n\n  // Get seasonal anime from Jikan\n  static async getSeasonalJikanAnime(year: number, season: string, limit: number = 20): Promise<JikanAnime[]> {\n    try {\n      const response = await fetch(`${this.JIKAN_BASE_URL}/seasons/${year}/${season}?limit=${limit}`)\n      \n      if (!response.ok) {\n        throw new Error(`Jikan API error: ${response.status}`)\n      }\n      \n      const data = await response.json()\n      return data.data || []\n    } catch (error) {\n      console.error('Error fetching seasonal anime:', error)\n      throw new Error(`Failed to fetch seasonal anime: ${error instanceof Error ? error.message : 'Unknown error'}`)\n    }\n  }\n\n  // Get trending anime from AniList\n  static async getTrendingAniListAnime(limit: number = 10): Promise<AniListAnime[]> {\n    try {\n      const query = `\n        query GetTrendingAnime($perPage: Int) {\n          Page(perPage: $perPage) {\n            media(sort: TRENDING_DESC, type: ANIME, status_in: [RELEASING, FINISHED]) {\n              id\n              idMal\n              title {\n                romaji\n                english\n                native\n              }\n              description\n              format\n              status\n              episodes\n              duration\n              genres\n              tags {\n                name\n                rank\n              }\n              averageScore\n              meanScore\n              popularity\n              trending\n              favourites\n              startDate {\n                year\n                month\n                day\n              }\n              endDate {\n                year\n                month\n                day\n              }\n              coverImage {\n                large\n                medium\n              }\n              bannerImage\n              trailer {\n                id\n                site\n                thumbnail\n              }\n              studios {\n                nodes {\n                  id\n                  name\n                }\n              }\n              relations {\n                edges {\n                  id\n                  relationType\n                  node {\n                    id\n                    idMal\n                    title {\n                      romaji\n                      english\n                    }\n                    format\n                    status\n                    episodes\n                    startDate {\n                      year\n                    }\n                    coverImage {\n                      large\n                    }\n                  }\n                }\n              }\n              characters(sort: [ROLE, RELEVANCE], perPage: 20) {\n                edges {\n                  id\n                  role\n                  node {\n                    id\n                    name {\n                      full\n                      native\n                      alternative\n                    }\n                    image {\n                      large\n                      medium\n                    }\n                    description\n                  }\n                }\n              }\n            }\n          }\n        }\n      `\n\n      const response = await fetch(this.ANILIST_BASE_URL, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          query,\n          variables: { perPage: limit }\n        })\n      })\n\n      if (!response.ok) {\n        throw new Error(`AniList API error: ${response.status}`)\n      }\n\n      const data = await response.json()\n      return data.data?.Page?.media || []\n    } catch (error) {\n      console.error('Error fetching trending anime from AniList:', error)\n      throw new Error(`Failed to fetch trending anime: ${error instanceof Error ? error.message : 'Unknown error'}`)\n    }\n  }\n\n  // Get seasonal anime from AniList\n  static async getSeasonalAniListAnime(year: number, season: string, limit: number = 20): Promise<AniListAnime[]> {\n    try {\n      const seasonMap: { [key: string]: number } = {\n        'winter': 1,\n        'spring': 2,\n        'summer': 3,\n        'fall': 4\n      }\n\n      const seasonNumber = seasonMap[season.toLowerCase()] || 1\n\n      const query = `\n        query GetSeasonalAnime($year: Int, $season: MediaSeason, $perPage: Int) {\n          Page(perPage: $perPage) {\n            media(season: $season, seasonYear: $year, type: ANIME, sort: POPULARITY_DESC) {\n              id\n              idMal\n              title {\n                romaji\n                english\n                native\n              }\n              description\n              format\n              status\n              episodes\n              duration\n              genres\n              tags {\n                name\n                rank\n              }\n              averageScore\n              meanScore\n              popularity\n              trending\n              favourites\n              startDate {\n                year\n                month\n                day\n              }\n              endDate {\n                year\n                month\n                day\n              }\n              coverImage {\n                large\n                medium\n              }\n              bannerImage\n              trailer {\n                id\n                site\n                thumbnail\n              }\n              studios {\n                nodes {\n                  id\n                  name\n                }\n              }\n              relations {\n                edges {\n                  id\n                  relationType\n                  node {\n                    id\n                    idMal\n                    title {\n                      romaji\n                      english\n                    }\n                    format\n                    status\n                    episodes\n                    startDate {\n                      year\n                    }\n                    coverImage {\n                      large\n                    }\n                  }\n                }\n              }\n              characters(sort: [ROLE, RELEVANCE], perPage: 20) {\n                edges {\n                  id\n                  role\n                  node {\n                    id\n                    name {\n                      full\n                      native\n                      alternative\n                    }\n                    image {\n                      large\n                      medium\n                    }\n                    description\n                  }\n                }\n              }\n            }\n          }\n        }\n      `\n\n      const response = await fetch(this.ANILIST_BASE_URL, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          query,\n          variables: { \n            year,\n            season: season.toUpperCase(),\n            perPage: limit \n          }\n        })\n      })\n\n      if (!response.ok) {\n        throw new Error(`AniList API error: ${response.status}`)\n      }\n\n      const data = await response.json()\n      return data.data?.Page?.media || []\n    } catch (error) {\n      console.error('Error fetching seasonal anime from AniList:', error)\n      throw new Error(`Failed to fetch seasonal anime: ${error instanceof Error ? error.message : 'Unknown error'}`)\n    }\n  }\n\n  // Import anime relations from AniList data\n  static async importAnimeRelations(animeId: string, anilistData: any): Promise<{ success: number, errors: number }> {\n    try {\n      if (!anilistData.relations?.edges || anilistData.relations.edges.length === 0) {\n        console.log(`No relations found for anime ${animeId}`)\n        return { success: 0, errors: 0 }\n      }\n\n      let successCount = 0\n      let errorCount = 0\n\n      for (const relation of anilistData.relations.edges) {\n        try {\n          const relatedTitle = relation.node.title?.romaji || relation.node.title?.english || relation.node.title?.native\n          \n          // Skip obviously wrong relations (basic validation)\n          if (!relatedTitle || !relation.relationType) {\n            console.log(`⚠️ Skipping invalid relation: ${relatedTitle} (${relation.relationType})`)\n            continue\n          }\n          \n          // Skip relations that are too different (basic genre/title similarity check)\n          const currentAnimeTitle = anilistData.title?.romaji || anilistData.title?.english || anilistData.title?.native || ''\n          if (currentAnimeTitle && relatedTitle) {\n            // Skip if titles are completely different (no common words)\n            const currentWords = currentAnimeTitle.toLowerCase().split(/\\s+/)\n            const relatedWords = relatedTitle.toLowerCase().split(/\\s+/)\n            const hasCommonWords = currentWords.some(word => \n              word.length > 2 && relatedWords.some(rWord => rWord.includes(word) || word.includes(rWord))\n            )\n            \n            // For SEQUEL/PREQUEL relations, require some similarity\n            if (['SEQUEL', 'PREQUEL'].includes(relation.relationType) && !hasCommonWords) {\n              console.log(`⚠️ Skipping unlikely ${relation.relationType}: ${currentAnimeTitle} -> ${relatedTitle}`)\n              continue\n            }\n          }\n\n          const relationData = {\n            anime_id: animeId,\n            related_anime_id: relation.node.idMal?.toString() || relation.node.id?.toString(),\n            relation_type: relation.relationType,\n            anilist_id: relation.node.id,\n            mal_id: relation.node.idMal,\n            title: relatedTitle,\n            format: relation.node.format,\n            status: relation.node.status,\n            episodes: relation.node.episodes,\n            year: relation.node.startDate?.year,\n            poster_url: relation.node.coverImage?.large || relation.node.coverImage?.medium\n          }\n\n          const { error } = await supabase\n            .from('anime_relations')\n            .upsert(relationData, { \n              onConflict: 'anime_id,related_anime_id,relation_type',\n              ignoreDuplicates: true \n            })\n\n          if (error) {\n            console.error(`Error importing relation for anime ${animeId}:`, error)\n            errorCount++\n          } else {\n            successCount++\n            console.log(`✅ Imported relation: ${relationData.title} (${relationData.relation_type})`)\n          }\n        } catch (error) {\n          console.error(`Error processing relation for anime ${animeId}:`, error)\n          errorCount++\n        }\n      }\n\n      return { success: successCount, errors: errorCount }\n    } catch (error) {\n      console.error('Error importing anime relations:', error)\n      return { success: 0, errors: 1 }\n    }\n  }\n\n  // Import anime characters from AniList data\n  static async importAnimeCharacters(animeId: string, anilistData: any): Promise<{ success: number, errors: number }> {\n    try {\n      console.log(`🎭 Importing characters for anime ${animeId}`)\n      console.log('Characters data:', anilistData.characters)\n      \n      if (!anilistData.characters?.edges || anilistData.characters.edges.length === 0) {\n        console.log(`No characters found for anime ${animeId}`)\n        return { success: 0, errors: 0 }\n      }\n\n      console.log(`Found ${anilistData.characters.edges.length} characters to import`)\n      \n      // Log character roles for debugging\n      const roleCounts = anilistData.characters.edges.reduce((acc: any, char: any) => {\n        acc[char.role] = (acc[char.role] || 0) + 1\n        return acc\n      }, {})\n      console.log('Character role distribution:', roleCounts)\n\n      let successCount = 0\n      let errorCount = 0\n\n      // Only import main characters (MAIN role)\n      const mainCharacters = anilistData.characters.edges.filter((char: any) => char.role === 'MAIN')\n      console.log(`Filtering to ${mainCharacters.length} main characters only`)\n      \n      for (const character of mainCharacters) {\n        try {\n          console.log('Processing character:', character.node.name?.full, 'Role:', character.role)\n          \n          const characterData = {\n            anime_id: animeId,\n            name: character.node.name?.full || character.node.name?.native,\n            name_japanese: character.node.name?.native,\n            name_romaji: character.node.name?.alternative,\n            role: character.role?.toLowerCase() || 'supporting', // Convert to lowercase to match schema\n            image_url: character.node.image?.large || character.node.image?.medium,\n            description: character.node.description\n          }\n          \n          console.log('Character data to insert:', characterData)\n\n          const { error } = await supabase\n            .from('anime_characters')\n            .upsert(characterData, { \n              onConflict: 'anime_id,name',\n              ignoreDuplicates: true \n            })\n\n          if (error) {\n            console.error(`Error importing character for anime ${animeId}:`, error)\n            errorCount++\n          } else {\n            successCount++\n            console.log(`✅ Imported character: ${characterData.name} (${characterData.role})`)\n          }\n        } catch (error) {\n          console.error(`Error processing character for anime ${animeId}:`, error)\n          errorCount++\n        }\n      }\n\n      return { success: successCount, errors: errorCount }\n    } catch (error) {\n      console.error('Error importing anime characters:', error)\n      return { success: 0, errors: 1 }\n    }\n  }\n\n  // Import anime studios from AniList data\n  static async importAnimeStudios(animeId: string, anilistData: any): Promise<{ success: number, errors: number }> {\n    try {\n      if (!anilistData.studios?.nodes || anilistData.studios.nodes.length === 0) {\n        console.log(`No studios found for anime ${animeId}`)\n        return { success: 0, errors: 0 }\n      }\n\n      let successCount = 0\n      let errorCount = 0\n\n      // Only import first 2 main studios\n      const mainStudios = anilistData.studios.nodes.slice(0, 2)\n      for (const studio of mainStudios) {\n        try {\n          // First, upsert the studio\n          const studioData = {\n            anilist_id: studio.id,\n            name: studio.name\n          }\n\n          const { data: studioResult, error: studioError } = await supabase\n            .from('anime_studios')\n            .upsert(studioData, { \n              onConflict: 'anilist_id'\n            })\n            .select('id')\n            .single()\n\n          if (studioError) {\n            console.error(`Error importing studio:`, studioError)\n            errorCount++\n            continue\n          }\n\n          // Get the studio UUID from the database\n          const studioUuid = studioResult?.id\n          if (!studioUuid) {\n            console.error(`Failed to get studio UUID for studio: ${studio.name}`)\n            errorCount++\n            continue\n          }\n\n          // Then, create the relation\n          const relationData = {\n            anime_id: animeId,\n            studio_id: studioUuid,\n            role: 'animation' // Default role for animation studios\n          }\n\n          const { error: relationError } = await supabase\n            .from('anime_studio_relations')\n            .upsert(relationData, { \n              onConflict: 'anime_id,studio_id,role',\n              ignoreDuplicates: true \n            })\n\n          if (relationError) {\n            console.error(`Error creating studio relation for anime ${animeId}:`, relationError)\n            errorCount++\n          } else {\n            successCount++\n            console.log(`✅ Imported studio: ${studioData.name}`)\n          }\n        } catch (error) {\n          console.error(`Error processing studio for anime ${animeId}:`, error)\n          errorCount++\n        }\n      }\n\n      return { success: successCount, errors: errorCount }\n    } catch (error) {\n      console.error('Error importing anime studios:', error)\n      return { success: 0, errors: 1 }\n    }\n  }\n\n  // Update existing anime with better trailer data from both sources\n  static async updateAnimeTrailers(): Promise<{ updated: number, errors: number }> {\n    try {\n      console.log('🔄 Starting trailer update process...')\n      \n      // Get all anime without trailer URLs\n      const { data: animeWithoutTrailers, error: fetchError } = await supabase\n        .from('anime')\n        .select('id, title, trailer_url')\n        .or('trailer_url.is.null,trailer_url.eq.')\n        .limit(50) // Process in batches\n      \n      if (fetchError) {\n        console.error('Error fetching anime:', fetchError)\n        return { updated: 0, errors: 1 }\n      }\n\n      if (!animeWithoutTrailers || animeWithoutTrailers.length === 0) {\n        console.log('✅ All anime already have trailer URLs')\n        return { updated: 0, errors: 0 }\n      }\n\n      console.log(`🔍 Found ${animeWithoutTrailers.length} anime without trailers`)\n      \n      let updated = 0\n      let errors = 0\n\n      // Process each anime\n      for (const anime of animeWithoutTrailers) {\n        try {\n          console.log(`🔍 Searching trailer for: ${anime.title}`)\n          \n          // Create anime data object for enhancement\n          const animeData: Partial<Anime> = {\n            id: anime.id,\n            title: anime.title,\n            trailer_url: anime.trailer_url\n          }\n\n          // Enhance trailer data\n          await this.enhanceTrailerData(animeData)\n\n          // Update if we found a trailer\n          if (animeData.trailer_url && animeData.trailer_url !== anime.trailer_url) {\n            const { error: updateError } = await supabase\n              .from('anime')\n              .update({ trailer_url: animeData.trailer_url })\n              .eq('id', anime.id)\n\n            if (updateError) {\n              console.error(`Error updating trailer for ${anime.title}:`, updateError)\n              errors++\n            } else {\n              console.log(`✅ Updated trailer for: ${anime.title}`)\n              updated++\n            }\n          } else {\n            console.log(`❌ No trailer found for: ${anime.title}`)\n          }\n\n          // Add delay to avoid rate limiting\n          await new Promise(resolve => setTimeout(resolve, 1000))\n          \n        } catch (error) {\n          console.error(`Error processing ${anime.title}:`, error)\n          errors++\n        }\n      }\n\n      console.log(`🎬 Trailer update complete: ${updated} updated, ${errors} errors`)\n      return { updated, errors }\n      \n    } catch (error) {\n      console.error('Error in updateAnimeTrailers:', error)\n      return { updated: 0, errors: 1 }\n    }\n  }\n\n  // Enhanced import anime with relations\n  // Enhance trailer data by checking both Jikan and AniList sources\n  static async enhanceTrailerData(animeData: Partial<Anime>): Promise<void> {\n    try {\n      // If we already have a trailer URL, keep it\n      if (animeData.trailer_url) {\n        console.log('🎬 Trailer already exists:', animeData.trailer_url)\n        return\n      }\n\n      console.log('🔍 Searching for trailer data for:', animeData.title)\n      \n      // Try to find trailer from Jikan\n      try {\n        const jikanResults = await this.searchJikanAnime(animeData.title!, 1)\n        if (jikanResults.length > 0) {\n          const jikanAnime = jikanResults[0]\n          if (jikanAnime.trailer?.embed_url || jikanAnime.trailer?.youtube_id) {\n            const jikanTrailerUrl = jikanAnime.trailer.embed_url || \n              (jikanAnime.trailer.youtube_id ? `https://www.youtube.com/embed/${jikanAnime.trailer.youtube_id}` : null)\n            \n            if (jikanTrailerUrl) {\n              console.log('🎬 Found trailer from Jikan:', jikanTrailerUrl)\n              animeData.trailer_url = jikanTrailerUrl\n              return\n            }\n          }\n        }\n      } catch (error) {\n        console.log('⚠️ Jikan trailer search failed:', error)\n      }\n\n      // Try to find trailer from AniList\n      try {\n        const anilistResults = await this.searchAniListAnime(animeData.title!, 1)\n        if (anilistResults.length > 0) {\n          const anilistAnime = anilistResults[0]\n          if (anilistAnime.trailer?.id) {\n            const anilistTrailerUrl = this.formatTrailerUrl(anilistAnime.trailer.id, anilistAnime.trailer.site)\n            console.log('🎬 Found trailer from AniList:', anilistTrailerUrl)\n            animeData.trailer_url = anilistTrailerUrl\n            return\n          }\n        }\n      } catch (error) {\n        console.log('⚠️ AniList trailer search failed:', error)\n      }\n\n      console.log('❌ No trailer found from any source')\n    } catch (error) {\n      console.error('Error enhancing trailer data:', error)\n    }\n  }\n\n  static async importAnimeWithRelations(anilistData: any): Promise<{ success: boolean, animeId?: string, relations?: any, characters?: any, studios?: any }> {\n    try {\n      // First import the main anime data\n      const animeData = this.mapAniListToDatabase(anilistData)\n      \n      // Enhance trailer data by checking both sources\n      await this.enhanceTrailerData(animeData)\n      \n      const { data: insertedAnime, error: insertError } = await supabase\n        .from('anime')\n        .insert(animeData)\n        .select()\n        .single()\n\n      if (insertError) {\n        console.error('Error inserting anime:', insertError)\n        throw insertError\n      }\n\n      const animeId = insertedAnime.id\n      console.log(`✅ Imported anime: ${animeData.title}`)\n\n      // Import relations, characters, and studios in parallel\n      const [relationsResult, charactersResult, studiosResult] = await Promise.all([\n        this.importAnimeRelations(animeId, anilistData),\n        this.importAnimeCharacters(animeId, anilistData),\n        this.importAnimeStudios(animeId, anilistData)\n      ])\n\n      return {\n        success: true,\n        animeId,\n        relations: relationsResult,\n        characters: charactersResult,\n        studios: studiosResult\n      }\n    } catch (error) {\n      console.error('Error importing anime with relations:', error)\n      return { success: false }\n    }\n  }\n\n  // Import anime from AniList data (enhanced with relations)\n  static async importAnimeFromAniList(anilistData: any): Promise<boolean> {\n    try {\n      console.log('🎬 Starting import for anime:', anilistData.title?.english || anilistData.title?.romaji)\n      console.log('📊 AniList data structure:', {\n        hasRelations: !!anilistData.relations?.edges,\n        relationsCount: anilistData.relations?.edges?.length || 0,\n        hasCharacters: !!anilistData.characters?.edges,\n        charactersCount: anilistData.characters?.edges?.length || 0,\n        hasStudios: !!anilistData.studios?.nodes,\n        studiosCount: anilistData.studios?.nodes?.length || 0\n      })\n      \n      const result = await this.importAnimeWithRelations(anilistData)\n      \n      if (result.success) {\n        console.log(`✅ Imported anime with relations: ${anilistData.title?.english || anilistData.title?.romaji}`)\n        if (result.relations) {\n          console.log(`📊 Relations: ${result.relations.success} imported, ${result.relations.errors} errors`)\n        }\n        if (result.characters) {\n          console.log(`👥 Characters: ${result.characters.success} imported, ${result.characters.errors} errors`)\n        }\n        if (result.studios) {\n          console.log(`🏢 Studios: ${result.studios.success} imported, ${result.studios.errors} errors`)\n        }\n        return true\n      }\n      \n      return false\n    } catch (error) {\n      console.error('Error importing anime from AniList:', error)\n      return false\n    }\n  }\n}\n","import React, { useState } from 'react'\r\nimport { AnimeImporterService } from '../../services/animeImporterService'\r\nimport Button from '../base/Button'\r\nimport Input from '../base/Input'\r\nimport LoadingSpinner from '../base/LoadingSpinner'\r\n\r\nexport const TrailerDebugger: React.FC = () => {\r\n  const [query, setQuery] = useState('Attack on Titan')\r\n  const [isLoading, setIsLoading] = useState(false)\r\n  const [results, setResults] = useState<any[]>([])\r\n\r\n  const testTrailers = async () => {\r\n    setIsLoading(true)\r\n    setResults([])\r\n    \r\n    try {\r\n      // Test both APIs\r\n      console.log('🧪 Starting trailer debug test...')\r\n      \r\n      const [jikanResults, anilistResults] = await Promise.all([\r\n        AnimeImporterService.searchJikanAnime(query, 3),\r\n        AnimeImporterService.searchAniListAnime(query, 3)\r\n      ])\r\n\r\n      const mappedJikan = jikanResults.map(anime => ({\r\n        source: 'Jikan',\r\n        title: anime.title,\r\n        originalTrailer: anime.trailer,\r\n        mappedTrailer: AnimeImporterService.mapJikanToDatabase(anime).trailer_url\r\n      }))\r\n\r\n      const mappedAnilist = anilistResults.map(anime => ({\r\n        source: 'AniList',\r\n        title: anime.title?.english || anime.title?.romaji,\r\n        originalTrailer: anime.trailer,\r\n        mappedTrailer: AnimeImporterService.mapAniListToDatabase(anime).trailer_url\r\n      }))\r\n\r\n      setResults([...mappedJikan, ...mappedAnilist])\r\n      \r\n      // Also run the built-in test function\r\n      await AnimeImporterService.testTrailerData(query)\r\n      \r\n    } catch (error) {\r\n      console.error('❌ Trailer test failed:', error)\r\n    } finally {\r\n      setIsLoading(false)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"p-6 bg-white rounded-lg shadow-lg\">\r\n      <h2 className=\"text-2xl font-bold mb-4\">🎬 Trailer Debugger</h2>\r\n      \r\n      <div className=\"mb-4\">\r\n        <Input\r\n          type=\"text\"\r\n          value={query}\r\n          onChange={(e) => setQuery(e.target.value)}\r\n          placeholder=\"Search query (e.g., Attack on Titan)\"\r\n          className=\"mb-2\"\r\n        />\r\n        <Button\r\n          onClick={testTrailers}\r\n          disabled={isLoading}\r\n          className=\"w-full\"\r\n        >\r\n          {isLoading ? <LoadingSpinner size=\"sm\" /> : '🧪 Test Trailer Data'}\r\n        </Button>\r\n      </div>\r\n\r\n      {results.length > 0 && (\r\n        <div className=\"space-y-4\">\r\n          <h3 className=\"text-lg font-semibold\">📊 Results:</h3>\r\n          {results.map((result, index) => (\r\n            <div key={index} className=\"p-4 border rounded-lg\">\r\n              <div className=\"font-semibold text-blue-600\">{result.source}: {result.title}</div>\r\n              <div className=\"mt-2\">\r\n                <div className=\"text-sm text-gray-600\">\r\n                  <strong>Original Trailer:</strong>\r\n                  <pre className=\"mt-1 p-2 bg-gray-100 rounded text-xs overflow-auto\">\r\n                    {JSON.stringify(result.originalTrailer, null, 2)}\r\n                  </pre>\r\n                </div>\r\n                <div className=\"text-sm text-gray-600 mt-2\">\r\n                  <strong>Mapped Trailer URL:</strong>\r\n                  <div className=\"mt-1 p-2 bg-green-100 rounded text-xs break-all\">\r\n                    {result.mappedTrailer || 'No trailer URL'}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      )}\r\n\r\n      <div className=\"mt-6 p-4 bg-blue-50 rounded-lg\">\r\n        <h4 className=\"font-semibold text-blue-800 mb-2\">🔍 Debug Instructions:</h4>\r\n        <ol className=\"text-sm text-blue-700 space-y-1\">\r\n          <li>1. Enter an anime name (e.g., \"Attack on Titan\", \"Demon Slayer\")</li>\r\n          <li>2. Click \"Test Trailer Data\"</li>\r\n          <li>3. Check console logs for detailed debug info</li>\r\n          <li>4. Look at the results above to see trailer data</li>\r\n          <li>5. Check if \"Mapped Trailer URL\" shows embed URLs</li>\r\n        </ol>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import React, { useState, useEffect } from 'react'\nimport { motion, AnimatePresence } from 'framer-motion'\nimport { AnimeImporterService } from '../../services/animeImporterService'\nimport Button from '../base/Button'\nimport Input from '../base/Input'\nimport LoadingSpinner from '../base/LoadingSpinner'\nimport Card from '../base/Card'\nimport { TrailerDebugger } from './TrailerDebugger'\nimport { supabase } from '../../lib/supabase'\n\ninterface ImportResult {\n  success: boolean\n  imported: number\n  skipped: number\n  errors: string[]\n  duplicates: string[]\n}\n\ninterface SearchResult {\n  title: string\n  title_japanese?: string\n  year?: number\n  status?: string\n  type?: string\n  genres?: string[]\n  rating?: number\n  poster_url?: string\n  description?: string\n  source: 'jikan' | 'anilist'\n  originalData: any\n}\n\ninterface ImportProgress {\n  total: number\n  completed: number\n  current: string\n  percentage: number\n}\n\nexport const EnhancedAnimeImporter: React.FC = () => {\n  const [searchQuery, setSearchQuery] = useState('')\n  const [searchResults, setSearchResults] = useState<SearchResult[]>([])\n  const [selectedAnime, setSelectedAnime] = useState<SearchResult[]>([])\n  const [isSearching, setIsSearching] = useState(false)\n  const [isImporting, setIsImporting] = useState(false)\n  const [importResult, setImportResult] = useState<ImportResult | null>(null)\n  const [source, setSource] = useState<'jikan' | 'anilist'>('jikan')\n  const [showPreview, setShowPreview] = useState(false)\n  const [importProgress, setImportProgress] = useState<ImportProgress | null>(null)\n  const [searchFilters, setSearchFilters] = useState({\n    year: '',\n    genre: '',\n    status: '',\n    rating: '',\n    sortBy: 'relevance'\n  })\n  const [batchSize, setBatchSize] = useState(5)\n  const [autoImport, setAutoImport] = useState(false)\n  const [importHistory, setImportHistory] = useState<any[]>([])\n  const [showAdvanced, setShowAdvanced] = useState(false)\n  const [activeTab, setActiveTab] = useState<'search' | 'trending' | 'seasonal' | 'debug'>('search')\n  const [message, setMessage] = useState<string | null>(null)\n\n  // Load import history on component mount\n  useEffect(() => {\n    loadImportHistory()\n  }, [])\n\n  const loadImportHistory = async () => {\n    try {\n      const history = JSON.parse(localStorage.getItem('animeImportHistory') || '[]')\n      setImportHistory(history)\n    } catch (error) {\n      console.error('Failed to load import history:', error)\n    }\n  }\n\n  const saveImportHistory = (result: ImportResult, query: string) => {\n    const historyItem = {\n      id: Date.now(),\n      query,\n      result,\n      timestamp: new Date().toISOString(),\n      source\n    }\n    \n    const newHistory = [historyItem, ...importHistory.slice(0, 9)]\n    setImportHistory(newHistory)\n    localStorage.setItem('animeImportHistory', JSON.stringify(newHistory))\n  }\n\n  const handleSearch = async () => {\n    if (!searchQuery.trim()) return\n\n    setIsSearching(true)\n    setSearchResults([])\n    setImportResult(null)\n\n    try {\n      let results: any[] = []\n      \n      if (source === 'jikan') {\n        results = await AnimeImporterService.searchJikanAnime(searchQuery, 25)\n      } else {\n        results = await AnimeImporterService.searchAniListAnime(searchQuery, 50)\n      }\n\n      const mappedResults: SearchResult[] = results.map(anime => {\n        const mapped = source === 'jikan' \n          ? AnimeImporterService.mapJikanToDatabase(anime)\n          : AnimeImporterService.mapAniListToDatabase(anime)\n        \n        return {\n          ...mapped,\n          source,\n          originalData: anime\n        } as SearchResult\n      })\n\n      const filteredResults = applyFiltersToResults(mappedResults)\n      setSearchResults(filteredResults)\n    } catch (error) {\n      console.error('Search error:', error)\n      alert(`Search failed: ${error instanceof Error ? error.message : 'Unknown error'}`)\n    } finally {\n      setIsSearching(false)\n    }\n  }\n\n  const applyFiltersToResults = (results: SearchResult[]): SearchResult[] => {\n    let filteredResults = results\n    \n    if (searchFilters.year) {\n      filteredResults = filteredResults.filter(anime => \n        anime.year === parseInt(searchFilters.year) || \n        anime.originalData.startDate?.year === parseInt(searchFilters.year)\n      )\n    }\n    \n    if (searchFilters.genre) {\n      filteredResults = filteredResults.filter(anime => \n        anime.genres?.some((g: string) => \n          g.toLowerCase().includes(searchFilters.genre.toLowerCase())\n        )\n      )\n    }\n    \n    if (searchFilters.status) {\n      filteredResults = filteredResults.filter(anime => \n        anime.status?.toLowerCase().includes(searchFilters.status.toLowerCase())\n      )\n    }\n    \n    if (searchFilters.rating) {\n      const minRating = parseFloat(searchFilters.rating)\n      filteredResults = filteredResults.filter(anime => \n        (anime.rating || anime.originalData.score || anime.originalData.averageScore) >= minRating\n      )\n    }\n\n    filteredResults.sort((a, b) => {\n      switch (searchFilters.sortBy) {\n        case 'rating':\n          return (b.rating || b.originalData.score || b.originalData.averageScore || 0) - \n                 (a.rating || a.originalData.score || a.originalData.averageScore || 0)\n        case 'year':\n          return (b.year || b.originalData.startDate?.year || 0) - \n                 (a.year || a.originalData.startDate?.year || 0)\n        case 'title':\n          return (a.title || '').localeCompare(b.title || '')\n        case 'popularity':\n          return (b.originalData.popularity || b.originalData.members || 0) - \n                 (a.originalData.popularity || a.originalData.members || 0)\n        default:\n          return 0\n      }\n    })\n\n    return filteredResults\n  }\n\n  const handleSelectAnime = (anime: SearchResult) => {\n    setSelectedAnime(prev => {\n      const isSelected = prev.some(selected => \n        selected.title === anime.title && selected.source === anime.source\n      )\n      \n      if (isSelected) {\n        return prev.filter(selected => \n          !(selected.title === anime.title && selected.source === anime.source)\n        )\n      } else {\n        return [...prev, anime]\n      }\n    })\n  }\n\n  const handleBulkImport = async () => {\n    if (selectedAnime.length === 0) {\n      alert('Please select at least one anime to import')\n      return\n    }\n\n    setIsImporting(true)\n    setImportResult(null)\n    setImportProgress({\n      total: selectedAnime.length,\n      completed: 0,\n      current: '',\n      percentage: 0\n    })\n\n    try {\n      const results: ImportResult = {\n        success: true,\n        imported: 0,\n        skipped: 0,\n        errors: [],\n        duplicates: []\n      }\n\n      const batchSize = 3\n      for (let i = 0; i < selectedAnime.length; i += batchSize) {\n        const batch = selectedAnime.slice(i, i + batchSize)\n        \n        const batchPromises = batch.map(async (anime, batchIndex) => {\n          try {\n            const mappedData = anime.source === 'jikan' \n              ? AnimeImporterService.mapJikanToDatabase(anime.originalData)\n              : AnimeImporterService.mapAniListToDatabase(anime.originalData)\n\n            const imported = anime.source === 'anilist' \n              ? await AnimeImporterService.importAnimeFromAniList(anime.originalData)\n              : await AnimeImporterService.importAnime(mappedData)\n            return {\n              success: !!imported,\n              title: anime.title,\n              isDuplicate: !imported\n            }\n          } catch (error) {\n            return {\n              success: false,\n              title: anime.title,\n              error: error instanceof Error ? error.message : 'Unknown error'\n            }\n          }\n        })\n\n        const batchResults = await Promise.all(batchPromises)\n        \n        batchResults.forEach((result, batchIndex) => {\n          setImportProgress(prev => prev ? {\n            ...prev,\n            current: result.title,\n            completed: prev.completed + 1,\n            percentage: Math.round(((prev.completed + 1) / prev.total) * 100)\n          } : null)\n\n          if (result.success) {\n            results.imported++\n          } else if (result.isDuplicate) {\n            results.skipped++\n            results.duplicates.push(result.title)\n          } else {\n            results.errors.push(`${result.title}: ${result.error}`)\n          }\n        })\n\n        if (i + batchSize < selectedAnime.length) {\n          await new Promise(resolve => setTimeout(resolve, 300))\n        }\n      }\n\n      setImportResult(results)\n      saveImportHistory(results, searchQuery)\n      setSelectedAnime([])\n      setSearchResults([])\n    } catch (error) {\n      console.error('Import error:', error)\n      alert(`Import failed: ${error instanceof Error ? error.message : 'Unknown error'}`)\n    } finally {\n      setIsImporting(false)\n      setImportProgress(null)\n    }\n  }\n\n  const handleQuickImport = async (anime: SearchResult) => {\n    setIsImporting(true)\n    setImportResult(null)\n\n    try {\n      const mappedData = anime.source === 'jikan' \n        ? AnimeImporterService.mapJikanToDatabase(anime.originalData)\n        : AnimeImporterService.mapAniListToDatabase(anime.originalData)\n\n      const imported = anime.source === 'anilist' \n        ? await AnimeImporterService.importAnimeFromAniList(anime.originalData)\n        : await AnimeImporterService.importAnime(mappedData)\n      \n      if (imported) {\n        const result = {\n          success: true,\n          imported: 1,\n          skipped: 0,\n          errors: [],\n          duplicates: []\n        }\n        \n        setImportResult(result)\n        saveImportHistory(result, anime.title)\n        \n        setSearchResults(prev => prev.filter(result => \n          !(result.title === anime.title && result.source === anime.source)\n        ))\n      } else {\n        setImportResult({\n          success: false,\n          imported: 0,\n          skipped: 1,\n          errors: [],\n          duplicates: [anime.title]\n        })\n      }\n    } catch (error) {\n      setImportResult({\n        success: false,\n        imported: 0,\n        skipped: 0,\n        errors: [`${anime.title}: ${error instanceof Error ? error.message : 'Unknown error'}`],\n        duplicates: []\n      })\n    } finally {\n      setIsImporting(false)\n    }\n  }\n\n  const handleTrendingImport = async () => {\n    setIsSearching(true)\n    setSearchResults([])\n    setImportResult(null)\n\n    try {\n      let mappedResults: SearchResult[]\n      \n      if (source === 'anilist') {\n        const results = await AnimeImporterService.getTrendingAniListAnime(25)\n        mappedResults = results.map(anime => ({\n          ...AnimeImporterService.mapAniListToDatabase(anime),\n          source: 'anilist' as const,\n          originalData: anime\n        }))\n      } else {\n        const results = await AnimeImporterService.getTrendingJikanAnime(25)\n        mappedResults = results.map(anime => ({\n          ...AnimeImporterService.mapJikanToDatabase(anime),\n          source: 'jikan' as const,\n          originalData: anime\n        }))\n      }\n\n      const filteredResults = applyFiltersToResults(mappedResults)\n      setSearchResults(filteredResults)\n    } catch (error) {\n      console.error('Trending import error:', error)\n      alert(`Failed to fetch trending anime: ${error instanceof Error ? error.message : 'Unknown error'}`)\n    } finally {\n      setIsSearching(false)\n    }\n  }\n\n  const handleSeasonalImport = async () => {\n    const currentDate = new Date()\n    const year = currentDate.getFullYear()\n    const month = currentDate.getMonth() + 1\n    \n    let season = 'winter'\n    if (month >= 3 && month <= 5) season = 'spring'\n    else if (month >= 6 && month <= 8) season = 'summer'\n    else if (month >= 9 && month <= 11) season = 'fall'\n\n    setIsSearching(true)\n    setSearchResults([])\n    setImportResult(null)\n\n    try {\n      let mappedResults: SearchResult[]\n      \n      if (source === 'anilist') {\n        const results = await AnimeImporterService.getSeasonalAniListAnime(year, season, 25)\n        mappedResults = results.map(anime => ({\n          ...AnimeImporterService.mapAniListToDatabase(anime),\n          source: 'anilist' as const,\n          originalData: anime\n        }))\n      } else {\n        const results = await AnimeImporterService.getSeasonalJikanAnime(year, season, 25)\n        mappedResults = results.map(anime => ({\n          ...AnimeImporterService.mapJikanToDatabase(anime),\n          source: 'jikan' as const,\n          originalData: anime\n        }))\n      }\n\n      const filteredResults = applyFiltersToResults(mappedResults)\n      setSearchResults(filteredResults)\n    } catch (error) {\n      console.error('Seasonal import error:', error)\n      alert(`Failed to fetch seasonal anime: ${error instanceof Error ? error.message : 'Unknown error'}`)\n    } finally {\n      setIsSearching(false)\n    }\n  }\n\n  const handleSelectAll = () => {\n    if (selectedAnime.length === searchResults.length) {\n      setSelectedAnime([])\n    } else {\n      setSelectedAnime([...searchResults])\n    }\n  }\n\n  const handleClearFilters = () => {\n    setSearchFilters({\n      year: '',\n      genre: '',\n      status: '',\n      rating: '',\n      sortBy: 'relevance'\n    })\n  }\n\n  const handleApplyFilters = async () => {\n    if (!searchQuery.trim()) {\n      await handleTrendingImport()\n      return\n    }\n    await handleSearch()\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-purple-50 via-blue-50 to-indigo-100\">\n      <div className=\"container mx-auto px-4 py-8\">\n        {/* Header */}\n        <motion.div \n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          className=\"text-center mb-8\"\n        >\n          <h1 className=\"text-4xl font-bold bg-gradient-to-r from-purple-600 to-blue-600 bg-clip-text text-transparent mb-4\">\n            🎌 Anime Import Hub\n          </h1>\n          <p className=\"text-gray-600 text-lg\">\n            Discover, import, and manage your anime collection with advanced features\n          </p>\n        </motion.div>\n\n        {/* Main Import Interface */}\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.2 }}\n          className=\"bg-white/80 backdrop-blur-sm rounded-3xl shadow-2xl border border-white/20 overflow-hidden\"\n        >\n          {/* Tab Navigation */}\n          <div className=\"bg-gradient-to-r from-purple-600 to-blue-600 p-6\">\n            <div className=\"flex space-x-1 bg-white/20 rounded-2xl p-1\">\n              {[\n                { id: 'search', label: '🔍 Search Anime', icon: '🔍' },\n                { id: 'trending', label: '🔥 Trending', icon: '🔥' },\n                { id: 'seasonal', label: '🌸 Seasonal', icon: '🌸' },\n                { id: 'debug', label: '🧪 Debug', icon: '🧪' }\n              ].map((tab) => (\n                <button\n                  key={tab.id}\n                  onClick={() => setActiveTab(tab.id as any)}\n                  className={`flex-1 px-6 py-3 rounded-xl font-medium transition-all duration-200 ${\n                    activeTab === tab.id\n                      ? 'bg-white text-purple-600 shadow-lg'\n                      : 'text-white hover:bg-white/10'\n                  }`}\n                >\n                  <span className=\"mr-2\">{tab.icon}</span>\n                  {tab.label}\n                </button>\n              ))}\n            </div>\n          </div>\n\n          <div className=\"p-8\">\n            <AnimatePresence mode=\"wait\">\n              {activeTab === 'search' && (\n                <motion.div\n                  key=\"search\"\n                  initial={{ opacity: 0, x: -20 }}\n                  animate={{ opacity: 1, x: 0 }}\n                  exit={{ opacity: 0, x: 20 }}\n                  className=\"space-y-6\"\n                >\n                  {/* Search Controls */}\n                  <div className=\"bg-gradient-to-r from-blue-50 to-purple-50 rounded-2xl p-6 border border-blue-200\">\n                    <div className=\"flex flex-col lg:flex-row gap-4\">\n                      <div className=\"flex-1\">\n                        <label className=\"block text-sm font-semibold text-gray-700 mb-3\">\n                          🎯 Search Query\n                        </label>\n                        <Input\n                          type=\"text\"\n                          value={searchQuery}\n                          onChange={(e) => setSearchQuery(e.target.value)}\n                          placeholder=\"Search for anime (e.g., Attack on Titan, Demon Slayer)\"\n                          onKeyPress={(e) => e.key === 'Enter' && handleSearch()}\n                          className=\"w-full px-4 py-3 rounded-xl border-2 border-blue-200 focus:border-purple-500 focus:ring-4 focus:ring-purple-200 transition-all\"\n                        />\n                      </div>\n                      \n                      <div className=\"lg:w-48\">\n                        <label className=\"block text-sm font-semibold text-gray-700 mb-3\">\n                          📡 Data Source\n                        </label>\n                        <select\n                          value={source}\n                          onChange={(e) => setSource(e.target.value as 'jikan' | 'anilist')}\n                          className=\"w-full px-4 py-3 rounded-xl border-2 border-blue-200 focus:border-purple-500 focus:ring-4 focus:ring-purple-200 transition-all\"\n                        >\n                          <option value=\"jikan\">Jikan (MyAnimeList)</option>\n                          <option value=\"anilist\">AniList</option>\n                        </select>\n                      </div>\n                      \n                      <div className=\"lg:w-32 flex items-end\">\n                        <Button\n                          onClick={handleSearch}\n                          disabled={isSearching || !searchQuery.trim()}\n                          className=\"w-full px-6 py-3 bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700 text-white rounded-xl font-semibold shadow-lg hover:shadow-xl transition-all duration-200 transform hover:scale-105\"\n                        >\n                          {isSearching ? (\n                            <div className=\"flex items-center justify-center\">\n                              <LoadingSpinner size=\"sm\" />\n                              <span className=\"ml-2\">Searching...</span>\n                            </div>\n                          ) : (\n                            '🔍 Search'\n                          )}\n                        </Button>\n                      </div>\n                    </div>\n                  </div>\n                </motion.div>\n              )}\n\n              {activeTab === 'trending' && (\n                <motion.div\n                  key=\"trending\"\n                  initial={{ opacity: 0, x: -20 }}\n                  animate={{ opacity: 1, x: 0 }}\n                  exit={{ opacity: 0, x: 20 }}\n                  className=\"space-y-6\"\n                >\n                  <div className=\"text-center\">\n                    <h3 className=\"text-2xl font-bold text-gray-800 mb-4\">🔥 Trending Anime</h3>\n                    <p className=\"text-gray-600 mb-6\">Discover the most popular anime right now</p>\n                    <Button\n                      onClick={handleTrendingImport}\n                      disabled={isSearching}\n                      className=\"px-8 py-4 bg-gradient-to-r from-orange-500 to-red-500 hover:from-orange-600 hover:to-red-600 text-white rounded-xl font-semibold shadow-lg hover:shadow-xl transition-all duration-200 transform hover:scale-105\"\n                    >\n                      {isSearching ? (\n                        <div className=\"flex items-center\">\n                          <LoadingSpinner size=\"sm\" />\n                          <span className=\"ml-2\">Loading...</span>\n                        </div>\n                      ) : (\n                        '🔥 Load Trending Anime'\n                      )}\n                    </Button>\n                  </div>\n                </motion.div>\n              )}\n\n              {activeTab === 'seasonal' && (\n                <motion.div\n                  key=\"seasonal\"\n                  initial={{ opacity: 0, x: -20 }}\n                  animate={{ opacity: 1, x: 0 }}\n                  exit={{ opacity: 0, x: 20 }}\n                  className=\"space-y-6\"\n                >\n                  <div className=\"text-center\">\n                    <h3 className=\"text-2xl font-bold text-gray-800 mb-4\">🌸 Current Season</h3>\n                    <p className=\"text-gray-600 mb-6\">Explore anime from the current season</p>\n                    <Button\n                      onClick={handleSeasonalImport}\n                      disabled={isSearching}\n                      className=\"px-8 py-4 bg-gradient-to-r from-green-500 to-teal-500 hover:from-green-600 hover:to-teal-600 text-white rounded-xl font-semibold shadow-lg hover:shadow-xl transition-all duration-200 transform hover:scale-105\"\n                    >\n                      {isSearching ? (\n                        <div className=\"flex items-center\">\n                          <LoadingSpinner size=\"sm\" />\n                          <span className=\"ml-2\">Loading...</span>\n                        </div>\n                      ) : (\n                        '🌸 Load Current Season'\n                      )}\n                    </Button>\n                  </div>\n                </motion.div>\n              )}\n\n              {activeTab === 'debug' && (\n                <motion.div\n                  key=\"debug\"\n                  initial={{ opacity: 0, x: -20 }}\n                  animate={{ opacity: 1, x: 0 }}\n                  exit={{ opacity: 0, x: 20 }}\n                  className=\"space-y-6\"\n                >\n                  <TrailerDebugger />\n                  \n                  {/* Characters Debug Section */}\n                  <Card className=\"p-6\">\n                    <h3 className=\"text-xl font-bold text-gray-800 mb-4 flex items-center\">\n                      🎭 Characters Debug\n                    </h3>\n                    <p className=\"text-gray-600 mb-4\">\n                      Test character import and check database status.\n                    </p>\n                    \n                    {/* Message Display */}\n                    {message && (\n                      <div className={`p-4 rounded-xl mb-4 ${\n                        message.includes('Error') || message.includes('error')\n                          ? 'bg-red-50 border border-red-200 text-red-700' \n                          : 'bg-green-50 border border-green-200 text-green-700'\n                      }`}>\n                        <p className=\"font-medium\">{message}</p>\n                      </div>\n                    )}\n                    \n                    <div className=\"flex gap-4\">\n                      <Button\n                        onClick={async () => {\n                          try {\n                            const { data, error } = await supabase\n                              .from('anime_characters')\n                              .select('*')\n                              .limit(5)\n                            \n                            if (error) {\n                              console.error('Error checking characters table:', error)\n                              setMessage(`Characters table error: ${error.message}`)\n                            } else {\n                              console.log('Characters table data:', data)\n                              setMessage(`Characters table OK. Found ${data?.length || 0} characters.`)\n                            }\n                          } catch (err) {\n                            console.error('Error:', err)\n                            setMessage(`Error: ${err}`)\n                          }\n                        }}\n                        className=\"bg-gradient-to-r from-blue-500 to-purple-500 hover:from-blue-600 hover:to-purple-600 text-white px-4 py-2 rounded-xl font-semibold transition-all duration-300\"\n                      >\n                        🔍 Check Characters Table\n                      </Button>\n                      \n                      <Button\n                        onClick={async () => {\n                          try {\n                            const { data, error } = await supabase\n                              .from('anime')\n                              .select('id, title')\n                              .limit(1)\n                            \n                            if (error) {\n                              console.error('Error checking anime table:', error)\n                              setMessage(`Anime table error: ${error.message}`)\n                            } else if (data && data.length > 0) {\n                              const animeId = data[0].id\n                              const { data: characters, error: charError } = await supabase\n                                .from('anime_characters')\n                                .select('*')\n                                .eq('anime_id', animeId)\n                              \n                              if (charError) {\n                                console.error('Error fetching characters:', charError)\n                                setMessage(`Error fetching characters: ${charError.message}`)\n                              } else {\n                                console.log(`Characters for ${data[0].title}:`, characters)\n                                setMessage(`Found ${characters?.length || 0} characters for \"${data[0].title}\"`)\n                              }\n                            } else {\n                              setMessage('No anime found in database')\n                            }\n                          } catch (err) {\n                            console.error('Error:', err)\n                            setMessage(`Error: ${err}`)\n                          }\n                        }}\n                        className=\"bg-gradient-to-r from-green-500 to-teal-500 hover:from-green-600 hover:to-teal-600 text-white px-4 py-2 rounded-xl font-semibold transition-all duration-300\"\n                      >\n                        👥 Check Sample Characters\n                      </Button>\n                      \n                      <Button\n                        onClick={async () => {\n                          try {\n                            setMessage('Testing AniList character fetch...')\n                            \n                            // Test AniList API directly\n                            const testQuery = `\n                              query {\n                                Media(search: \"Attack on Titan\", type: ANIME) {\n                                  id\n                                  title { romaji english native }\n                                  characters(sort: [ROLE, RELEVANCE], perPage: 50) {\n                                    edges {\n                                      id\n                                      role\n                                      node {\n                                        id\n                                        name { full native alternative }\n                                        image { large medium }\n                                        description\n                                      }\n                                    }\n                                  }\n                                }\n                              }\n                            `\n                            \n                            const response = await fetch('https://graphql.anilist.co', {\n                              method: 'POST',\n                              headers: { 'Content-Type': 'application/json' },\n                              body: JSON.stringify({ query: testQuery })\n                            })\n                            \n                            const data = await response.json()\n                            console.log('AniList test response:', data)\n                            \n                            if (data.data?.Media?.characters?.edges) {\n                              const characters = data.data.Media.characters.edges\n                              setMessage(`✅ AniList API working! Found ${characters.length} characters for \"Attack on Titan\"`)\n                            } else {\n                              setMessage('❌ No characters found in AniList response')\n                            }\n                          } catch (err) {\n                            console.error('AniList test error:', err)\n                            setMessage(`❌ AniList API test failed: ${err}`)\n                          }\n                        }}\n                        className=\"bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-600 hover:to-pink-600 text-white px-4 py-2 rounded-xl font-semibold transition-all duration-300\"\n                      >\n                        🧪 Test AniList API\n                      </Button>\n                    </div>\n                  </Card>\n                </motion.div>\n              )}\n            </AnimatePresence>\n\n            {/* Advanced Filters */}\n            <motion.div\n              initial={{ opacity: 0 }}\n              animate={{ opacity: 1 }}\n              transition={{ delay: 0.4 }}\n              className=\"mt-8\"\n            >\n              <div className=\"flex justify-between items-center mb-4\">\n                <Button\n                  onClick={() => setShowAdvanced(!showAdvanced)}\n                  variant=\"secondary\"\n                  className=\"px-4 py-2 rounded-xl border-2 border-purple-200 hover:border-purple-400 transition-all\"\n                >\n                  {showAdvanced ? '🔽 Hide Advanced' : '🔼 Show Advanced'}\n                </Button>\n              </div>\n\n              <AnimatePresence>\n                {showAdvanced && (\n                  <motion.div\n                    initial={{ opacity: 0, height: 0 }}\n                    animate={{ opacity: 1, height: 'auto' }}\n                    exit={{ opacity: 0, height: 0 }}\n                    className=\"bg-gradient-to-r from-purple-50 to-blue-50 rounded-2xl p-6 border border-purple-200 overflow-hidden\"\n                  >\n                    <h3 className=\"text-xl font-semibold mb-4 text-gray-800\">🔧 Advanced Filters</h3>\n                    <div className=\"grid grid-cols-1 md:grid-cols-5 gap-4\">\n                      <div>\n                        <label className=\"block text-sm font-medium text-gray-700 mb-2\">Year</label>\n                        <Input\n                          type=\"number\"\n                          value={searchFilters.year}\n                          onChange={(e) => setSearchFilters({...searchFilters, year: e.target.value})}\n                          placeholder=\"2023\"\n                          className=\"rounded-xl border-2 border-purple-200 focus:border-purple-500\"\n                        />\n                      </div>\n                      <div>\n                        <label className=\"block text-sm font-medium text-gray-700 mb-2\">Genre</label>\n                        <Input\n                          type=\"text\"\n                          value={searchFilters.genre}\n                          onChange={(e) => setSearchFilters({...searchFilters, genre: e.target.value})}\n                          placeholder=\"Action\"\n                          className=\"rounded-xl border-2 border-purple-200 focus:border-purple-500\"\n                        />\n                      </div>\n                      <div>\n                        <label className=\"block text-sm font-medium text-gray-700 mb-2\">Status</label>\n                        <select\n                          value={searchFilters.status}\n                          onChange={(e) => setSearchFilters({...searchFilters, status: e.target.value})}\n                          className=\"w-full px-3 py-2 rounded-xl border-2 border-purple-200 focus:border-purple-500 focus:ring-4 focus:ring-purple-200\"\n                        >\n                          <option value=\"\">All</option>\n                          <option value=\"ongoing\">Ongoing</option>\n                          <option value=\"completed\">Completed</option>\n                          <option value=\"upcoming\">Upcoming</option>\n                        </select>\n                      </div>\n                      <div>\n                        <label className=\"block text-sm font-medium text-gray-700 mb-2\">Min Rating</label>\n                        <Input\n                          type=\"number\"\n                          step=\"0.1\"\n                          min=\"0\"\n                          max=\"10\"\n                          value={searchFilters.rating}\n                          onChange={(e) => setSearchFilters({...searchFilters, rating: e.target.value})}\n                          placeholder=\"8.0\"\n                          className=\"rounded-xl border-2 border-purple-200 focus:border-purple-500\"\n                        />\n                      </div>\n                      <div>\n                        <label className=\"block text-sm font-medium text-gray-700 mb-2\">Sort By</label>\n                        <select\n                          value={searchFilters.sortBy}\n                          onChange={(e) => setSearchFilters({...searchFilters, sortBy: e.target.value})}\n                          className=\"w-full px-3 py-2 rounded-xl border-2 border-purple-200 focus:border-purple-500 focus:ring-4 focus:ring-purple-200\"\n                        >\n                          <option value=\"relevance\">Relevance</option>\n                          <option value=\"rating\">Rating</option>\n                          <option value=\"year\">Year</option>\n                          <option value=\"title\">Title</option>\n                          <option value=\"popularity\">Popularity</option>\n                        </select>\n                      </div>\n                    </div>\n                    <div className=\"flex gap-3 mt-6\">\n                      <Button\n                        onClick={handleClearFilters}\n                        variant=\"secondary\"\n                        className=\"px-4 py-2 rounded-xl\"\n                      >\n                        🗑️ Clear Filters\n                      </Button>\n                      <Button\n                        onClick={handleApplyFilters}\n                        disabled={isSearching}\n                        className=\"px-4 py-2 bg-gradient-to-r from-purple-600 to-blue-600 text-white rounded-xl\"\n                      >\n                        🔍 Apply Filters\n                      </Button>\n                    </div>\n                  </motion.div>\n                )}\n              </AnimatePresence>\n            </motion.div>\n\n            {/* Import Settings */}\n            <motion.div\n              initial={{ opacity: 0 }}\n              animate={{ opacity: 1 }}\n              transition={{ delay: 0.6 }}\n              className=\"mt-8\"\n            >\n              <div className=\"bg-gradient-to-r from-green-50 to-blue-50 rounded-2xl p-6 border border-green-200\">\n                <h3 className=\"text-xl font-semibold mb-4 text-gray-800\">⚙️ Import Settings</h3>\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">Batch Size</label>\n                    <Input\n                      type=\"number\"\n                      min=\"1\"\n                      max=\"20\"\n                      value={batchSize}\n                      onChange={(e) => setBatchSize(parseInt(e.target.value) || 5)}\n                      className=\"rounded-xl border-2 border-green-200 focus:border-green-500\"\n                    />\n                  </div>\n                  <div className=\"flex items-center\">\n                    <label className=\"flex items-center cursor-pointer\">\n                      <input\n                        type=\"checkbox\"\n                        checked={autoImport}\n                        onChange={(e) => setAutoImport(e.target.checked)}\n                        className=\"w-5 h-5 text-green-600 bg-gray-100 border-gray-300 rounded focus:ring-green-500 focus:ring-2\"\n                      />\n                      <span className=\"ml-3 text-sm font-medium text-gray-700\">Auto Import</span>\n                    </label>\n                  </div>\n                  <div className=\"flex items-center\">\n                    <label className=\"flex items-center cursor-pointer\">\n                      <input\n                        type=\"checkbox\"\n                        checked={showPreview}\n                        onChange={(e) => setShowPreview(e.target.checked)}\n                        className=\"w-5 h-5 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500 focus:ring-2\"\n                      />\n                      <span className=\"ml-3 text-sm font-medium text-gray-700\">Show Preview</span>\n                    </label>\n                  </div>\n                </div>\n              </div>\n            </motion.div>\n\n            {/* Import Progress */}\n            <AnimatePresence>\n              {importProgress && (\n                <motion.div\n                  initial={{ opacity: 0, scale: 0.95 }}\n                  animate={{ opacity: 1, scale: 1 }}\n                  exit={{ opacity: 0, scale: 0.95 }}\n                  className=\"mt-8\"\n                >\n                  <div className=\"bg-gradient-to-r from-blue-50 to-purple-50 rounded-2xl p-6 border border-blue-200\">\n                    <h3 className=\"text-xl font-semibold mb-4 text-gray-800\">📊 Import Progress</h3>\n                    <div className=\"space-y-4\">\n                      <div className=\"flex justify-between text-sm font-medium\">\n                        <span>Progress: {importProgress.completed}/{importProgress.total}</span>\n                        <span>{importProgress.percentage}%</span>\n                      </div>\n                      <div className=\"w-full bg-gray-200 rounded-full h-3 overflow-hidden\">\n                        <motion.div \n                          className=\"bg-gradient-to-r from-blue-500 to-purple-500 h-3 rounded-full\"\n                          initial={{ width: 0 }}\n                          animate={{ width: `${importProgress.percentage}%` }}\n                          transition={{ duration: 0.5 }}\n                        />\n                      </div>\n                      <div className=\"text-sm text-gray-600\">\n                        Currently importing: <span className=\"font-semibold text-purple-600\">{importProgress.current}</span>\n                      </div>\n                    </div>\n                  </div>\n                </motion.div>\n              )}\n            </AnimatePresence>\n\n            {/* Import Results */}\n            <AnimatePresence>\n              {importResult && (\n                <motion.div\n                  initial={{ opacity: 0, y: 20 }}\n                  animate={{ opacity: 1, y: 0 }}\n                  exit={{ opacity: 0, y: -20 }}\n                  className=\"mt-8\"\n                >\n                  <div className=\"bg-gradient-to-r from-green-50 to-blue-50 rounded-2xl p-6 border border-green-200\">\n                    <h3 className=\"text-xl font-semibold mb-4 text-gray-800\">📈 Import Results</h3>\n                    <div className=\"grid grid-cols-3 gap-4 mb-4\">\n                      <div className=\"text-center p-4 bg-green-100 rounded-xl\">\n                        <div className=\"text-2xl font-bold text-green-600\">{importResult.imported}</div>\n                        <div className=\"text-sm text-green-700\">Imported</div>\n                      </div>\n                      <div className=\"text-center p-4 bg-yellow-100 rounded-xl\">\n                        <div className=\"text-2xl font-bold text-yellow-600\">{importResult.skipped}</div>\n                        <div className=\"text-sm text-yellow-700\">Skipped</div>\n                      </div>\n                      <div className=\"text-center p-4 bg-red-100 rounded-xl\">\n                        <div className=\"text-2xl font-bold text-red-600\">{importResult.errors.length}</div>\n                        <div className=\"text-sm text-red-700\">Errors</div>\n                      </div>\n                    </div>\n                    \n                    {importResult.duplicates.length > 0 && (\n                      <div className=\"mb-4\">\n                        <p className=\"text-sm font-medium text-gray-700 mb-2\">Duplicates found:</p>\n                        <div className=\"flex flex-wrap gap-2\">\n                          {importResult.duplicates.map((title, index) => (\n                            <span key={index} className=\"px-3 py-1 bg-yellow-100 text-yellow-800 rounded-full text-sm\">\n                              {title}\n                            </span>\n                          ))}\n                        </div>\n                      </div>\n                    )}\n                    \n                    {importResult.errors.length > 0 && (\n                      <div>\n                        <p className=\"text-sm font-medium text-gray-700 mb-2\">Errors:</p>\n                        <div className=\"space-y-1\">\n                          {importResult.errors.map((error, index) => (\n                            <div key={index} className=\"text-sm text-red-600 bg-red-50 p-2 rounded-lg\">\n                              • {error}\n                            </div>\n                          ))}\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                </motion.div>\n              )}\n            </AnimatePresence>\n          </div>\n        </motion.div>\n\n        {/* Search Results */}\n        <AnimatePresence>\n          {searchResults.length > 0 && (\n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: 0.4 }}\n              className=\"mt-8\"\n            >\n              <div className=\"bg-white/80 backdrop-blur-sm rounded-3xl shadow-2xl border border-white/20 overflow-hidden\">\n                <div className=\"bg-gradient-to-r from-purple-600 to-blue-600 p-6\">\n                  <div className=\"flex justify-between items-center\">\n                    <h3 className=\"text-2xl font-bold text-white\">\n                      📋 Search Results ({searchResults.length})\n                    </h3>\n                    <div className=\"flex gap-3\">\n                      <Button\n                        onClick={handleSelectAll}\n                        variant=\"secondary\"\n                        className=\"bg-white/20 hover:bg-white/30 text-white border-white/30\"\n                      >\n                        {selectedAnime.length === searchResults.length ? '❌ Deselect All' : '✅ Select All'}\n                      </Button>\n                      <Button\n                        onClick={() => setShowPreview(!showPreview)}\n                        variant=\"secondary\"\n                        className=\"bg-white/20 hover:bg-white/30 text-white border-white/30\"\n                      >\n                        {showPreview ? '👁️ Hide Preview' : '👁️ Show Preview'}\n                      </Button>\n                      {selectedAnime.length > 0 && (\n                        <Button\n                          onClick={handleBulkImport}\n                          disabled={isImporting}\n                          className=\"bg-white text-purple-600 hover:bg-gray-50 font-semibold px-6 py-2 rounded-xl shadow-lg hover:shadow-xl transition-all transform hover:scale-105\"\n                        >\n                          {isImporting ? (\n                            <div className=\"flex items-center\">\n                              <LoadingSpinner size=\"sm\" />\n                              <span className=\"ml-2\">Importing...</span>\n                            </div>\n                          ) : (\n                            `📥 Import Selected (${selectedAnime.length})`\n                          )}\n                        </Button>\n                      )}\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"p-8\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n                    {searchResults.map((anime, index) => {\n                      const isSelected = selectedAnime.some(selected => \n                        selected.title === anime.title && selected.source === anime.source\n                      )\n                      \n                      return (\n                        <motion.div\n                          key={`${anime.title}-${anime.source}-${index}`}\n                          initial={{ opacity: 0, y: 20 }}\n                          animate={{ opacity: 1, y: 0 }}\n                          transition={{ delay: index * 0.1 }}\n                          className=\"group\"\n                        >\n                          <div className={`relative bg-white rounded-2xl shadow-lg hover:shadow-2xl transition-all duration-300 transform hover:scale-105 border-2 ${\n                            isSelected ? 'border-purple-500 shadow-purple-200' : 'border-gray-200 hover:border-purple-300'\n                          } overflow-hidden`}>\n                            {anime.poster_url && (\n                              <div className=\"relative h-48 overflow-hidden\">\n                                <img\n                                  src={anime.poster_url}\n                                  alt={anime.title}\n                                  className=\"w-full h-full object-cover group-hover:scale-110 transition-transform duration-300\"\n                                  onError={(e) => {\n                                    e.currentTarget.style.display = 'none'\n                                  }}\n                                />\n                                <div className=\"absolute top-2 right-2 bg-black/50 text-white px-2 py-1 rounded-lg text-xs\">\n                                  {anime.source.toUpperCase()}\n                                </div>\n                                {isSelected && (\n                                  <div className=\"absolute top-2 left-2 bg-purple-500 text-white p-2 rounded-full\">\n                                    ✓\n                                  </div>\n                                )}\n                              </div>\n                            )}\n                            \n                            <div className=\"p-4\">\n                              <h4 className=\"font-bold text-lg mb-2 line-clamp-2 group-hover:text-purple-600 transition-colors\">\n                                {anime.title}\n                              </h4>\n                              {anime.title_japanese && (\n                                <p className=\"text-sm text-gray-500 mb-2 line-clamp-1\">{anime.title_japanese}</p>\n                              )}\n                              <div className=\"flex items-center justify-between text-sm text-gray-600 mb-3\">\n                                <div className=\"flex items-center space-x-2\">\n                                  {anime.year && <span className=\"bg-blue-100 text-blue-800 px-2 py-1 rounded-full\">{anime.year}</span>}\n                                  {anime.type && <span className=\"bg-green-100 text-green-800 px-2 py-1 rounded-full\">{anime.type}</span>}\n                                </div>\n                                {anime.rating && (\n                                  <div className=\"flex items-center text-yellow-600\">\n                                    <span className=\"text-xs\">⭐</span>\n                                    <span className=\"font-semibold ml-1\">{anime.rating}/10</span>\n                                  </div>\n                                )}\n                              </div>\n                              {anime.genres && anime.genres.length > 0 && (\n                                <div className=\"flex flex-wrap gap-1 mb-4\">\n                                  {anime.genres.slice(0, 3).map((genre, idx) => (\n                                    <span key={idx} className=\"text-xs bg-purple-100 text-purple-700 px-2 py-1 rounded-full\">\n                                      {genre}\n                                    </span>\n                                  ))}\n                                </div>\n                              )}\n\n                              <div className=\"flex gap-2\">\n                                <Button\n                                  onClick={() => handleSelectAnime(anime)}\n                                  className={`flex-1 px-3 py-2 rounded-xl font-medium transition-all ${\n                                    isSelected \n                                      ? 'bg-purple-500 text-white hover:bg-purple-600' \n                                      : 'bg-gray-100 text-gray-700 hover:bg-gray-200'\n                                  }`}\n                                >\n                                  {isSelected ? '✅ Selected' : '📋 Select'}\n                                </Button>\n                                <Button\n                                  onClick={() => handleQuickImport(anime)}\n                                  disabled={isImporting}\n                                  className=\"px-3 py-2 bg-gradient-to-r from-blue-500 to-purple-500 hover:from-blue-600 hover:to-purple-600 text-white rounded-xl font-medium transition-all transform hover:scale-105\"\n                                >\n                                  📥\n                                </Button>\n                              </div>\n\n                              {showPreview && anime.description && (\n                                <motion.div\n                                  initial={{ opacity: 0, height: 0 }}\n                                  animate={{ opacity: 1, height: 'auto' }}\n                                  className=\"mt-4 pt-4 border-t border-gray-200\"\n                                >\n                                  <p className=\"text-xs text-gray-600 line-clamp-3\">\n                                    {anime.description}\n                                  </p>\n                                </motion.div>\n                              )}\n                            </div>\n                          </div>\n                        </motion.div>\n                      )\n                    })}\n                  </div>\n                </div>\n              </div>\n            </motion.div>\n          )}\n        </AnimatePresence>\n\n        {/* Import History */}\n        <AnimatePresence>\n          {importHistory.length > 0 && (\n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: 0.8 }}\n              className=\"mt-8\"\n            >\n              <div className=\"bg-white/80 backdrop-blur-sm rounded-3xl shadow-2xl border border-white/20 overflow-hidden\">\n                <div className=\"bg-gradient-to-r from-gray-600 to-gray-800 p-6\">\n                  <h3 className=\"text-2xl font-bold text-white\">📚 Recent Import History</h3>\n                </div>\n                <div className=\"p-8\">\n                  <div className=\"space-y-4\">\n                    {importHistory.slice(0, 5).map((item, index) => (\n                      <motion.div\n                        key={item.id}\n                        initial={{ opacity: 0, x: -20 }}\n                        animate={{ opacity: 1, x: 0 }}\n                        transition={{ delay: index * 0.1 }}\n                        className=\"flex justify-between items-center p-4 bg-gradient-to-r from-gray-50 to-blue-50 rounded-2xl border border-gray-200 hover:shadow-lg transition-all\"\n                      >\n                        <div>\n                          <p className=\"font-semibold text-gray-800\">{item.query}</p>\n                          <p className=\"text-sm text-gray-600\">\n                            {new Date(item.timestamp).toLocaleString()} • {item.source.toUpperCase()}\n                          </p>\n                        </div>\n                        <div className=\"flex gap-4 text-sm\">\n                          <span className=\"flex items-center text-green-600\">\n                            <span className=\"w-2 h-2 bg-green-500 rounded-full mr-2\"></span>\n                            ✅ {item.result.imported}\n                          </span>\n                          <span className=\"flex items-center text-yellow-600\">\n                            <span className=\"w-2 h-2 bg-yellow-500 rounded-full mr-2\"></span>\n                            ⚠️ {item.result.skipped}\n                          </span>\n                          <span className=\"flex items-center text-red-600\">\n                            <span className=\"w-2 h-2 bg-red-500 rounded-full mr-2\"></span>\n                            ❌ {item.result.errors.length}\n                          </span>\n                        </div>\n                      </motion.div>\n                    ))}\n                  </div>\n                </div>\n              </div>\n            </motion.div>\n          )}\n        </AnimatePresence>\n      </div>\n    </div>\n  )\n}","// Browser-compatible interfaces and types for HiAnime scraper\n// The actual scraping logic is in the server-side script\n\nexport interface ScrapeResult {\n  success: boolean;\n  streamUrl?: string;\n  episodeData?: any;\n  error?: string;\n}\n\nexport interface EpisodeScrapeData {\n  animeId: string;\n  episodeNumber: number;\n  title: string;\n  videoUrl: string;\n  thumbnailUrl?: string;\n  duration?: number;\n  description?: string;\n  createdAt: Date;\n}\n\nexport interface BatchScrapeResult {\n  success: boolean;\n  results: ScrapeResult[];\n  summary: {\n    totalEpisodes: number;\n    successCount: number;\n    errorCount: number;\n    successRate: number;\n  };\n}\n\n// Browser-compatible service that calls the server-side scraper\nexport class HiAnimeScraperService {\n  private static readonly API_BASE_URL = 'http://localhost:3001';\n\n  /**\n   * Scrape a single episode from HiAnime.do via backend API\n   */\n  static async scrapeAnimeEpisode(\n    animeTitle: string,\n    animeId: string,\n    episodeNumber: number = 1,\n    options: {\n      headless?: boolean;\n      timeout?: number;\n      retries?: number;\n    } = {}\n  ): Promise<ScrapeResult> {\n    try {\n      console.log(`🎬 Scraping episode ${episodeNumber} for \"${animeTitle}\" (ID: ${animeId})`);\n\n      const response = await fetch(`${this.API_BASE_URL}/api/scrape-episode`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          animeTitle,\n          animeId,\n          episodeNumber,\n          options\n        })\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || `Server error: ${response.status}`);\n      }\n\n      const result = await response.json();\n      return result;\n    } catch (error) {\n      console.error('Error calling scraper API:', error);\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error'\n      };\n    }\n  }\n\n  /**\n   * Scrape all available episodes for an anime\n   */\n  static async scrapeAllEpisodes(\n    animeTitle: string,\n    options: {\n      animeId?: string;\n      maxEpisodes?: number;\n      timeout?: number;\n      retries?: number;\n    } = {}\n  ): Promise<{\n    success: boolean;\n    data?: {\n      animeTitle: string;\n      animeId: string;\n      totalEpisodes: number;\n      scrapedEpisodes: Array<{\n        number: number;\n        title: string;\n        streamUrl: string;\n        embeddingProtected: boolean;\n        embeddingReason?: string;\n        scrapedAt: string;\n      }>;\n      failedEpisodes: Array<{\n        number: number;\n        title: string;\n        error: string;\n      }>;\n      summary: {\n        total: number;\n        successful: number;\n        failed: number;\n        embeddingProtected: number;\n      };\n    };\n    error?: string;\n  }> {\n    try {\n      console.log(`🎬 Scraping all episodes for \"${animeTitle}\"`);\n\n      const response = await fetch(`${this.API_BASE_URL}/api/scrape-all-episodes`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          animeTitle,\n          animeId: options.animeId,\n          maxEpisodes: options.maxEpisodes || 20,\n          timeout: options.timeout || 60000,\n          retries: options.retries || 2\n        })\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || `Server error: ${response.status}`);\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Error calling scrape all episodes API:', error);\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error'\n      };\n    }\n  }\n\n  /**\n   * Add a scraped episode to the database\n   */\n  static async addScrapedEpisode(\n    animeId: string,\n    episodeData: {\n      number: number;\n      title: string;\n      streamUrl: string;\n      embeddingProtected: boolean;\n      embeddingReason?: string;\n    }\n  ): Promise<{\n    success: boolean;\n    message?: string;\n    episode?: any;\n    error?: string;\n  }> {\n    try {\n      console.log(`💾 Adding episode ${episodeData.number} to database for anime ${animeId}`);\n\n      const response = await fetch(`${this.API_BASE_URL}/api/add-scraped-episode`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          animeId,\n          episodeData\n        })\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || `Server error: ${response.status}`);\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Error adding scraped episode:', error);\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error'\n      };\n    }\n  }\n\n  /**\n   * Batch scrape multiple episodes\n   */\n  static async batchScrapeEpisodes(\n    animeTitle: string,\n    animeId: string,\n    episodeNumbers: number[],\n    options: {\n      headless?: boolean;\n      timeout?: number;\n      retries?: number;\n      delayBetweenEpisodes?: number;\n    } = {}\n  ): Promise<BatchScrapeResult> {\n    try {\n      console.log(`🎬 Batch scraping ${episodeNumbers.length} episodes for \"${animeTitle}\"`);\n\n      const response = await fetch(`${this.API_BASE_URL}/api/batch-scrape-episodes`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          animeTitle,\n          animeId,\n          episodeNumbers,\n          options\n        })\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || `Server error: ${response.status}`);\n      }\n\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      console.error('Error in batch scraping:', error);\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error',\n        results: [],\n        summary: {\n          totalEpisodes: episodeNumbers.length,\n          successCount: 0,\n          errorCount: episodeNumbers.length,\n          successRate: 0\n        }\n      };\n    }\n  }\n\n  /**\n   * Test the scraper (browser-compatible version)\n   */\n  static async testScraper(): Promise<void> {\n    console.log('🧪 Testing HiAnime Scraper (Browser Mode)...');\n    console.log('Note: Actual scraping requires server-side execution');\n    console.log('Use the command line script: npm run scrape-hianime -- --test');\n  }\n}","import React, { useState } from 'react';\nimport { motion } from 'framer-motion';\nimport { HiAnimeScraperService } from '../../services/hianimeScraperService';\n\ninterface ScrapedEpisode {\n  number: number;\n  title: string;\n  streamUrl: string;\n  embeddingProtected: boolean;\n  embeddingReason?: string;\n  scrapedAt: string;\n}\n\ninterface ScrapedEpisodesModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  animeId: string;\n  animeTitle: string;\n  scrapedEpisodes: ScrapedEpisode[];\n  failedEpisodes: Array<{\n    number: number;\n    title: string;\n    error: string;\n  }>;\n  summary: {\n    total: number;\n    successful: number;\n    failed: number;\n    embeddingProtected: number;\n  };\n  onEpisodesAdded: () => void;\n}\n\nexport const ScrapedEpisodesModal: React.FC<ScrapedEpisodesModalProps> = ({\n  isOpen,\n  onClose,\n  animeId,\n  animeTitle,\n  scrapedEpisodes,\n  failedEpisodes,\n  summary,\n  onEpisodesAdded\n}) => {\n  const [addingEpisodes, setAddingEpisodes] = useState<Set<number>>(new Set());\n  const [addedEpisodes, setAddedEpisodes] = useState<Set<number>>(new Set());\n  const [error, setError] = useState<string | null>(null);\n  const [success, setSuccess] = useState<string | null>(null);\n\n  const handleAddEpisode = async (episode: ScrapedEpisode) => {\n    try {\n      setAddingEpisodes(prev => new Set(prev).add(episode.number));\n      setError(null);\n\n      const result = await HiAnimeScraperService.addScrapedEpisode(animeId, {\n        number: episode.number,\n        title: episode.title,\n        streamUrl: episode.streamUrl,\n        embeddingProtected: episode.embeddingProtected,\n        embeddingReason: episode.embeddingReason\n      });\n\n      if (result.success) {\n        setAddedEpisodes(prev => new Set(prev).add(episode.number));\n        setSuccess(result.message || `Episode ${episode.number} added successfully!`);\n        setTimeout(() => setSuccess(null), 3000);\n        onEpisodesAdded();\n      } else {\n        setError(result.error || 'Failed to add episode');\n        setTimeout(() => setError(null), 5000);\n      }\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Unknown error');\n      setTimeout(() => setError(null), 5000);\n    } finally {\n      setAddingEpisodes(prev => {\n        const newSet = new Set(prev);\n        newSet.delete(episode.number);\n        return newSet;\n      });\n    }\n  };\n\n  const handleAddAllEpisodes = async () => {\n    const episodesToAdd = scrapedEpisodes.filter(ep => !addedEpisodes.has(ep.number));\n    \n    for (const episode of episodesToAdd) {\n      await handleAddEpisode(episode);\n      // Small delay between additions\n      await new Promise(resolve => setTimeout(resolve, 500));\n    }\n  };\n\n  const getEmbeddingStatusColor = (isProtected: boolean) => {\n    return isProtected ? 'text-red-600 bg-red-100' : 'text-green-600 bg-green-100';\n  };\n\n  const getEmbeddingStatusIcon = (isProtected: boolean) => {\n    return isProtected ? '⚠️' : '✅';\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center z-50 p-4\">\n      <motion.div\n        initial={{ opacity: 0, scale: 0.95 }}\n        animate={{ opacity: 1, scale: 1 }}\n        exit={{ opacity: 0, scale: 0.95 }}\n        className=\"bg-white rounded-xl shadow-2xl max-w-6xl w-full max-h-[90vh] overflow-y-auto\"\n      >\n        {/* Header */}\n        <div className=\"flex items-center justify-between p-6 border-b border-gray-200\">\n          <div>\n            <h2 className=\"text-2xl font-bold text-gray-900\">Scraped Episodes</h2>\n            <p className=\"text-gray-600 mt-1\">{animeTitle}</p>\n          </div>\n          <button\n            onClick={onClose}\n            className=\"text-gray-400 hover:text-gray-600 transition-colors p-2 rounded-full hover:bg-gray-100\"\n          >\n            <svg className=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n            </svg>\n          </button>\n        </div>\n\n        {/* Summary Stats */}\n        <div className=\"p-6 border-b border-gray-200\">\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            <div className=\"bg-blue-50 rounded-lg p-4 text-center\">\n              <div className=\"text-2xl font-bold text-blue-600\">{summary.total}</div>\n              <div className=\"text-sm text-blue-600\">Total Episodes</div>\n            </div>\n            <div className=\"bg-green-50 rounded-lg p-4 text-center\">\n              <div className=\"text-2xl font-bold text-green-600\">{summary.successful}</div>\n              <div className=\"text-sm text-green-600\">Successfully Scraped</div>\n            </div>\n            <div className=\"bg-red-50 rounded-lg p-4 text-center\">\n              <div className=\"text-2xl font-bold text-red-600\">{summary.failed}</div>\n              <div className=\"text-sm text-red-600\">Failed</div>\n            </div>\n            <div className=\"bg-yellow-50 rounded-lg p-4 text-center\">\n              <div className=\"text-2xl font-bold text-yellow-600\">{summary.embeddingProtected}</div>\n              <div className=\"text-sm text-yellow-600\">Embedding Protected</div>\n            </div>\n          </div>\n        </div>\n\n        {/* Messages */}\n        {error && (\n          <div className=\"mx-6 mt-4 bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded\">\n            {error}\n          </div>\n        )}\n        \n        {success && (\n          <div className=\"mx-6 mt-4 bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded\">\n            {success}\n          </div>\n        )}\n\n        {/* Actions */}\n        <div className=\"p-6 border-b border-gray-200\">\n          <div className=\"flex items-center justify-between\">\n            <h3 className=\"text-lg font-semibold text-gray-900\">Episodes</h3>\n            <div className=\"flex space-x-2\">\n              <button\n                onClick={handleAddAllEpisodes}\n                disabled={scrapedEpisodes.every(ep => addedEpisodes.has(ep.number)) || addingEpisodes.size > 0}\n                className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors\"\n              >\n                {addingEpisodes.size > 0 ? 'Adding...' : 'Add All Episodes'}\n              </button>\n            </div>\n          </div>\n        </div>\n\n        {/* Episodes List */}\n        <div className=\"p-6\">\n          <div className=\"space-y-4\">\n            {scrapedEpisodes.map((episode) => (\n              <motion.div\n                key={episode.number}\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                className=\"bg-gray-50 rounded-lg p-4 border border-gray-200\"\n              >\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center space-x-3 mb-2\">\n                      <span className=\"w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center text-blue-600 font-bold text-sm\">\n                        {episode.number}\n                      </span>\n                      <h4 className=\"text-lg font-semibold text-gray-900\">{episode.title}</h4>\n                      <span className={`px-2 py-1 rounded-full text-xs font-medium ${getEmbeddingStatusColor(episode.embeddingProtected)}`}>\n                        {getEmbeddingStatusIcon(episode.embeddingProtected)} {episode.embeddingProtected ? 'Protected' : 'Embeddable'}\n                      </span>\n                    </div>\n                    \n                    <div className=\"text-sm text-gray-600 mb-2\">\n                      <div className=\"break-all\">\n                        <strong>URL:</strong> {episode.streamUrl}\n                      </div>\n                      {episode.embeddingReason && (\n                        <div className=\"mt-1\">\n                          <strong>Protection Reason:</strong> {episode.embeddingReason}\n                        </div>\n                      )}\n                      <div className=\"mt-1\">\n                        <strong>Scraped:</strong> {new Date(episode.scrapedAt).toLocaleString()}\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-center space-x-2\">\n                    {addedEpisodes.has(episode.number) ? (\n                      <span className=\"px-4 py-2 bg-green-100 text-green-700 rounded-lg text-sm font-medium\">\n                        ✅ Added\n                      </span>\n                    ) : (\n                      <button\n                        onClick={() => handleAddEpisode(episode)}\n                        disabled={addingEpisodes.has(episode.number)}\n                        className=\"px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors flex items-center space-x-2\"\n                      >\n                        {addingEpisodes.has(episode.number) ? (\n                          <>\n                            <div className=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin\"></div>\n                            <span>Adding...</span>\n                          </>\n                        ) : (\n                          <>\n                            <span>➕</span>\n                            <span>Add Episode</span>\n                          </>\n                        )}\n                      </button>\n                    )}\n                  </div>\n                </div>\n              </motion.div>\n            ))}\n            \n            {scrapedEpisodes.length === 0 && (\n              <div className=\"text-center py-8\">\n                <div className=\"text-gray-400 text-4xl mb-2\">📺</div>\n                <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No Episodes Scraped</h3>\n                <p className=\"text-gray-500\">Try scraping again or check if the anime exists on 9anime.org.lv</p>\n              </div>\n            )}\n          </div>\n\n          {/* Failed Episodes */}\n          {failedEpisodes.length > 0 && (\n            <div className=\"mt-8\">\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Failed Episodes</h3>\n              <div className=\"space-y-2\">\n                {failedEpisodes.map((episode) => (\n                  <div key={episode.number} className=\"bg-red-50 rounded-lg p-3 border border-red-200\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <span className=\"font-medium text-red-900\">Episode {episode.number}: {episode.title}</span>\n                        <div className=\"text-sm text-red-600 mt-1\">{episode.error}</div>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n        </div>\n\n        {/* Footer */}\n        <div className=\"p-6 border-t border-gray-200 bg-gray-50\">\n          <div className=\"flex justify-end space-x-3\">\n            <button\n              onClick={onClose}\n              className=\"px-6 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700 transition-colors\"\n            >\n              Close\n            </button>\n          </div>\n        </div>\n      </motion.div>\n    </div>\n  );\n};\n","import React, { useState, useEffect } from 'react';\r\nimport { motion } from 'framer-motion';\r\nimport { HiAnimeScraperService } from '../../services/hianimeScraperService';\r\nimport { AdminAnimeService } from '../../services/adminAnimeService';\r\nimport Button from '../../components/base/Button';\r\nimport Input from '../../components/base/Input';\r\nimport LoadingSpinner from '../../components/base/LoadingSpinner';\r\nimport Card from '../../components/base/Card';\r\nimport { ScrapedEpisodesModal } from './ScrapedEpisodesModal';\r\n\r\ninterface Anime {\r\n  id: string;\r\n  title: string;\r\n  total_episodes: number;\r\n  status: string;\r\n  poster_url?: string;\r\n}\r\n\r\ninterface ScrapeResult {\r\n  success: boolean;\r\n  streamUrl?: string;\r\n  episodeData?: any;\r\n  error?: string;\r\n}\r\n\r\ninterface BatchScrapeResult {\r\n  success: boolean;\r\n  results: ScrapeResult[];\r\n  summary: {\r\n    totalEpisodes: number;\r\n    successCount: number;\r\n    errorCount: number;\r\n    successRate: number;\r\n  };\r\n}\r\n\r\nexport const AnimeScraperComponent: React.FC = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [animeList, setAnimeList] = useState<Anime[]>([]);\r\n  const [filteredAnime, setFilteredAnime] = useState<Anime[]>([]);\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [selectedAnime, setSelectedAnime] = useState<Anime | null>(null);\r\n  const [episodeNumber, setEpisodeNumber] = useState(1);\r\n  const [episodeRange, setEpisodeRange] = useState('');\r\n  const [scrapeResult, setScrapeResult] = useState<ScrapeResult | null>(null);\r\n  const [batchResult, setBatchResult] = useState<BatchScrapeResult | null>(null);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [success, setSuccess] = useState<string | null>(null);\r\n  \r\n  // Scraped episodes modal state\r\n  const [showScrapedEpisodes, setShowScrapedEpisodes] = useState(false);\r\n  const [scrapedEpisodesData, setScrapedEpisodesData] = useState<any>(null);\r\n  const [episodesAddedCount, setEpisodesAddedCount] = useState(0);\r\n  const [currentScrapedEpisodes, setCurrentScrapedEpisodes] = useState<any[]>([]);\r\n  const [existingEpisodes, setExistingEpisodes] = useState<Set<number>>(new Set());\r\n\r\n  // Load anime list on component mount\r\n  useEffect(() => {\r\n    loadAnimeList();\r\n  }, []);\r\n\r\n  // Filter anime based on search term\r\n  useEffect(() => {\r\n    if (searchTerm.trim() === '') {\r\n      setFilteredAnime(animeList);\r\n    } else {\r\n      const filtered = animeList.filter(anime =>\r\n        anime.title.toLowerCase().includes(searchTerm.toLowerCase())\r\n      );\r\n      setFilteredAnime(filtered);\r\n    }\r\n  }, [searchTerm, animeList]);\r\n\r\n  const loadAnimeList = async () => {\r\n    try {\r\n      setIsLoading(true);\r\n      const result = await AdminAnimeService.getAnimeList(1, 1000); // Get all anime\r\n      setAnimeList(result.anime || []);\r\n      setFilteredAnime(result.anime || []);\r\n    } catch (error) {\r\n      console.error('Error loading anime list:', error);\r\n      setError('Failed to load anime list');\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleAnimeSelect = async (anime: Anime) => {\r\n    setSelectedAnime(anime);\r\n    setSearchTerm(anime.title);\r\n    setError(null);\r\n    setSuccess(null);\r\n    setScrapeResult(null);\r\n    setBatchResult(null);\r\n    setCurrentScrapedEpisodes([]);\r\n    setEpisodesAddedCount(0);\r\n    \r\n    // Check existing episodes for this anime\r\n    await checkExistingEpisodes(anime.id);\r\n  };\r\n\r\n  const checkExistingEpisodes = async (animeId: string) => {\r\n    // Validate UUID format\r\n    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\r\n    if (!uuidRegex.test(animeId)) {\r\n      console.warn('Invalid anime ID format, skipping existing episodes check');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const response = await fetch(`http://localhost:3001/api/anime/${animeId}/episodes`);\r\n      if (response.ok) {\r\n        const contentType = response.headers.get('content-type');\r\n        if (contentType && contentType.includes('application/json')) {\r\n          const data = await response.json();\r\n          const existingNumbers = new Set<number>(data.episodes?.map((ep: any) => ep.episode_number as number) || []);\r\n          setExistingEpisodes(existingNumbers);\r\n        } else {\r\n          console.warn('Response is not JSON, skipping existing episodes check');\r\n        }\r\n      } else {\r\n        console.warn(`Failed to fetch episodes: ${response.status}`);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error checking existing episodes:', error);\r\n    }\r\n  };\r\n\r\n  const handleSingleScrape = async () => {\r\n    if (!selectedAnime) {\r\n      setError('Please select an anime first');\r\n      return;\r\n    }\r\n\r\n    setIsLoading(true);\r\n    setError(null);\r\n    setSuccess(null);\r\n\r\n    try {\r\n      const result = await HiAnimeScraperService.scrapeAnimeEpisode(\r\n        selectedAnime.title,\r\n        selectedAnime.id,\r\n        episodeNumber\r\n      );\r\n\r\n      setScrapeResult(result);\r\n      \r\n      if (result.success) {\r\n        setSuccess(`Episode ${episodeNumber} scraped successfully!`);\r\n        setTimeout(() => setSuccess(null), 3000);\r\n      } else {\r\n        setError(result.error || 'Scraping failed');\r\n        setTimeout(() => setError(null), 5000);\r\n      }\r\n    } catch (error) {\r\n      setError(error instanceof Error ? error.message : 'Unknown error occurred');\r\n      setTimeout(() => setError(null), 5000);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleBatchScrape = async () => {\r\n    if (!selectedAnime) {\r\n      setError('Please select an anime first');\r\n      return;\r\n    }\r\n\r\n    // Parse episode range (e.g., \"1-5\" or \"1,3,5\" or \"1\")\r\n    let episodeNumbers: number[];\r\n    if (episodeRange.includes('-')) {\r\n      const [start, end] = episodeRange.split('-').map(Number);\r\n      episodeNumbers = Array.from({ length: end - start + 1 }, (_, i) => start + i);\r\n    } else if (episodeRange.includes(',')) {\r\n      episodeNumbers = episodeRange.split(',').map(Number);\r\n    } else {\r\n      episodeNumbers = [parseInt(episodeRange)];\r\n    }\r\n\r\n    setIsLoading(true);\r\n    setError(null);\r\n    setSuccess(null);\r\n    setBatchResult(null);\r\n\r\n    try {\r\n      const result = await HiAnimeScraperService.batchScrapeEpisodes(\r\n        selectedAnime.title,\r\n        selectedAnime.id,\r\n        episodeNumbers,\r\n        {\r\n          headless: true,\r\n          timeout: 30000,\r\n          retries: 2,\r\n          delayBetweenEpisodes: 3000\r\n        }\r\n      );\r\n\r\n      if (result.success && result.results) {\r\n        // Convert results to scraped episodes format for direct display\r\n        const scrapedEpisodes = result.results\r\n          .filter((r: any) => r.status === 'success')\r\n          .map((r: any) => ({\r\n            number: r.episode,\r\n            title: r.title,\r\n            streamUrl: r.url,\r\n            embeddingProtected: r.embeddingProtected || false,\r\n            embeddingReason: r.embeddingReason || null,\r\n            scrapedAt: r.scrapedAt || new Date().toISOString(),\r\n            isExisting: existingEpisodes.has(r.episode)\r\n          }));\r\n\r\n        // Show episodes directly in results (no modal)\r\n        setCurrentScrapedEpisodes(scrapedEpisodes);\r\n        \r\n        setSuccess(`Batch scraping completed: ${scrapedEpisodes.length}/${episodeNumbers.length} episodes scraped successfully!`);\r\n        setTimeout(() => setSuccess(null), 5000);\r\n      } else {\r\n        setError((result as any).error || 'Batch scraping failed');\r\n        setTimeout(() => setError(null), 5000);\r\n      }\r\n    } catch (error) {\r\n      setError(error instanceof Error ? error.message : 'Unknown error occurred');\r\n      setTimeout(() => setError(null), 5000);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleScrapeAllEpisodes = async () => {\r\n    if (!selectedAnime) {\r\n      setError('Please select an anime first');\r\n      return;\r\n    }\r\n\r\n    setIsLoading(true);\r\n    setError(null);\r\n    setSuccess(null);\r\n\r\n    try {\r\n      const result = await HiAnimeScraperService.scrapeAllEpisodes(selectedAnime.title, {\r\n        animeId: selectedAnime.id,\r\n        maxEpisodes: selectedAnime.total_episodes || 50\r\n      });\r\n\r\n      if (result.success && result.data) {\r\n        setScrapedEpisodesData(result.data);\r\n        setShowScrapedEpisodes(true);\r\n        setSuccess(`Scraped ${result.data.summary?.successful || 0} episodes successfully!`);\r\n        setTimeout(() => setSuccess(null), 5000);\r\n      } else {\r\n        setError(result.error || 'Scraping failed');\r\n        setTimeout(() => setError(null), 5000);\r\n      }\r\n    } catch (error) {\r\n      setError(error instanceof Error ? error.message : 'Unknown error occurred');\r\n      setTimeout(() => setError(null), 5000);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleCloseScrapedEpisodes = () => {\r\n    setShowScrapedEpisodes(false);\r\n    setScrapedEpisodesData(null);\r\n  };\r\n\r\n  const handleAddEpisode = async (episode: any) => {\r\n    if (!selectedAnime) return;\r\n    \r\n    try {\r\n      const response = await fetch('http://localhost:3001/api/add-scraped-episode', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({\r\n          animeId: selectedAnime.id,\r\n          episodeData: {\r\n            number: episode.number,\r\n            title: episode.title,\r\n            streamUrl: episode.streamUrl,\r\n            description: `Scraped from HiAnime`,\r\n            isPremium: false\r\n          }\r\n        })\r\n      });\r\n\r\n      const result = await response.json();\r\n      \r\n      if (result.success) {\r\n        // Update episode status\r\n        setCurrentScrapedEpisodes(prev => \r\n          prev.map(ep => \r\n            ep.number === episode.number \r\n              ? { ...ep, isExisting: true, addedAt: new Date().toISOString() }\r\n              : ep\r\n          )\r\n        );\r\n        \r\n        // Update existing episodes set\r\n        setExistingEpisodes(prev => new Set([...prev, episode.number]));\r\n        \r\n        // Update counter\r\n        setEpisodesAddedCount(prev => prev + 1);\r\n        \r\n        setSuccess(`Episode ${episode.number} added successfully!`);\r\n        setTimeout(() => setSuccess(null), 3000);\r\n      } else {\r\n        setError(result.error || 'Failed to add episode');\r\n        setTimeout(() => setError(null), 5000);\r\n      }\r\n    } catch (error) {\r\n      setError('Error adding episode');\r\n      setTimeout(() => setError(null), 5000);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      {/* Header */}\r\n      <div className=\"text-center\">\r\n        <h2 className=\"text-3xl font-bold text-gray-800 mb-2\">\r\n          🎬 Anime Episode Scraper\r\n        </h2>\r\n        <p className=\"text-gray-600\">\r\n          Scrape episodes from 9anime.org.lv for your anime collection\r\n        </p>\r\n      </div>\r\n\r\n      {/* Anime Selection */}\r\n      <Card className=\"p-6\">\r\n        <h3 className=\"text-xl font-semibold text-gray-800 mb-4\">\r\n          📺 Select Anime\r\n        </h3>\r\n        \r\n        <div className=\"space-y-4\">\r\n          {/* Search Input */}\r\n          <div>\r\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n              Search Anime\r\n            </label>\r\n            <Input\r\n              type=\"text\"\r\n              placeholder=\"Type anime name to search...\"\r\n              value={searchTerm}\r\n              onChange={(e) => setSearchTerm(e.target.value)}\r\n              className=\"w-full\"\r\n            />\r\n          </div>\r\n\r\n          {/* Selected Anime Display */}\r\n          {selectedAnime && (\r\n            <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\r\n              <div className=\"flex items-center space-x-4\">\r\n                {selectedAnime.poster_url && (\r\n                  <img\r\n                    src={selectedAnime.poster_url}\r\n                    alt={selectedAnime.title}\r\n                    className=\"w-16 h-20 object-cover rounded-lg\"\r\n                  />\r\n                )}\r\n                <div>\r\n                  <h4 className=\"font-semibold text-blue-800\">{selectedAnime.title}</h4>\r\n                  <p className=\"text-sm text-blue-600\">\r\n                    {selectedAnime.total_episodes} episodes • {selectedAnime.status}\r\n                  </p>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          {/* Anime List */}\r\n          <div className=\"max-h-60 overflow-y-auto border border-gray-200 rounded-lg\">\r\n            {isLoading ? (\r\n              <div className=\"p-4 text-center\">\r\n                <LoadingSpinner size=\"sm\" />\r\n                <p className=\"text-gray-600 mt-2\">Loading anime...</p>\r\n              </div>\r\n            ) : filteredAnime.length === 0 ? (\r\n              <div className=\"p-4 text-center text-gray-500\">\r\n                No anime found\r\n              </div>\r\n            ) : (\r\n              <div className=\"divide-y divide-gray-200\">\r\n                {filteredAnime.map((anime) => (\r\n                  <motion.div\r\n                    key={anime.id}\r\n                    whileHover={{ backgroundColor: '#f8fafc' }}\r\n                    className={`p-3 cursor-pointer transition-colors ${\r\n                      selectedAnime?.id === anime.id ? 'bg-blue-50' : ''\r\n                    }`}\r\n                    onClick={() => handleAnimeSelect(anime)}\r\n                  >\r\n                    <div className=\"flex items-center space-x-3\">\r\n                      {anime.poster_url && (\r\n                        <img\r\n                          src={anime.poster_url}\r\n                          alt={anime.title}\r\n                          className=\"w-12 h-16 object-cover rounded\"\r\n                        />\r\n                      )}\r\n                      <div className=\"flex-1\">\r\n                        <h4 className=\"font-medium text-gray-800\">{anime.title}</h4>\r\n                        <p className=\"text-sm text-gray-600\">\r\n                          {anime.total_episodes} episodes • {anime.status}\r\n                        </p>\r\n                      </div>\r\n                      {selectedAnime?.id === anime.id && (\r\n                        <div className=\"text-blue-600\">\r\n                          <i className=\"ri-check-line text-xl\"></i>\r\n                        </div>\r\n                      )}\r\n                    </div>\r\n                  </motion.div>\r\n                ))}\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </Card>\r\n\r\n      {/* Scraping Options */}\r\n      {selectedAnime && (\r\n        <Card className=\"p-6\">\r\n          <h3 className=\"text-xl font-semibold text-gray-800 mb-4\">\r\n            🎯 Scraping Options\r\n          </h3>\r\n          \r\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\r\n            {/* Single Episode */}\r\n            <div className=\"space-y-3\">\r\n              <h4 className=\"font-medium text-gray-700\">Single Episode</h4>\r\n              <Input\r\n                type=\"number\"\r\n                placeholder=\"Episode number\"\r\n                value={episodeNumber}\r\n                onChange={(e) => setEpisodeNumber(parseInt(e.target.value) || 1)}\r\n                min=\"1\"\r\n              />\r\n              <Button\r\n                onClick={handleSingleScrape}\r\n                disabled={isLoading}\r\n                className=\"w-full\"\r\n              >\r\n                {isLoading ? <LoadingSpinner size=\"sm\" /> : '🎬 Scrape Episode'}\r\n              </Button>\r\n            </div>\r\n\r\n            {/* Batch Episodes */}\r\n            <div className=\"space-y-3\">\r\n              <h4 className=\"font-medium text-gray-700\">Batch Episodes</h4>\r\n              <Input\r\n                type=\"text\"\r\n                placeholder=\"1-5, 1,3,5, or 1\"\r\n                value={episodeRange}\r\n                onChange={(e) => setEpisodeRange(e.target.value)}\r\n              />\r\n              <Button\r\n                onClick={handleBatchScrape}\r\n                disabled={isLoading}\r\n                className=\"w-full\"\r\n              >\r\n                {isLoading ? <LoadingSpinner size=\"sm\" /> : '📺 Batch Scrape'}\r\n              </Button>\r\n            </div>\r\n\r\n            {/* All Episodes */}\r\n            <div className=\"space-y-3\">\r\n              <h4 className=\"font-medium text-gray-700\">All Episodes</h4>\r\n              <div className=\"text-sm text-gray-600\">\r\n                Scrape all {selectedAnime.total_episodes} episodes\r\n              </div>\r\n              <Button\r\n                onClick={handleScrapeAllEpisodes}\r\n                disabled={isLoading}\r\n                className=\"w-full\"\r\n              >\r\n                {isLoading ? <LoadingSpinner size=\"sm\" /> : '🚀 Scrape All'}\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        </Card>\r\n      )}\r\n\r\n      {/* Results */}\r\n      {(scrapeResult || batchResult || error || success || currentScrapedEpisodes.length > 0) && (\r\n        <Card className=\"p-6\">\r\n          <div className=\"flex items-center justify-between mb-4\">\r\n            <h3 className=\"text-xl font-semibold text-gray-800\">\r\n              📊 Scraping Results\r\n            </h3>\r\n            <Button\r\n              onClick={() => {\r\n                setScrapeResult(null);\r\n                setBatchResult(null);\r\n                setError(null);\r\n                setSuccess(null);\r\n                setEpisodesAddedCount(0);\r\n                setCurrentScrapedEpisodes([]);\r\n              }}\r\n              variant=\"secondary\"\r\n              size=\"sm\"\r\n              className=\"text-gray-600 hover:text-gray-800\"\r\n            >\r\n              <i className=\"ri-close-line mr-1\"></i>\r\n              Clear Results\r\n            </Button>\r\n          </div>\r\n          \r\n          {success && (\r\n            <div className=\"bg-green-50 border border-green-200 rounded-lg p-4 mb-4\">\r\n              <div className=\"flex items-center\">\r\n                <i className=\"ri-check-line text-green-600 text-xl mr-2\"></i>\r\n                <span className=\"text-green-800\">{success}</span>\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          {error && (\r\n            <div className=\"bg-red-50 border border-red-200 rounded-lg p-4 mb-4\">\r\n              <div className=\"flex items-center\">\r\n                <i className=\"ri-error-warning-line text-red-600 text-xl mr-2\"></i>\r\n                <span className=\"text-red-800\">{error}</span>\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          {/* Single Episode Result */}\r\n          {scrapeResult && (\r\n            <div className=\"space-y-3\">\r\n              <h4 className=\"font-medium text-gray-700\">🎬 Single Episode Result</h4>\r\n              <div className={`p-4 rounded-lg ${\r\n                scrapeResult.success ? 'bg-green-50 border border-green-200' : 'bg-red-50 border border-red-200'\r\n              }`}>\r\n                {scrapeResult.success ? (\r\n                  <div>\r\n                    <p className=\"text-green-800 font-medium\">✅ Episode scraped successfully!</p>\r\n                    <p className=\"text-sm text-green-600 mt-1\">\r\n                      Stream URL: {scrapeResult.streamUrl?.substring(0, 50)}...\r\n                    </p>\r\n                    <div className=\"mt-2 text-xs text-gray-500\">\r\n                      <p>Episode: {episodeNumber}</p>\r\n                      <p>Anime: {selectedAnime?.title}</p>\r\n                    </div>\r\n                  </div>\r\n                ) : (\r\n                  <div>\r\n                    <p className=\"text-red-800\">❌ {scrapeResult.error}</p>\r\n                    <div className=\"mt-2 text-xs text-gray-500\">\r\n                      <p>Episode: {episodeNumber}</p>\r\n                      <p>Anime: {selectedAnime?.title}</p>\r\n                    </div>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          {/* Batch Result */}\r\n          {batchResult && (\r\n            <div className=\"space-y-3\">\r\n              <h4 className=\"font-medium text-gray-700\">📺 Batch Scraping Result</h4>\r\n              <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\r\n                <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mb-4\">\r\n                  <div className=\"text-center\">\r\n                    <div className=\"text-2xl font-bold text-blue-600\">{batchResult.summary.totalEpisodes}</div>\r\n                    <div className=\"text-sm text-gray-600\">Total Episodes</div>\r\n                  </div>\r\n                  <div className=\"text-center\">\r\n                    <div className=\"text-2xl font-bold text-green-600\">{batchResult.summary.successCount}</div>\r\n                    <div className=\"text-sm text-gray-600\">Successfully Scraped</div>\r\n                  </div>\r\n                  <div className=\"text-center\">\r\n                    <div className=\"text-2xl font-bold text-red-600\">{batchResult.summary.errorCount}</div>\r\n                    <div className=\"text-sm text-gray-600\">Failed</div>\r\n                  </div>\r\n                  <div className=\"text-center\">\r\n                    <div className=\"text-2xl font-bold text-purple-600\">{batchResult.summary.successRate.toFixed(1)}%</div>\r\n                    <div className=\"text-sm text-gray-600\">Success Rate</div>\r\n                  </div>\r\n                </div>\r\n                \r\n                <div className=\"text-sm text-gray-600\">\r\n                  <p><strong>Episodes Range:</strong> {episodeRange}</p>\r\n                  <p><strong>Anime:</strong> {selectedAnime?.title}</p>\r\n                  <p><strong>Scraped At:</strong> {new Date().toLocaleString()}</p>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          {/* Scraped Episodes List */}\r\n          {currentScrapedEpisodes.length > 0 && (\r\n            <div className=\"space-y-3\">\r\n              <h4 className=\"font-medium text-gray-700\">🎬 Scraped Episodes</h4>\r\n              <div className=\"space-y-2\">\r\n                {currentScrapedEpisodes.map((episode) => (\r\n                  <div key={episode.number} className={`p-3 rounded-lg border ${\r\n                    episode.isExisting \r\n                      ? 'bg-gray-50 border-gray-200' \r\n                      : 'bg-blue-50 border-blue-200'\r\n                  }`}>\r\n                    <div className=\"flex items-center justify-between\">\r\n                      <div className=\"flex-1\">\r\n                        <div className=\"flex items-center space-x-3\">\r\n                          <span className=\"font-medium text-gray-800\">\r\n                            Episode {episode.number}\r\n                          </span>\r\n                          <span className=\"text-sm text-gray-600\">\r\n                            {episode.title}\r\n                          </span>\r\n                          {episode.embeddingProtected && (\r\n                            <span className=\"text-xs bg-yellow-100 text-yellow-800 px-2 py-1 rounded\">\r\n                              Protected\r\n                            </span>\r\n                          )}\r\n                        </div>\r\n                        <div className=\"text-xs text-gray-500 mt-1\">\r\n                          Stream URL: {episode.streamUrl?.substring(0, 50)}...\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"ml-4\">\r\n                        {episode.isExisting ? (\r\n                          <div className=\"flex items-center text-green-600\">\r\n                            <i className=\"ri-check-line mr-1\"></i>\r\n                            <span className=\"text-sm font-medium\">Added</span>\r\n                          </div>\r\n                        ) : (\r\n                          <Button\r\n                            onClick={() => handleAddEpisode(episode)}\r\n                            size=\"sm\"\r\n                            className=\"bg-blue-600 hover:bg-blue-700 text-white\"\r\n                          >\r\n                            <i className=\"ri-add-line mr-1\"></i>\r\n                            Add\r\n                          </Button>\r\n                        )}\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          {/* Episodes Added Summary */}\r\n          {episodesAddedCount > 0 && (\r\n            <div className=\"space-y-3\">\r\n              <h4 className=\"font-medium text-gray-700\">✅ Episodes Added to Database</h4>\r\n              <div className=\"bg-green-50 border border-green-200 rounded-lg p-4\">\r\n                <div className=\"flex items-center\">\r\n                  <i className=\"ri-check-line text-green-600 text-xl mr-2\"></i>\r\n                  <div>\r\n                    <p className=\"text-green-800 font-medium\">\r\n                      {episodesAddedCount} episodes successfully added to database!\r\n                    </p>\r\n                    <p className=\"text-sm text-green-600 mt-1\">\r\n                      Anime: {selectedAnime?.title}\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </Card>\r\n      )}\r\n\r\n      {/* Instructions */}\r\n      <Card className=\"p-6 bg-blue-50 border-blue-200\">\r\n        <h3 className=\"text-lg font-semibold text-blue-800 mb-3\">\r\n          📋 How to Use\r\n        </h3>\r\n        <div className=\"space-y-2 text-blue-700\">\r\n          <p><strong>1. Search & Select:</strong> Search for your anime and click to select it</p>\r\n          <p><strong>2. Choose Method:</strong> Single episode, batch range, or all episodes</p>\r\n          <p><strong>3. Scrape:</strong> Click the scrape button and wait for results</p>\r\n          <p><strong>4. Review:</strong> Check the results and add episodes to your database</p>\r\n        </div>\r\n      </Card>\r\n\r\n      {/* Scraped Episodes Modal */}\r\n      {showScrapedEpisodes && scrapedEpisodesData && selectedAnime && (\r\n        <ScrapedEpisodesModal\r\n          isOpen={showScrapedEpisodes}\r\n          onClose={handleCloseScrapedEpisodes}\r\n          animeId={selectedAnime.id}\r\n          animeTitle={selectedAnime.title}\r\n          scrapedEpisodes={scrapedEpisodesData.scrapedEpisodes || []}\r\n          failedEpisodes={scrapedEpisodesData.failedEpisodes || []}\r\n          summary={scrapedEpisodesData.summary || { total: 0, successful: 0, failed: 0, embeddingProtected: 0 }}\r\n          onEpisodesAdded={() => {\r\n            handleCloseScrapedEpisodes();\r\n            setSuccess('Episodes added successfully!');\r\n            setTimeout(() => setSuccess(null), 5000);\r\n            // Keep the results visible - don't clear them\r\n          }}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n"],"names":["AdminService","isAdmin","data","user","supabase","auth","getUser","profile","from","select","eq","id","single","is_admin","role","error","getAdminStats","usersResult","animeResult","episodesResult","reviewsResult","recentUsersResult","premiumUsersResult","Promise","all","count","gte","Date","now","toISOString","neq","activeUsersResult","watchTimeResult","totalWatchTimeSeconds","reduce","total","progress","progress_seconds","totalWatchTimeHours","Math","round","totalUsers","totalAnime","totalEpisodes","totalReviews","recentUsers","activeUsers","premiumUsers","totalWatchTime","Error","getAllUsers","page","limit","offset","users","order","ascending","range","userIds","map","u","animeWatchedResult","in","userStats","Map","forEach","current","get","user_id","watchTime","animeWatched","set","total_watch_time","anime_watched","updateUser","userId","updates","update","updated_at","deleteUser","delete","getSystemHealth","startTime","dbError","apiResponseTime","database_status","totalRecords","head","storage_usage","min","active_connections","floor","random","error_rate","api_response_time","getRecentActivity","newUsers","newReviews","newProgress","activities","push","type","username","timestamp","created_at","description","review","anime","title","rating","is_completed","episode","last_watched","sort","a","b","getTime","slice","createAdminUser","email","password","authData","authError","admin","createUser","email_confirm","profileError","insert","subscription_type","getContentReports","reports","updateReportStatus","reportId","status","resolutionNotes","resolved_by","resolution_notes","createContentReport","reportData","getAnalyticsData","timeRange","days","startDate","userGrowth","growthMap","date","split","userGrowthData","Array","entries","genreData","not","genreCount","genres","genre","popularGenres","animeViews","animeViewCount","watchlist","topAnime","views","deviceStats","device","percentage","getAdminSettings","settings","code","site_name","site_description","maintenance_mode","allow_registration","max_file_size","allowed_file_types","email_notifications","analytics_enabled","cache_enabled","cache_duration","social_login_enabled","premium_features_enabled","updateAdminSettings","upsert","getAllAnime","async","item","viewers","episodes","ep","uniqueViewers","Set","v","size","reportsData","episode_count","length","average_rating","reviews","sum","toFixed","total_reviews","createAnime","animeData","updateAnime","animeId","cleanedUpdates","Object","acc","key","value","isArray","message","deleteAnime","episodeIds","resolve","updateAnimeStatus","bulkUpdateAnimeStatus","animeIds","bulkDeleteAnime","getAnimeEpisodes","createEpisode","episodeData","updateEpisode","episodeId","deleteEpisode","reorderEpisodes","_animeId","episodeOrders","episode_number","updateUserRole","currentUser","updateUserSubscription","subscriptionType","getAnimeAnalytics","animeError","completedViews","filter","averageRating","analytics","episodeCount","AdminAnimeService","getAnimeList","filters","countQuery","search","or","contains","countError","dataQuery","to","totalPages","ceil","err","isSupabaseConfigured","getAnimeById","sortedEpisodes","getAvailableGenres","allGenres","flatMap","getAvailableStudios","allStudios","studios","AddAnimeModal","isOpen","onClose","onSuccess","formData","setFormData","useState","title_japanese","poster_url","banner_url","trailer_url","year","getFullYear","total_episodes","duration","age_rating","availableGenres","setAvailableGenres","availableStudios","setAvailableStudios","newGenre","setNewGenre","newStudio","setNewStudio","loading","setLoading","setError","useEffect","loadData","handleInputChange","field","prev","handleAddGenre","trim","includes","handleAddStudio","AnimatePresence","children","jsx","motion","div","initial","opacity","animate","exit","className","onClick","scale","e","stopPropagation","jsxs","href","target","rel","onSubmit","preventDefault","Input","onChange","placeholder","required","parseInt","isNaN","max","parseFloat","step","rows","g","handleRemoveGenre","onKeyPress","Button","studio","handleRemoveStudio","variant","disabled","Fragment","SparkleLoadingSpinner","text","EditAnimeModal","toString","fill","stroke","viewBox","strokeLinecap","strokeLinejoin","strokeWidth","d","updateData","errorMessage","checked","handleGenreToggle","s","handleStudioToggle","AnimeImporterService","static","searchJikanAnime","query","safeLimit","response","fetch","this","JIKAN_BASE_URL","encodeURIComponent","ok","json","searchAniListAnime","graphqlQuery","ANILIST_BASE_URL","method","headers","body","JSON","stringify","variables","perPage","Page","media","mapJikanToDatabase","jikanAnime","parseDuration","synopsis","images","jpg","large_image_url","webp","trailer","embed_url","youtube_id","score","aired","prop","mapJikanStatus","mapJikanType","name","mapJikanRating","mapAniListToDatabase","aniListAnime","english","romaji","native","seasonYear","trailerUrl","formatTrailerUrl","site","stripHtmlTags","coverImage","large","medium","bannerImage","averageScore","mapAniListStatus","mapAniListType","format","nodes","importAnime","existingAnime","duplicateError","ilike","maybeSingle","bulkImportAnime","searchQuery","source","result","success","imported","skipped","errors","duplicates","searchResults","batchSize","i","batchPromises","mappedData","enhanceTrailerData","batchResult","setTimeout","toLowerCase","match","html","replace","formatTrailerWatchUrl","testTrailerData","jikanResults","anilistResults","getTrendingJikanAnime","getSeasonalJikanAnime","season","getTrendingAniListAnime","getSeasonalAniListAnime","toUpperCase","importAnimeRelations","anilistData","relations","edges","successCount","errorCount","relation","relatedTitle","node","relationType","currentAnimeTitle","currentWords","relatedWords","hasCommonWords","some","word","rWord","relationData","anime_id","related_anime_id","idMal","relation_type","anilist_id","mal_id","onConflict","ignoreDuplicates","importAnimeCharacters","characters","char","mainCharacters","character","characterData","full","name_japanese","name_romaji","alternative","image_url","image","importAnimeStudios","mainStudios","studioData","studioResult","studioError","studioUuid","studio_id","relationError","updateAnimeTrailers","animeWithoutTrailers","fetchError","updated","updateError","jikanTrailerUrl","anilistAnime","anilistTrailerUrl","importAnimeWithRelations","insertedAnime","insertError","relationsResult","charactersResult","studiosResult","importAnimeFromAniList","TrailerDebugger","setQuery","isLoading","setIsLoading","results","setResults","mappedJikan","originalTrailer","mappedTrailer","mappedAnilist","LoadingSpinner","index","EnhancedAnimeImporter","setSearchQuery","setSearchResults","selectedAnime","setSelectedAnime","isSearching","setIsSearching","isImporting","setIsImporting","importResult","setImportResult","setSource","showPreview","setShowPreview","importProgress","setImportProgress","searchFilters","setSearchFilters","sortBy","setBatchSize","autoImport","setAutoImport","importHistory","setImportHistory","showAdvanced","setShowAdvanced","activeTab","setActiveTab","setMessage","loadImportHistory","history","parse","localStorage","getItem","saveImportHistory","newHistory","setItem","handleSearch","mappedResults","originalData","filteredResults","applyFiltersToResults","alert","minRating","localeCompare","popularity","members","handleTrendingImport","y","transition","delay","label","icon","tab","mode","x","currentDate","month","getMonth","Card","charError","testQuery","Media","height","completed","width","batchIndex","isDuplicate","isSelected","selected","src","alt","onError","currentTarget","style","display","idx","handleSelectAnime","handleQuickImport","toLocaleString","HiAnimeScraperService","scrapeAnimeEpisode","animeTitle","episodeNumber","options","API_BASE_URL","errorData","scrapeAllEpisodes","maxEpisodes","timeout","retries","addScrapedEpisode","batchScrapeEpisodes","episodeNumbers","summary","successRate","testScraper","ScrapedEpisodesModal","scrapedEpisodes","failedEpisodes","onEpisodesAdded","addingEpisodes","setAddingEpisodes","addedEpisodes","setAddedEpisodes","setSuccess","handleAddEpisode","add","number","streamUrl","embeddingProtected","embeddingReason","newSet","getEmbeddingStatusIcon","isProtected","successful","failed","episodesToAdd","has","every","scrapedAt","AnimeScraperComponent","animeList","setAnimeList","filteredAnime","setFilteredAnime","searchTerm","setSearchTerm","setEpisodeNumber","episodeRange","setEpisodeRange","scrapeResult","setScrapeResult","setBatchResult","showScrapedEpisodes","setShowScrapedEpisodes","scrapedEpisodesData","setScrapedEpisodesData","episodesAddedCount","setEpisodesAddedCount","currentScrapedEpisodes","setCurrentScrapedEpisodes","existingEpisodes","setExistingEpisodes","loadAnimeList","filtered","checkExistingEpisodes","test","contentType","existingNumbers","handleCloseScrapedEpisodes","whileHover","backgroundColor","handleAnimeSelect","start","end","Number","_","headless","delayBetweenEpisodes","r","url","isExisting","substring","isPremium","addedAt"],"mappings":"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"}