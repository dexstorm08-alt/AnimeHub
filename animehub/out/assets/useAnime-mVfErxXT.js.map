{"version":3,"file":"useAnime-mVfErxXT.js","sources":["../../src/hooks/useAnime.ts"],"sourcesContent":["import { useState, useEffect, useMemo, useCallback } from 'react'\nimport { AnimeService } from '../services/animeService'\nimport type { Tables } from '../lib/supabase'\n\ntype Anime = Tables<'anime'>\n\ninterface UseAnimeOptions {\n  page?: number\n  limit?: number\n  genre?: string\n  year?: number\n  status?: string\n  search?: string\n}\n\nexport function useAnime(options: UseAnimeOptions = {}) {\n  const [anime, setAnime] = useState<Anime[]>([])\n  const [loading, setLoading] = useState(true)\n  const [error, setError] = useState<string | null>(null)\n  const [totalPages, setTotalPages] = useState(0)\n  const [total, setTotal] = useState(0)\n\n  // Memoize options to prevent unnecessary re-renders\n  const memoizedOptions = useMemo(() => ({\n    page: options.page || 1,\n    limit: options.limit || 20,\n    genre: options.genre,\n    year: options.year,\n    status: options.status,\n    search: options.search\n  }), [options.page, options.limit, options.genre, options.year, options.status, options.search])\n\n  // Memoize the fetch function\n  const fetchAnime = useCallback(async () => {\n    try {\n      setLoading(true)\n      setError(null)\n      \n      const result = await AnimeService.getAnimeList(\n        memoizedOptions.page,\n        memoizedOptions.limit,\n        {\n          genre: memoizedOptions.genre,\n          year: memoizedOptions.year,\n          status: memoizedOptions.status,\n          search: memoizedOptions.search\n        }\n      )\n      \n      setAnime(result.data)\n      setTotalPages(result.totalPages)\n      setTotal(result.total)\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to fetch anime')\n    } finally {\n      setLoading(false)\n    }\n  }, [memoizedOptions])\n\n  useEffect(() => {\n    fetchAnime()\n  }, [fetchAnime])\n\n  return { anime, loading, error, totalPages, total }\n}\n\nexport function useFeaturedAnime() {\n  const [anime, setAnime] = useState<Anime[]>([])\n  const [loading, setLoading] = useState(true)\n  const [error, setError] = useState<string | null>(null)\n\n  useEffect(() => {\n    const fetchFeaturedAnime = async () => {\n      try {\n        setLoading(true)\n        setError(null)\n        const data = await AnimeService.getFeaturedAnime(5)\n        setAnime(data)\n      } catch (err) {\n        setError(err instanceof Error ? err.message : 'Failed to fetch featured anime')\n      } finally {\n        setLoading(false)\n      }\n    }\n\n    fetchFeaturedAnime()\n  }, [])\n\n  return { anime, loading, error }\n}\n\nexport function useTrendingAnime() {\n  const [anime, setAnime] = useState<Anime[]>([])\n  const [loading, setLoading] = useState(true)\n  const [error, setError] = useState<string | null>(null)\n\n  useEffect(() => {\n    const fetchTrendingAnime = async () => {\n      try {\n        setLoading(true)\n        setError(null)\n        const data = await AnimeService.getTrendingAnime(10)\n        setAnime(data)\n      } catch (err) {\n        setError(err instanceof Error ? err.message : 'Failed to fetch trending anime')\n      } finally {\n        setLoading(false)\n      }\n    }\n\n    fetchTrendingAnime()\n  }, [])\n\n  return { anime, loading, error }\n}\n\nexport function usePopularAnime() {\n  const [anime, setAnime] = useState<Anime[]>([])\n  const [loading, setLoading] = useState(true)\n  const [error, setError] = useState<string | null>(null)\n\n  useEffect(() => {\n    const fetchPopularAnime = async () => {\n      try {\n        setLoading(true)\n        setError(null)\n        const data = await AnimeService.getPopularAnime(12)\n        setAnime(data)\n      } catch (err) {\n        setError(err instanceof Error ? err.message : 'Failed to fetch popular anime')\n      } finally {\n        setLoading(false)\n      }\n    }\n\n    fetchPopularAnime()\n  }, [])\n\n  return { anime, loading, error }\n}\n\nexport function useAnimeById(id: string, userId?: string) {\n  const [anime, setAnime] = useState<any>(null)\n  const [loading, setLoading] = useState(true)\n  const [error, setError] = useState<string | null>(null)\n\n  useEffect(() => {\n    if (!id) return\n\n    const fetchAnime = async () => {\n      try {\n        setLoading(true)\n        setError(null)\n        const data = await AnimeService.getAnimeById(id, userId)\n        setAnime(data)\n      } catch (err) {\n        setError(err instanceof Error ? err.message : 'Failed to fetch anime')\n      } finally {\n        setLoading(false)\n      }\n    }\n\n    fetchAnime()\n  }, [id, userId])\n\n  return { anime, loading, error }\n}\n\nexport function useSearchAnime(query: string, filters?: {\n  genres?: string[]\n  year?: string\n  status?: string\n  sortBy?: string\n}) {\n  const [anime, setAnime] = useState<Anime[]>([])\n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState<string | null>(null)\n\n  useEffect(() => {\n    if (!query || query.length < 2) {\n      setAnime([])\n      return\n    }\n\n    const searchAnime = async () => {\n      try {\n        setLoading(true)\n        setError(null)\n        const data = await AnimeService.searchAnime(query, 50, filters)\n        setAnime(data)\n      } catch (err) {\n        setError(err instanceof Error ? err.message : 'Failed to search anime')\n      } finally {\n        setLoading(false)\n      }\n    }\n\n    const timeoutId = setTimeout(searchAnime, 300) // Debounce search\n    return () => clearTimeout(timeoutId)\n  }, [query, filters?.genres, filters?.year, filters?.status, filters?.sortBy])\n\n  return { anime, loading, error }\n}\n\nexport function useGenres() {\n  const [genres, setGenres] = useState<string[]>([])\n  const [loading, setLoading] = useState(true)\n  const [error, setError] = useState<string | null>(null)\n\n  useEffect(() => {\n    const fetchGenres = async () => {\n      try {\n        setLoading(true)\n        setError(null)\n        const data = await AnimeService.getGenres()\n        setGenres(data)\n      } catch (err) {\n        setError(err instanceof Error ? err.message : 'Failed to fetch genres')\n      } finally {\n        setLoading(false)\n      }\n    }\n\n    fetchGenres()\n  }, [])\n\n  return { genres, loading, error }\n}\n\nexport function useSimilarAnime(animeId: string, genres: string[], limit: number = 6) {\n  const [anime, setAnime] = useState<Anime[]>([])\n  const [loading, setLoading] = useState(true)\n  const [error, setError] = useState<string | null>(null)\n\n  // Memoize the genres array to prevent infinite loops\n  const memoizedGenres = useMemo(() => genres, [genres.join(',')])\n\n  useEffect(() => {\n    if (!animeId || !memoizedGenres || memoizedGenres.length === 0) {\n      setAnime([])\n      setLoading(false)\n      return\n    }\n\n    const fetchSimilarAnime = async () => {\n      try {\n        setLoading(true)\n        setError(null)\n        const data = await AnimeService.getSimilarAnime(animeId, memoizedGenres, limit)\n        setAnime(data)\n      } catch (err) {\n        setError(err instanceof Error ? err.message : 'Failed to fetch similar anime')\n      } finally {\n        setLoading(false)\n      }\n    }\n\n    fetchSimilarAnime()\n  }, [animeId, memoizedGenres, limit])\n\n  return { anime, loading, error }\n}"],"names":["useAnime","options","anime","setAnime","useState","loading","setLoading","error","setError","totalPages","setTotalPages","total","setTotal","memoizedOptions","useMemo","page","limit","genre","year","status","search","fetchAnime","useCallback","async","result","AnimeService","getAnimeList","data","err","Error","message","useEffect","useFeaturedAnime","getFeaturedAnime","fetchFeaturedAnime","useTrendingAnime","getTrendingAnime","fetchTrendingAnime","usePopularAnime","getPopularAnime","fetchPopularAnime","useAnimeById","id","userId","getAnimeById","useGenres","genres","setGenres","getGenres","fetchGenres","useSimilarAnime","animeId","memoizedGenres","join","length","getSimilarAnime","fetchSimilarAnime"],"mappings":"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"}