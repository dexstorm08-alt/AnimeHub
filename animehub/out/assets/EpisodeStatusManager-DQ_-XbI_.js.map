{"version":3,"file":"EpisodeStatusManager-DQ_-XbI_.js","sources":["../../src/services/episodeStatusService.ts","../../src/components/admin/EpisodeStatusManager.tsx","../../src/hooks/useEpisodeStatus.ts"],"sourcesContent":["import { supabase } from '../lib/supabase'\r\n\r\nexport class EpisodeStatusService {\r\n  /**\r\n   * Check if an anime has episodes available for watching\r\n   */\r\n  static async hasEpisodes(animeId: string): Promise<boolean> {\r\n    try {\r\n      // Check if anime has total_episodes > 0 or actual episodes in database\r\n      const { data: anime, error: animeError } = await supabase\r\n        .from('anime')\r\n        .select('total_episodes')\r\n        .eq('id', animeId)\r\n        .single()\r\n\r\n      if (animeError) {\r\n        console.error('Error fetching anime:', animeError)\r\n        return false\r\n      }\r\n\r\n      // Check if anime has episodes in episodes table\r\n      const { data: episodes, error: episodesError } = await supabase\r\n        .from('episodes')\r\n        .select('id')\r\n        .eq('anime_id', animeId)\r\n        .limit(1)\r\n\r\n      if (episodesError) {\r\n        console.error('Error fetching episodes:', episodesError)\r\n        return false\r\n      }\r\n\r\n      // Return true if anime has total_episodes > 0 OR has episodes in database\r\n      return (anime?.total_episodes && anime.total_episodes > 0) || (episodes && episodes.length > 0)\r\n    } catch (error) {\r\n      console.error('Error checking episodes:', error)\r\n      return false\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update anime status based on episode availability\r\n   */\r\n  static async updateAnimeStatus(animeId: string): Promise<boolean> {\r\n    try {\r\n      const hasEpisodes = await this.hasEpisodes(animeId)\r\n      \r\n      if (hasEpisodes) {\r\n        // Update anime status to 'ongoing' if it was 'upcoming'\r\n        const { error } = await supabase\r\n          .from('anime')\r\n          .update({ \r\n            status: 'ongoing',\r\n            updated_at: new Date().toISOString()\r\n          })\r\n          .eq('id', animeId)\r\n          .eq('status', 'upcoming') // Only update if currently upcoming\r\n\r\n        if (error) {\r\n          console.error('Error updating anime status:', error)\r\n          return false\r\n        }\r\n\r\n        console.log(`✅ Updated anime ${animeId} from upcoming to ongoing`)\r\n        return true\r\n      }\r\n\r\n      return false\r\n    } catch (error) {\r\n      console.error('Error updating anime status:', error)\r\n      return false\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Batch update multiple anime statuses\r\n   */\r\n  static async batchUpdateAnimeStatuses(animeIds: string[]): Promise<{ updated: number; errors: number }> {\r\n    let updated = 0\r\n    let errors = 0\r\n\r\n    for (const animeId of animeIds) {\r\n      try {\r\n        const success = await this.updateAnimeStatus(animeId)\r\n        if (success) {\r\n          updated++\r\n        }\r\n      } catch (error) {\r\n        console.error(`Error updating anime ${animeId}:`, error)\r\n        errors++\r\n      }\r\n    }\r\n\r\n    return { updated, errors }\r\n  }\r\n\r\n  /**\r\n   * Get all upcoming anime that might need status updates\r\n   */\r\n  static async getUpcomingAnime(): Promise<any[]> {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('anime')\r\n        .select('id, title, status, total_episodes')\r\n        .eq('status', 'upcoming')\r\n\r\n      if (error) {\r\n        console.error('Error fetching upcoming anime:', error)\r\n        return []\r\n      }\r\n\r\n      return data || []\r\n    } catch (error) {\r\n      console.error('Error fetching upcoming anime:', error)\r\n      return []\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Auto-update all upcoming anime that now have episodes\r\n   */\r\n  static async autoUpdateUpcomingAnime(): Promise<{ updated: number; errors: number }> {\r\n    try {\r\n      const upcomingAnime = await this.getUpcomingAnime()\r\n      const animeIds = upcomingAnime.map(anime => anime.id)\r\n      \r\n      if (animeIds.length === 0) {\r\n        console.log('No upcoming anime to check')\r\n        return { updated: 0, errors: 0 }\r\n      }\r\n\r\n      console.log(`Checking ${animeIds.length} upcoming anime for episode availability...`)\r\n      return await this.batchUpdateAnimeStatuses(animeIds)\r\n    } catch (error) {\r\n      console.error('Error in auto-update:', error)\r\n      return { updated: 0, errors: 1 }\r\n    }\r\n  }\r\n}\r\n","import React, { useState } from 'react';\r\nimport { useAutoUpdateUpcomingAnime } from '../../hooks/useEpisodeStatus';\r\nimport Button from '../base/Button';\r\n\r\ninterface EpisodeStatusManagerProps {\r\n  className?: string;\r\n}\r\n\r\nexport default function EpisodeStatusManager({ className = '' }: EpisodeStatusManagerProps) {\r\n  const { triggerUpdate, isUpdating, lastUpdate, updateStats } = useAutoUpdateUpcomingAnime();\r\n  const [manualUpdateStats, setManualUpdateStats] = useState<{ updated: number; errors: number } | null>(null);\r\n\r\n  const handleManualUpdate = async () => {\r\n    const stats = await triggerUpdate();\r\n    setManualUpdateStats(stats);\r\n  };\r\n\r\n  return (\r\n    <div className={`bg-white/95 backdrop-blur-sm rounded-2xl shadow-xl p-6 border border-white/50 ${className}`}>\r\n      <div className=\"flex items-center justify-between mb-4\">\r\n        <h3 className=\"text-xl font-bold text-teal-800 flex items-center\">\r\n          <i className=\"ri-refresh-line mr-2\"></i>\r\n          Episode Status Manager\r\n        </h3>\r\n        <Button\r\n          onClick={handleManualUpdate}\r\n          disabled={isUpdating}\r\n          className=\"bg-teal-600 hover:bg-teal-700 text-white px-4 py-2 rounded-lg transition-colors disabled:opacity-50\"\r\n        >\r\n          {isUpdating ? (\r\n            <span className=\"flex items-center gap-2\">\r\n              <i className=\"ri-loader-4-line animate-spin\"></i>\r\n              Updating...\r\n            </span>\r\n          ) : (\r\n            <span className=\"flex items-center gap-2\">\r\n              <i className=\"ri-refresh-line\"></i>\r\n              Update Now\r\n            </span>\r\n          )}\r\n        </Button>\r\n      </div>\r\n\r\n      <div className=\"space-y-4\">\r\n        {/* Auto-update status */}\r\n        <div className=\"bg-teal-50 rounded-lg p-4\">\r\n          <h4 className=\"font-semibold text-teal-800 mb-2\">Auto-Update Status</h4>\r\n          <div className=\"grid grid-cols-2 gap-4 text-sm\">\r\n            <div>\r\n              <span className=\"text-teal-600\">Last Update:</span>\r\n              <div className=\"font-medium\">\r\n                {lastUpdate ? lastUpdate.toLocaleString() : 'Never'}\r\n              </div>\r\n            </div>\r\n            <div>\r\n              <span className=\"text-teal-600\">Status:</span>\r\n              <div className=\"font-medium text-green-600\">\r\n                {isUpdating ? 'Updating...' : 'Active'}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Update statistics */}\r\n        {(updateStats || manualUpdateStats) && (\r\n          <div className=\"bg-blue-50 rounded-lg p-4\">\r\n            <h4 className=\"font-semibold text-blue-800 mb-2\">Update Statistics</h4>\r\n            <div className=\"grid grid-cols-2 gap-4 text-sm\">\r\n              <div>\r\n                <span className=\"text-blue-600\">Anime Updated:</span>\r\n                <div className=\"font-medium text-green-600\">\r\n                  {(updateStats || manualUpdateStats)?.updated || 0}\r\n                </div>\r\n              </div>\r\n              <div>\r\n                <span className=\"text-blue-600\">Errors:</span>\r\n                <div className=\"font-medium text-red-600\">\r\n                  {(updateStats || manualUpdateStats)?.errors || 0}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        {/* Information */}\r\n        <div className=\"bg-gray-50 rounded-lg p-4\">\r\n          <h4 className=\"font-semibold text-gray-800 mb-2\">How it works</h4>\r\n          <ul className=\"text-sm text-gray-600 space-y-1\">\r\n            <li>• Automatically checks upcoming anime every 10 minutes</li>\r\n            <li>• Updates status from \"upcoming\" to \"ongoing\" when episodes are available</li>\r\n            <li>• Changes \"Watch Now\" button to \"Upcoming\" when no episodes exist</li>\r\n            <li>• Real-time status updates on anime detail pages</li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import { useState, useEffect } from 'react'\r\nimport { EpisodeStatusService } from '../services/episodeStatusService'\r\n\r\nexport function useAnimeEpisodeStatus(animeId: string) {\r\n  const [hasEpisodes, setHasEpisodes] = useState<boolean | null>(null)\r\n  const [loading, setLoading] = useState(true)\r\n  const [error, setError] = useState<string | null>(null)\r\n\r\n  useEffect(() => {\r\n    if (!animeId) return\r\n\r\n    const checkEpisodeStatus = async () => {\r\n      try {\r\n        setLoading(true)\r\n        setError(null)\r\n        \r\n        const hasEpisodesResult = await EpisodeStatusService.hasEpisodes(animeId)\r\n        setHasEpisodes(hasEpisodesResult)\r\n        \r\n        // If anime has episodes, try to update its status from upcoming to ongoing\r\n        if (hasEpisodesResult) {\r\n          await EpisodeStatusService.updateAnimeStatus(animeId)\r\n        }\r\n      } catch (err) {\r\n        setError(err instanceof Error ? err.message : 'Failed to check episode status')\r\n      } finally {\r\n        setLoading(false)\r\n      }\r\n    }\r\n\r\n    checkEpisodeStatus()\r\n\r\n    // Set up interval to check periodically (every 5 minutes)\r\n    const interval = setInterval(checkEpisodeStatus, 5 * 60 * 1000)\r\n\r\n    return () => clearInterval(interval)\r\n  }, [animeId])\r\n\r\n  return { hasEpisodes, loading, error }\r\n}\r\n\r\nexport function useAutoUpdateUpcomingAnime() {\r\n  const [isUpdating, setIsUpdating] = useState(false)\r\n  const [lastUpdate, setLastUpdate] = useState<Date | null>(null)\r\n  const [updateStats, setUpdateStats] = useState<{ updated: number; errors: number } | null>(null)\r\n\r\n  const triggerUpdate = async () => {\r\n    try {\r\n      setIsUpdating(true)\r\n      const stats = await EpisodeStatusService.autoUpdateUpcomingAnime()\r\n      setUpdateStats(stats)\r\n      setLastUpdate(new Date())\r\n      return stats\r\n    } catch (error) {\r\n      console.error('Error in auto-update:', error)\r\n      return { updated: 0, errors: 1 }\r\n    } finally {\r\n      setIsUpdating(false)\r\n    }\r\n  }\r\n\r\n  // Auto-update every 10 minutes\r\n  useEffect(() => {\r\n    const interval = setInterval(triggerUpdate, 10 * 60 * 1000)\r\n    \r\n    // Initial update\r\n    triggerUpdate()\r\n\r\n    return () => clearInterval(interval)\r\n  }, [])\r\n\r\n  return { \r\n    triggerUpdate, \r\n    isUpdating, \r\n    lastUpdate, \r\n    updateStats \r\n  }\r\n}\r\n"],"names":["EpisodeStatusService","hasEpisodes","animeId","data","anime","error","animeError","supabase","from","select","eq","single","episodes","episodesError","limit","total_episodes","length","updateAnimeStatus","this","update","status","updated_at","Date","toISOString","batchUpdateAnimeStatuses","animeIds","updated","errors","getUpcomingAnime","autoUpdateUpcomingAnime","map","id","EpisodeStatusManager","className","triggerUpdate","isUpdating","lastUpdate","updateStats","setIsUpdating","useState","setLastUpdate","setUpdateStats","async","stats","useEffect","interval","setInterval","clearInterval","useAutoUpdateUpcomingAnime","manualUpdateStats","setManualUpdateStats","jsxs","children","jsx","Button","onClick","disabled","toLocaleString"],"mappings":"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"}