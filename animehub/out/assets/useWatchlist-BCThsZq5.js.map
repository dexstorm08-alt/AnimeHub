{"version":3,"file":"useWatchlist-BCThsZq5.js","sources":["../../src/hooks/useWatchlist.ts"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\r\nimport { UserService } from '../services/userService';\r\nimport { useAuthContext } from '../contexts/AuthContext';\r\n\r\nexport function useWatchlist() {\r\n  const [watchlist, setWatchlist] = useState<any[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const { user } = useAuthContext();\r\n\r\n  const fetchWatchlist = useCallback(async () => {\r\n    if (!user?.id) {\r\n      setWatchlist([]);\r\n      setLoading(false);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      const data = await UserService.getUserWatchlist(user.id);\r\n      setWatchlist(data);\r\n    } catch (err) {\r\n      setError(err instanceof Error ? err.message : 'Failed to fetch watchlist');\r\n      console.error('Watchlist fetch error:', err);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [user?.id]);\r\n\r\n  useEffect(() => {\r\n    fetchWatchlist();\r\n  }, [fetchWatchlist]);\r\n\r\n  const addToWatchlist = useCallback(async (animeId: string) => {\r\n    if (!user?.id) {\r\n      throw new Error('User not authenticated');\r\n    }\r\n\r\n    try {\r\n      await UserService.addToWatchlist(user.id, animeId);\r\n      await fetchWatchlist(); // Refresh the list\r\n    } catch (err) {\r\n      throw new Error(err instanceof Error ? err.message : 'Failed to add to watchlist');\r\n    }\r\n  }, [user?.id, fetchWatchlist]);\r\n\r\n  const removeFromWatchlist = useCallback(async (animeId: string) => {\r\n    if (!user?.id) {\r\n      throw new Error('User not authenticated');\r\n    }\r\n\r\n    try {\r\n      await UserService.removeFromWatchlist(user.id, animeId);\r\n      await fetchWatchlist(); // Refresh the list\r\n    } catch (err) {\r\n      throw new Error(err instanceof Error ? err.message : 'Failed to remove from watchlist');\r\n    }\r\n  }, [user?.id, fetchWatchlist]);\r\n\r\n  const isInWatchlist = useCallback(async (animeId: string) => {\r\n    if (!user?.id) return false;\r\n    \r\n    try {\r\n      return await UserService.isInWatchlist(user.id, animeId);\r\n    } catch (err) {\r\n      console.error('Check watchlist error:', err);\r\n      return false;\r\n    }\r\n  }, [user?.id]);\r\n\r\n  return {\r\n    watchlist,\r\n    loading,\r\n    error,\r\n    addToWatchlist,\r\n    removeFromWatchlist,\r\n    isInWatchlist,\r\n    refetch: fetchWatchlist\r\n  };\r\n}\r\n"],"names":["useWatchlist","watchlist","setWatchlist","useState","loading","setLoading","error","setError","user","useAuthContext","fetchWatchlist","useCallback","async","id","data","UserService","getUserWatchlist","err","Error","message","useEffect","addToWatchlist","animeId","removeFromWatchlist","isInWatchlist","refetch"],"mappings":"sGAIO,SAASA,IACd,MAAOC,EAAWC,GAAgBC,EAAAA,SAAgB,KAC3CC,EAASC,GAAcF,EAAAA,UAAS,IAChCG,EAAOC,GAAYJ,EAAAA,SAAwB,OAC5CK,KAAEA,GAASC,IAEXC,EAAiBC,EAAAA,YAAYC,UACjC,IAAKJ,GAAMK,GAGT,OAFAX,EAAa,SACbG,GAAW,GAIb,IACEA,GAAW,GACXE,EAAS,MACT,MAAMO,QAAaC,EAAYC,iBAAiBR,EAAKK,IACrDX,EAAaY,EACf,OAASG,GACPV,EAASU,aAAeC,MAAQD,EAAIE,QAAU,4BAEhD,CAAA,QACEd,GAAW,EACb,GACC,CAACG,GAAMK,KAEVO,EAAAA,UAAU,KACRV,KACC,CAACA,IAuCJ,MAAO,CACLT,YACAG,UACAE,QACAe,eAzCqBV,cAAYC,MAAOU,IACxC,IAAKd,GAAMK,GACT,MAAM,IAAIK,MAAM,0BAGlB,UACQH,EAAYM,eAAeb,EAAKK,GAAIS,SACpCZ,GACR,OAASO,GACP,MAAM,IAAIC,MAAMD,aAAeC,MAAQD,EAAIE,QAAU,6BACvD,GACC,CAACX,GAAMK,GAAIH,IA+BZa,oBA7B0BZ,cAAYC,MAAOU,IAC7C,IAAKd,GAAMK,GACT,MAAM,IAAIK,MAAM,0BAGlB,UACQH,EAAYQ,oBAAoBf,EAAKK,GAAIS,SACzCZ,GACR,OAASO,GACP,MAAM,IAAIC,MAAMD,aAAeC,MAAQD,EAAIE,QAAU,kCACvD,GACC,CAACX,GAAMK,GAAIH,IAmBZc,cAjBoBb,cAAYC,MAAOU,IACvC,IAAKd,GAAMK,GAAI,OAAO,EAEtB,IACE,aAAaE,EAAYS,cAAchB,EAAKK,GAAIS,EAClD,OAASL,GAEP,OAAO,CACT,GACC,CAACT,GAAMK,KASRY,QAASf,EAEb"}