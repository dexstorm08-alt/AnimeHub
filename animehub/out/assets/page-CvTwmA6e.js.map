{"version":3,"mappings":"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","names":["AnimeManagement","anime","setAnime","useState","loading","setLoading","error","setError","currentPage","setCurrentPage","totalAnime","setTotalAnime","filterStatus","setFilterStatus","filterGenre","setFilterGenre","searchTerm","setSearchTerm","selectedAnime","setSelectedAnime","Set","updatingAnime","setUpdatingAnime","successMessage","setSuccessMessage","showAnimeModal","setShowAnimeModal","selectedAnimeForModal","setSelectedAnimeForModal","animeAnalytics","setAnimeAnalytics","analyticsLoading","setAnalyticsLoading","showAddAnimeModal","setShowAddAnimeModal","showAddEpisodeModal","setShowAddEpisodeModal","selectedAnimeForEpisode","setSelectedAnimeForEpisode","animeEpisodes","setAnimeEpisodes","episodesCache","setEpisodesCache","episodesLoading","setEpisodesLoading","preloadedAnime","setPreloadedAnime","preloadQueue","setPreloadQueue","editingEpisode","setEditingEpisode","showConfirmationDialog","setShowConfirmationDialog","confirmationConfig","setConfirmationConfig","showEditEpisodeModal","setShowEditEpisodeModal","selectedEpisodeForEdit","setSelectedEpisodeForEdit","showEditAnimeModal","setShowEditAnimeModal","selectedAnimeForEdit","setSelectedAnimeForEdit","showImporter","setShowImporter","showScraper","setShowScraper","showScrapedEpisodesModal","setShowScrapedEpisodesModal","scrapedEpisodes","setScrapedEpisodes","failedEpisodes","setFailedEpisodes","scrapingSummary","setScrapingSummary","selectedAnimeForScraping","setSelectedAnimeForScraping","showLargeScraper","setShowLargeScraper","selectedAnimeForLargeScraping","setSelectedAnimeForLargeScraping","fetchAnime","async","page","result","AdminService","getAllAnime","total","setTimeout","length","animeToPreload","slice","map","animeItem","id","filter","has","prev","err","Error","message","useEffect","timer","animeId","preloadEpisodes","clearTimeout","handleStatusChange","newStatus","updateAnimeStatus","handleDeleteAnime","animeTitle","title","confirmText","type","onConfirm","deleteAnime","handleBulkAction","action","selectedIds","Array","from","bulkDeleteAnime","bulkUpdateAnimeStatus","closeAnimeModal","handleAddEpisode","fetchAnimeEpisodes","episodes","getAnimeEpisodes","add","episodesPromise","timeoutPromise","Promise","_","reject","race","newSet","delete","handleEditAnime","handleScrapAnime","HiAnimeScraperService","__vitePreload","import","then","n","h","__VITE_PRELOAD__","scrapeAllEpisodes","maxEpisodes","total_episodes","success","data","summary","successful","failed","embeddingProtected","handleLargeScrape","handleCloseLargeScraper","filteredAnime","item","matchesStatus","status","matchesGenre","genres","some","genre","toLowerCase","includes","matchesSearch","description","totalPages","Math","ceil","getStatusColor","getStatusIcon","getGenreIcon","jsxs","className","children","jsx","onClick","a","Object","keys","htmlFor","placeholder","value","onChange","e","target","size","disabled","checked","allIds","motion","div","initial","opacity","y","animate","src","poster_url","thumbnail","alt","onError","episode_count","average_rating","views","toLocaleString","Date","created_at","toLocaleDateString","index","analytics","getAnimeAnalytics","handleViewAnimeDetails","newSelected","i","pageNumber","scale","exit","fill","stroke","viewBox","strokeLinecap","strokeLinejoin","strokeWidth","d","averageRating","totalReviews","completedViews","reports","episode","episode_number","duration","floor","toString","padStart","handleEditEpisode","handleDeleteEpisode","episodeId","episodeTitle","deleteEpisode","AddAnimeModal","isOpen","onClose","onSuccess","AddEpisodeModal","nextEpisodeNumber","ConfirmationDialog","isLoading","EditEpisodeModal","EditAnimeModal","EnhancedAnimeImporter","AnimeScraperComponent","ScrapedEpisodesModal","onEpisodesAdded","LargeAnimeScraper","totalEpisodes","onScrapingComplete"],"ignoreList":[],"sources":["../../src/pages/admin/anime/page.tsx"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { motion } from 'framer-motion';\nimport { AdminService } from '../../../services/adminService';\nimport AddAnimeModal from '../../../components/admin/AddAnimeModal';\nimport AddEpisodeModal from '../../../components/admin/AddEpisodeModal';\nimport ConfirmationDialog from '../../../components/admin/ConfirmationDialog';\nimport EditAnimeModal from '../../../components/admin/EditAnimeModal';\nimport EditEpisodeModal from '../../../components/admin/EditEpisodeModal';\nimport { EnhancedAnimeImporter } from '../../../components/admin/EnhancedAnimeImporter';\nimport { AnimeScraperComponent } from '../../../components/admin/AnimeScraperComponent';\nimport { ScrapedEpisodesModal } from '../../../components/admin/ScrapedEpisodesModal';\nimport LargeAnimeScraper from '../../../components/admin/LargeAnimeScraper';\n\nexport default function AnimeManagement() {\n  const [anime, setAnime] = useState<any[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalAnime, setTotalAnime] = useState(0);\n  const [filterStatus, setFilterStatus] = useState<string>('all');\n  const [filterGenre, setFilterGenre] = useState<string>('all');\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedAnime, setSelectedAnime] = useState<Set<string>>(new Set());\n  const [updatingAnime, setUpdatingAnime] = useState<string | null>(null);\n  const [successMessage, setSuccessMessage] = useState<string | null>(null);\n  const [showAnimeModal, setShowAnimeModal] = useState(false);\n  const [selectedAnimeForModal, setSelectedAnimeForModal] = useState<any>(null);\n  const [animeAnalytics, setAnimeAnalytics] = useState<any>(null);\n  const [analyticsLoading, setAnalyticsLoading] = useState(false);\n  const [showAddAnimeModal, setShowAddAnimeModal] = useState(false);\n  const [showAddEpisodeModal, setShowAddEpisodeModal] = useState(false);\n  const [selectedAnimeForEpisode, setSelectedAnimeForEpisode] = useState<any>(null);\n  const [animeEpisodes, setAnimeEpisodes] = useState<any[]>([]);\n  const [episodesCache, setEpisodesCache] = useState<Record<string, any[]>>({});\n  const [episodesLoading, setEpisodesLoading] = useState(false);\n  const [preloadedAnime, setPreloadedAnime] = useState<Set<string>>(new Set());\n  const [preloadQueue, setPreloadQueue] = useState<string[]>([]);\n  const [editingEpisode, setEditingEpisode] = useState<string | null>(null);\n  const [showConfirmationDialog, setShowConfirmationDialog] = useState(false);\n  const [confirmationConfig, setConfirmationConfig] = useState<any>(null);\n  const [showEditEpisodeModal, setShowEditEpisodeModal] = useState(false);\n  const [selectedEpisodeForEdit, setSelectedEpisodeForEdit] = useState<any>(null);\n  const [showEditAnimeModal, setShowEditAnimeModal] = useState(false);\n  const [selectedAnimeForEdit, setSelectedAnimeForEdit] = useState<any>(null);\n  const [showImporter, setShowImporter] = useState(false);\n  const [showScraper, setShowScraper] = useState(false);\n  const [showScrapedEpisodesModal, setShowScrapedEpisodesModal] = useState(false);\n  const [scrapedEpisodes, setScrapedEpisodes] = useState<any[]>([]);\n  const [failedEpisodes, setFailedEpisodes] = useState<any[]>([]);\n  const [scrapingSummary, setScrapingSummary] = useState<any>(null);\n  const [selectedAnimeForScraping, setSelectedAnimeForScraping] = useState<any>(null);\n  const [showLargeScraper, setShowLargeScraper] = useState(false);\n  const [selectedAnimeForLargeScraping, setSelectedAnimeForLargeScraping] = useState<any>(null);\n\n  const fetchAnime = async (page: number = 1) => {\n    try {\n      setLoading(true);\n      setError(null);\n      setSuccessMessage(null);\n      \n      const result = await AdminService.getAllAnime(page, 20);\n      setAnime(result.anime);\n      setTotalAnime(result.total);\n      setCurrentPage(page);\n      \n      // Start preloading episodes for visible anime using queue system\n      setTimeout(() => {\n        if (result.anime.length > 0) {\n          const visibleAnime = result.anime.slice(0, 3);\n          const animeToPreload = visibleAnime\n            .map(animeItem => animeItem.id)\n            .filter(id => !episodesCache[id] && !preloadedAnime.has(id));\n          \n          // Add to preload queue\n          setPreloadQueue(prev => [...prev, ...animeToPreload]);\n        }\n      }, 300); // Reduced initial delay\n      \n    } catch (err) {\n      console.error('Failed to fetch anime:', err);\n      setError(err instanceof Error ? err.message : 'Failed to fetch anime');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Process preload queue with rate limiting\n  useEffect(() => {\n    if (preloadQueue.length > 0) {\n      const processQueue = async () => {\n        const animeId = preloadQueue[0];\n        if (animeId && !episodesCache[animeId] && !preloadedAnime.has(animeId)) {\n          await preloadEpisodes(animeId);\n        }\n        \n        // Remove processed item and continue\n        setPreloadQueue(prev => prev.slice(1));\n      };\n      \n      // Process one item every 300ms\n      const timer = setTimeout(processQueue, 300);\n      return () => clearTimeout(timer);\n    }\n  }, [preloadQueue, episodesCache, preloadedAnime]);\n\n  useEffect(() => {\n    fetchAnime();\n  }, [filterStatus, filterGenre, searchTerm]);\n\n  const handleStatusChange = async (animeId: string, newStatus: 'published' | 'pending' | 'draft') => {\n    try {\n      setUpdatingAnime(animeId);\n      setError(null);\n      setSuccessMessage(null);\n      \n      await AdminService.updateAnimeStatus(animeId, newStatus);\n      await fetchAnime(currentPage);\n      \n      setSuccessMessage(`Anime status updated to ${newStatus} successfully!`);\n      setTimeout(() => setSuccessMessage(null), 3000);\n    } catch (err) {\n      console.error('Failed to update anime status:', err);\n      setError(err instanceof Error ? err.message : 'Failed to update anime status');\n    } finally {\n      setUpdatingAnime(null);\n    }\n  };\n\n  const handleDeleteAnime = (animeId: string, animeTitle: string) => {\n    setConfirmationConfig({\n      title: 'Delete Anime',\n      message: `Are you sure you want to delete \"${animeTitle}\"? This will permanently delete:\n      \n• All episodes and their data\n• All user reviews and ratings\n• All user watch progress and favorites\n• All content reports\n• The anime itself\n\nThis action cannot be undone.`,\n      confirmText: 'Delete Anime',\n      type: 'danger',\n      onConfirm: async () => {\n        try {\n          setUpdatingAnime(animeId);\n          setError(null);\n          setSuccessMessage(null);\n          \n          await AdminService.deleteAnime(animeId);\n          await fetchAnime(currentPage);\n          \n          setSuccessMessage(`Anime \"${animeTitle}\" deleted successfully!`);\n          setTimeout(() => setSuccessMessage(null), 3000);\n        } catch (err) {\n          console.error('Failed to delete anime:', err);\n          setError(err instanceof Error ? err.message : 'Failed to delete anime');\n        } finally {\n          setUpdatingAnime(null);\n          setShowConfirmationDialog(false);\n        }\n      }\n    });\n    setShowConfirmationDialog(true);\n  };\n\n  const handleBulkAction = async (action: 'published' | 'pending' | 'draft' | 'delete') => {\n    const selectedIds = Array.from(selectedAnime);\n    \n    if (selectedIds.length === 0) return;\n\n    try {\n      setUpdatingAnime('bulk');\n      setError(null);\n      setSuccessMessage(null);\n\n      if (action === 'delete') {\n        setConfirmationConfig({\n          title: 'Delete Multiple Anime',\n          message: `Are you sure you want to delete ${selectedIds.length} anime? This will permanently delete:\n\n• All episodes and their data for each anime\n• All user reviews and ratings\n• All user watch progress and favorites\n• All content reports\n• The anime themselves\n\nThis action cannot be undone.`,\n          confirmText: `Delete ${selectedIds.length} Anime`,\n          type: 'danger',\n          onConfirm: async () => {\n            await AdminService.bulkDeleteAnime(selectedIds);\n            setSuccessMessage(`${selectedIds.length} anime deleted successfully!`);\n            await fetchAnime(currentPage);\n            setSelectedAnime(new Set());\n            setShowConfirmationDialog(false);\n          }\n        });\n        setShowConfirmationDialog(true);\n        return;\n      } else {\n        await AdminService.bulkUpdateAnimeStatus(selectedIds, action);\n        setSuccessMessage(`${selectedIds.length} anime status updated to ${action}!`);\n      }\n\n      await fetchAnime(currentPage);\n      setSelectedAnime(new Set());\n      setTimeout(() => setSuccessMessage(null), 3000);\n    } catch (err) {\n      console.error('Failed to perform bulk action:', err);\n      setError(err instanceof Error ? err.message : 'Failed to perform bulk action');\n    } finally {\n      setUpdatingAnime(null);\n    }\n  };\n\n  const closeAnimeModal = () => {\n    setShowAnimeModal(false);\n    setSelectedAnimeForModal(null);\n    setAnimeAnalytics(null);\n    setAnimeEpisodes([]); // Clear episodes when modal closes\n  };\n\n  const handleAnimeCreated = () => {\n    setShowAddAnimeModal(false);\n    fetchAnime(currentPage);\n    setSuccessMessage('Anime created successfully!');\n    setTimeout(() => setSuccessMessage(null), 3000);\n  };\n\n  const handleEpisodeCreated = async () => {\n    setShowAddEpisodeModal(false);\n    setSelectedAnimeForEpisode(null);\n    fetchAnime(currentPage);\n    if (selectedAnimeForModal) {\n      await fetchAnimeEpisodes(selectedAnimeForModal.id);\n      // Clear cache to force refresh\n      setEpisodesCache(prev => ({ ...prev, [selectedAnimeForModal.id]: undefined }));\n    }\n    setSuccessMessage('Episode created successfully!');\n    setTimeout(() => setSuccessMessage(null), 3000);\n  };\n\n  const handleAddEpisode = (anime: any) => {\n    setSelectedAnimeForEpisode(anime);\n    setShowAddEpisodeModal(true);\n  };\n\n  const fetchAnimeEpisodes = async (animeId: string) => {\n    try {\n      // Check cache first for instant loading\n      if (episodesCache[animeId]) {\n        setAnimeEpisodes(episodesCache[animeId]);\n        return;\n      }\n      \n      // Show loading only when fetching from database\n      setEpisodesLoading(true);\n      \n      // Load episodes from database\n      const episodes = await AdminService.getAnimeEpisodes(animeId);\n      setAnimeEpisodes(episodes);\n      \n      // Cache the episodes for future use\n      setEpisodesCache(prev => ({ ...prev, [animeId]: episodes }));\n    } catch (err) {\n      console.error('Failed to fetch episodes:', err);\n      setError('Failed to fetch episodes');\n    } finally {\n      setEpisodesLoading(false);\n    }\n  };\n\n  // Background preloading function (no UI loading state)\n  const preloadEpisodes = async (animeId: string) => {\n    try {\n      // Skip if already cached or currently loading\n      if (episodesCache[animeId] || preloadedAnime.has(animeId)) {\n        return;\n      }\n\n      setPreloadedAnime(prev => new Set(prev).add(animeId));\n      \n      // Load episodes silently in background with timeout\n      const episodesPromise = AdminService.getAnimeEpisodes(animeId);\n      const timeoutPromise = new Promise((_, reject) => \n        setTimeout(() => reject(new Error('Timeout')), 5000)\n      );\n      \n      const episodes = await Promise.race([episodesPromise, timeoutPromise]) as any[];\n      \n      // Cache the episodes for instant future access\n      setEpisodesCache(prev => ({ ...prev, [animeId]: episodes }));\n      \n      console.log(`✅ Preloaded ${episodes.length} episodes for anime ${animeId}`);\n    } catch (err) {\n      console.error(`Failed to preload episodes for ${animeId}:`, err);\n      // Remove from preloaded set on error so it can be retried\n      setPreloadedAnime(prev => {\n        const newSet = new Set(prev);\n        newSet.delete(animeId);\n        return newSet;\n      });\n    }\n  };\n\n  const handleDeleteEpisode = (episodeId: string, episodeTitle: string) => {\n    setConfirmationConfig({\n      title: 'Delete Episode',\n      message: `Are you sure you want to delete \"${episodeTitle}\"? This action cannot be undone and will also delete all associated user progress and reviews.`,\n      confirmText: 'Delete Episode',\n      type: 'danger',\n      onConfirm: async () => {\n        try {\n          setEditingEpisode(episodeId);\n          await AdminService.deleteEpisode(episodeId);\n          await fetchAnimeEpisodes(selectedAnimeForModal.id);\n          // Clear cache to force refresh\n          setEpisodesCache(prev => ({ ...prev, [selectedAnimeForModal.id]: undefined }));\n          setSuccessMessage(`Episode \"${episodeTitle}\" deleted successfully!`);\n          setTimeout(() => setSuccessMessage(null), 3000);\n        } catch (err) {\n          console.error('Failed to delete episode:', err);\n          setError('Failed to delete episode');\n        } finally {\n          setEditingEpisode(null);\n          setShowConfirmationDialog(false);\n        }\n      }\n    });\n    setShowConfirmationDialog(true);\n  };\n\n  const handleEditEpisode = (episode: any) => {\n    setSelectedEpisodeForEdit(episode);\n    setShowEditEpisodeModal(true);\n  };\n\n  const handleEpisodeUpdated = async () => {\n    setShowEditEpisodeModal(false);\n    setSelectedEpisodeForEdit(null);\n    if (selectedAnimeForModal) {\n      await fetchAnimeEpisodes(selectedAnimeForModal.id);\n      // Clear cache to force refresh\n      setEpisodesCache(prev => ({ ...prev, [selectedAnimeForModal.id]: undefined }));\n    }\n    setSuccessMessage('Episode updated successfully!');\n    setTimeout(() => setSuccessMessage(null), 3000);\n  };\n\n  const handleEditAnime = (anime: any) => {\n    setSelectedAnimeForEdit(anime);\n    setShowEditAnimeModal(true);\n  };\n\n  const handleAnimeUpdated = async () => {\n    setShowEditAnimeModal(false);\n    setSelectedAnimeForEdit(null);\n    await fetchAnime(currentPage);\n    setSuccessMessage('Anime updated successfully!');\n    setTimeout(() => setSuccessMessage(null), 3000);\n  };\n\n  const handleScrapAnime = async (anime: any) => {\n    try {\n      setError(null);\n      setSuccessMessage(null);\n      \n      console.log(`🎬 Starting scrape for all episodes of \"${anime.title}\" (ID: ${anime.id})`);\n      \n      // Import the scraper service\n      const { HiAnimeScraperService } = await import('../../../services/hianimeScraperService');\n      \n      // Scrape all episodes\n      const result = await HiAnimeScraperService.scrapeAllEpisodes(anime.title, {\n        animeId: anime.id,\n        maxEpisodes: anime.total_episodes || 50\n      });\n      \n      if (result.success && result.data) {\n        // Set the scraped data\n        setScrapedEpisodes(result.data.scrapedEpisodes || []);\n        setFailedEpisodes(result.data.failedEpisodes || []);\n        setScrapingSummary(result.data.summary || { total: 0, successful: 0, failed: 0, embeddingProtected: 0 });\n        setSelectedAnimeForScraping(anime);\n        setShowScrapedEpisodesModal(true);\n        \n        setSuccessMessage(`✅ Scraped ${result.data.summary?.successful || 0} episodes successfully!`);\n        setTimeout(() => setSuccessMessage(null), 5000);\n      } else {\n        setError(`❌ Scraping failed: ${result.error}`);\n        setTimeout(() => setError(null), 10000);\n      }\n    } catch (error: any) {\n      console.error('Scraping error:', error);\n      setError(`❌ Error: ${error.message}`);\n      setTimeout(() => setError(null), 10000);\n    }\n  };\n\n  const handleLargeScrape = (anime: any) => {\n    setSelectedAnimeForLargeScraping(anime);\n    setShowLargeScraper(true);\n  };\n\n  const handleCloseLargeScraper = () => {\n    setShowLargeScraper(false);\n    setSelectedAnimeForLargeScraping(null);\n    // Refresh the anime list to show updated episode count\n    fetchAnime(currentPage);\n  };\n\n  const handleCloseScrapedEpisodesModal = () => {\n    setShowScrapedEpisodesModal(false);\n    setScrapedEpisodes([]);\n    setFailedEpisodes([]);\n    setScrapingSummary(null);\n    setSelectedAnimeForScraping(null);\n    // Refresh the anime list to show updated episode count\n    fetchAnime(currentPage);\n  };\n\n  const handleViewAnimeDetails = async (anime: any) => {\n    setSelectedAnimeForModal(anime);\n    setShowAnimeModal(true);\n    \n    // Use preloaded episodes if available, otherwise clear episodes\n    if (episodesCache[anime.id]) {\n      setAnimeEpisodes(episodesCache[anime.id]);\n    } else {\n      setAnimeEpisodes([]);\n    }\n    \n    setAnalyticsLoading(true);\n    \n    try {\n      // Fetch detailed analytics\n      const analytics = await AdminService.getAnimeAnalytics(anime.id);\n      setAnimeAnalytics(analytics);\n      \n      // Only fetch episodes if not already cached\n      if (!episodesCache[anime.id]) {\n        fetchAnimeEpisodes(anime.id);\n      }\n    } catch (err) {\n      console.error('Failed to fetch anime analytics:', err);\n      setError('Failed to fetch anime details');\n    } finally {\n      setAnalyticsLoading(false);\n    }\n  };\n\n  const filteredAnime = anime.filter(item => {\n    const matchesStatus = filterStatus === 'all' || item.status === filterStatus;\n    const matchesGenre = filterGenre === 'all' || \n      (item.genres && item.genres.some((genre: string) => genre.toLowerCase().includes(filterGenre.toLowerCase())));\n    const matchesSearch = searchTerm === '' || \n      item.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      (item.description && item.description.toLowerCase().includes(searchTerm.toLowerCase()));\n    return matchesStatus && matchesGenre && matchesSearch;\n  });\n\n  const totalPages = Math.ceil(totalAnime / 20);\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'published': return 'bg-green-100 text-green-800 border-green-200';\n      case 'pending': return 'bg-yellow-100 text-yellow-800 border-yellow-200';\n      case 'draft': return 'bg-gray-100 text-gray-800 border-gray-200';\n      default: return 'bg-gray-100 text-gray-800 border-gray-200';\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'published': return '✅';\n      case 'pending': return '⏳';\n      case 'draft': return '📝';\n      default: return '📄';\n    }\n  };\n\n  const getGenreIcon = (genre: string) => {\n    switch (genre.toLowerCase()) {\n      case 'action': return '⚔️';\n      case 'romance': return '💕';\n      case 'comedy': return '😂';\n      case 'drama': return '🎭';\n      case 'fantasy': return '🧙‍♂️';\n      case 'sci-fi': return '🚀';\n      case 'horror': return '👻';\n      case 'slice of life': return '🌸';\n      default: return '🎬';\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 py-8\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          {/* Header */}\n        <div className=\"mb-8\">\n          <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center\">\n            <div>\n              <h1 className=\"text-3xl font-bold text-gray-900\">Anime Management</h1>\n              <p className=\"mt-2 text-gray-600\">Manage your anime content library</p>\n            </div>\n            <div className=\"flex space-x-3 mt-4 sm:mt-0\">\n              <button\n                onClick={() => setShowAddAnimeModal(true)}\n                className=\"px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors duration-200 flex items-center space-x-2\"\n              >\n                <span className=\"text-lg\">🎬</span>\n                <span>Add New Anime</span>\n              </button>\n              <button\n                onClick={() => setShowImporter(true)}\n                className=\"px-6 py-3 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors duration-200 flex items-center space-x-2\"\n              >\n                <span className=\"text-lg\">📥</span>\n                <span>Import Anime</span>\n              </button>\n              <button\n                onClick={() => setShowScraper(true)}\n                className=\"px-6 py-3 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors duration-200 flex items-center space-x-2\"\n              >\n                <span className=\"text-lg\">🎬</span>\n                <span>Episode Scraper</span>\n              </button>\n            </div>\n          </div>\n        </div>\n\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n          <div className=\"bg-white rounded-xl shadow-sm p-6 border border-gray-200\">\n            <div className=\"flex items-center\">\n              <div className=\"flex-shrink-0\">\n                <div className=\"w-8 h-8 bg-blue-100 rounded-lg flex items-center justify-center\">\n                  <span className=\"text-blue-600 text-lg\">🎬</span>\n                </div>\n              </div>\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-500\">Total Anime</p>\n                <p className=\"text-2xl font-bold text-gray-900\">{totalAnime}</p>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"bg-white rounded-xl shadow-sm p-6 border border-gray-200\">\n            <div className=\"flex items-center\">\n              <div className=\"flex-shrink-0\">\n                <div className=\"w-8 h-8 bg-green-100 rounded-lg flex items-center justify-center\">\n                  <span className=\"text-green-600 text-lg\">✅</span>\n                </div>\n              </div>\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-500\">Published</p>\n                <p className=\"text-2xl font-bold text-gray-900\">\n                  {anime.filter(a => a.status === 'published').length}\n                </p>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"bg-white rounded-xl shadow-sm p-6 border border-gray-200\">\n            <div className=\"flex items-center\">\n              <div className=\"flex-shrink-0\">\n                <div className=\"w-8 h-8 bg-yellow-100 rounded-lg flex items-center justify-center\">\n                  <span className=\"text-yellow-600 text-lg\">⏳</span>\n                </div>\n              </div>\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-500\">Pending</p>\n                <p className=\"text-2xl font-bold text-gray-900\">\n                  {anime.filter(a => a.status === 'pending').length}\n                </p>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"bg-white rounded-xl shadow-sm p-6 border border-gray-200\">\n            <div className=\"flex items-center\">\n              <div className=\"flex-shrink-0\">\n                <div className=\"w-8 h-8 bg-gray-100 rounded-lg flex items-center justify-center\">\n                  <span className=\"text-gray-600 text-lg\">📝</span>\n                </div>\n              </div>\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-500\">Drafts</p>\n                <p className=\"text-2xl font-bold text-gray-900\">\n                  {anime.filter(a => a.status === 'draft').length}\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Filters and Search */}\n        <div className=\"bg-white rounded-xl shadow-sm p-6 border border-gray-200 mb-6\">\n          {error && (\n            <div className=\"bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4\">\n              {error}\n            </div>\n          )}\n          \n          {successMessage && (\n            <div className=\"bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded mb-4\">\n              {successMessage}\n            </div>\n          )}\n\n          {/* Preloading Status */}\n          {Object.keys(episodesCache).length > 0 && (\n            <div className=\"bg-blue-50 border border-blue-200 text-blue-700 px-4 py-3 rounded mb-4\">\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-4 h-4 border-2 border-blue-300 border-t-blue-600 rounded-full animate-spin\"></div>\n                <span className=\"text-sm\">\n                  ⚡ Preloaded episodes for {Object.keys(episodesCache).length} anime - Click \"View Details\" for instant loading!\n                </span>\n              </div>\n            </div>\n          )}\n          \n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n            {/* Search */}\n            <div className=\"md:col-span-2\">\n              <label htmlFor=\"search\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Search Anime\n              </label>\n                  <input\n                    type=\"text\"\n                id=\"search\"\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500\"\n                placeholder=\"Search by title or description...\"\n                    value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                  />\n              </div>\n\n            {/* Status Filter */}\n              <div>\n              <label htmlFor=\"statusFilter\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Filter by Status\n              </label>\n                <select\n                id=\"statusFilter\"\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500\"\n                value={filterStatus}\n                onChange={(e) => setFilterStatus(e.target.value)}\n                >\n                  <option value=\"all\">All Status</option>\n                  <option value=\"published\">Published</option>\n                  <option value=\"pending\">Pending</option>\n                  <option value=\"draft\">Draft</option>\n                </select>\n              </div>\n\n            {/* Genre Filter */}\n              <div>\n              <label htmlFor=\"genreFilter\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Filter by Genre\n              </label>\n                <select\n                id=\"genreFilter\"\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500\"\n                value={filterGenre}\n                onChange={(e) => setFilterGenre(e.target.value)}\n                >\n                  <option value=\"all\">All Genres</option>\n                  <option value=\"action\">Action</option>\n                  <option value=\"romance\">Romance</option>\n                  <option value=\"comedy\">Comedy</option>\n                  <option value=\"drama\">Drama</option>\n                  <option value=\"fantasy\">Fantasy</option>\n                <option value=\"sci-fi\">Sci-Fi</option>\n                <option value=\"horror\">Horror</option>\n                <option value=\"slice of life\">Slice of Life</option>\n                </select>\n            </div>\n          </div>\n              </div>\n\n        {/* Bulk Actions */}\n        {selectedAnime.size > 0 && (\n          <div className=\"bg-blue-50 border border-blue-200 rounded-xl p-4 mb-6\">\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-blue-800 font-medium\">\n                {selectedAnime.size} anime selected\n              </span>\n              <div className=\"flex space-x-2\">\n                <button\n                  onClick={() => handleBulkAction('published')}\n                  disabled={updatingAnime === 'bulk'}\n                  className=\"px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 disabled:opacity-50 transition-colors text-sm\"\n                >\n                  {updatingAnime === 'bulk' ? 'Updating...' : 'Publish Selected'}\n                </button>\n                <button\n                  onClick={() => handleBulkAction('pending')}\n                  disabled={updatingAnime === 'bulk'}\n                  className=\"px-4 py-2 bg-yellow-600 text-white rounded-lg hover:bg-yellow-700 disabled:opacity-50 transition-colors text-sm\"\n                >\n                  {updatingAnime === 'bulk' ? 'Updating...' : 'Mark Pending'}\n                </button>\n                <button\n                  onClick={() => handleBulkAction('draft')}\n                  disabled={updatingAnime === 'bulk'}\n                  className=\"px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700 disabled:opacity-50 transition-colors text-sm\"\n                >\n                  {updatingAnime === 'bulk' ? 'Updating...' : 'Mark Draft'}\n                </button>\n                <button\n                  onClick={() => handleBulkAction('delete')}\n                  disabled={updatingAnime === 'bulk'}\n                  className=\"px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 disabled:opacity-50 transition-colors text-sm\"\n                >\n                  {updatingAnime === 'bulk' ? 'Deleting...' : 'Delete Selected'}\n                </button>\n                <button\n                  onClick={() => setSelectedAnime(new Set())}\n                  className=\"px-4 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600 transition-colors text-sm\"\n                >\n                  Clear Selection\n                </button>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Select All Header */}\n        {!loading && filteredAnime.length > 0 && (\n          <div className=\"bg-gray-50 border border-gray-200 rounded-xl p-4 mb-4\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-3\">\n                <input\n                  type=\"checkbox\"\n                  checked={selectedAnime.size === filteredAnime.length && filteredAnime.length > 0}\n                  onChange={(e) => {\n                    if (e.target.checked) {\n                      // Select all visible anime\n                      const allIds = new Set(filteredAnime.map(item => item.id));\n                      setSelectedAnime(allIds);\n                    } else {\n                      // Deselect all\n                      setSelectedAnime(new Set());\n                    }\n                  }}\n                  className=\"rounded border-gray-300 text-blue-600 focus:ring-blue-500\"\n                />\n                <span className=\"text-sm font-medium text-gray-700\">\n                  Select All ({filteredAnime.length} anime)\n                </span>\n              </div>\n              <div className=\"text-sm text-gray-500\">\n                {selectedAnime.size > 0 && `${selectedAnime.size} selected`}\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Anime List */}\n        {loading ? (\n          <div className=\"flex justify-center items-center h-64\">\n            <div className=\"w-12 h-12 border-4 border-blue-200 border-t-blue-600 rounded-full animate-spin\"></div>\n          </div>\n        ) : (\n          <div className=\"space-y-4\">\n            {filteredAnime.map((item) => (\n          <motion.div\n                key={item.id}\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n                className=\"bg-white rounded-xl shadow-sm border border-gray-200 p-6 hover:shadow-md transition-shadow\"\n              >\n                <div className=\"flex items-start justify-between\">\n                  {/* Anime Info */}\n                  <div className=\"flex-1 flex items-start space-x-4\">\n                    <div className=\"flex-shrink-0\">\n                      <img\n                        className=\"h-24 w-18 rounded-lg object-cover shadow-md\"\n                        src={item.poster_url || item.thumbnail || '/placeholder-anime.jpg'}\n                        alt={item.title}\n                        onError={(e) => {\n                          const target = e.target as HTMLImageElement;\n                          target.src = 'https://via.placeholder.com/150x200/6366f1/ffffff?text=Anime';\n                        }}\n                      />\n                </div>\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center space-x-3 mb-2\">\n                        <h3 className=\"text-xl font-semibold text-gray-900\">{item.title}</h3>\n                        <span className={`px-3 py-1 rounded-full text-xs font-medium border ${getStatusColor(item.status)}`}>\n                          {getStatusIcon(item.status)} {item.status}\n                        </span>\n                        {episodesCache[item.id] && (\n                          <span className=\"px-2 py-1 bg-green-100 text-green-700 rounded-full text-xs font-medium\">\n                            ⚡ {episodesCache[item.id].length} episodes ready\n                          </span>\n                        )}\n            </div>\n\n                      <p className=\"text-gray-600 text-sm mb-3 line-clamp-2\">\n                        {item.description || 'No description available'}\n                      </p>\n                      \n                      <div className=\"flex flex-wrap items-center gap-4 text-sm text-gray-500\">\n                        <span className=\"flex items-center space-x-1\">\n                          <span className=\"text-lg\">🎬</span>\n                          <span>{item.episode_count || 0} episodes</span>\n                        </span>\n                        \n                        <span className=\"flex items-center space-x-1\">\n                          <span className=\"text-lg\">⭐</span>\n                          <span>Rating: {item.average_rating || 'N/A'}</span>\n                        </span>\n                        \n                        <span className=\"flex items-center space-x-1\">\n                          <span className=\"text-lg\">👀</span>\n                          <span>{item.views?.toLocaleString() || '0'} views</span>\n                        </span>\n                        \n                        <span className=\"flex items-center space-x-1\">\n                          <span className=\"text-lg\">📅</span>\n                          <span>{new Date(item.created_at).toLocaleDateString()}</span>\n                        </span>\n                        \n                        {item.genres && item.genres.length > 0 && (\n                          <div className=\"flex items-center space-x-1\">\n                            <span className=\"text-lg\">🏷️</span>\n                            <div className=\"flex space-x-1\">\n                              {item.genres.slice(0, 3).map((genre: string, index: number) => (\n                                <span key={index} className=\"flex items-center space-x-1\">\n                                  <span>{getGenreIcon(genre)}</span>\n                                  <span>{genre}</span>\n                                </span>\n                              ))}\n                              {item.genres.length > 3 && (\n                                <span className=\"text-gray-400\">+{item.genres.length - 3} more</span>\n                              )}\n                </div>\n              </div>\n                        )}\n                </div>\n              </div>\n            </div>\n\n                  {/* Actions */}\n                  <div className=\"flex flex-col space-y-3\">\n                    {/* Status Change */}\n                    <div className=\"flex items-center space-x-2\">\n                      <label className=\"text-sm font-medium text-gray-700\">Status:</label>\n                      <div className=\"flex items-center space-x-2\">\n                        <select\n                          value={item.status}\n                          onChange={(e) => handleStatusChange(item.id, e.target.value as any)}\n                          disabled={updatingAnime === item.id}\n                          className=\"px-3 py-1 border border-gray-300 rounded-md text-sm focus:ring-blue-500 focus:border-blue-500 disabled:opacity-50\"\n                        >\n                          <option value=\"published\">Published</option>\n                          <option value=\"pending\">Pending</option>\n                          <option value=\"draft\">Draft</option>\n                        </select>\n                        {updatingAnime === item.id && (\n                          <div className=\"w-4 h-4 border-2 border-blue-600 border-t-transparent rounded-full animate-spin\"></div>\n                        )}\n                </div>\n              </div>\n\n                    {/* Action Buttons */}\n                    <div className=\"flex flex-wrap gap-2\">\n                      <button \n                        onClick={() => handleViewAnimeDetails(item)}\n                        className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors text-sm\"\n                      >\n                        View Details\n                      </button>\n                      <button\n                        onClick={() => handleEditAnime(item)}\n                        className=\"px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors text-sm\"\n                      >\n                        Edit\n                      </button>\n                      <button\n                        onClick={() => handleAddEpisode(item)}\n                        className=\"px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors text-sm\"\n                      >\n                        Add Episode\n                      </button>\n                      <button\n                        onClick={() => handleScrapAnime(item)}\n                        className=\"px-4 py-2 bg-orange-600 text-white rounded-lg hover:bg-orange-700 transition-colors text-sm flex items-center space-x-1\"\n                      >\n                        <span>🎬</span>\n                        <span>Scrap Episodes</span>\n                      </button>\n                      <button\n                        onClick={() => handleLargeScrape(item)}\n                        className=\"px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors text-sm flex items-center space-x-1\"\n                      >\n                        <span>🚀</span>\n                        <span>Large Scrape</span>\n                      </button>\n                      <button\n                        onClick={() => handleDeleteAnime(item.id, item.title)}\n                        disabled={updatingAnime === item.id}\n                        className=\"px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 disabled:opacity-50 transition-colors text-sm\"\n                      >\n                        {updatingAnime === item.id ? 'Deleting...' : 'Delete'}\n                      </button>\n            </div>\n\n                    {/* Selection Checkbox */}\n                    <div className=\"flex items-center space-x-2\">\n                      <input\n                        type=\"checkbox\"\n                        checked={selectedAnime.has(item.id)}\n                        onChange={(e) => {\n                          const newSelected = new Set(selectedAnime);\n                          if (e.target.checked) {\n                            newSelected.add(item.id);\n                          } else {\n                            newSelected.delete(item.id);\n                          }\n                          setSelectedAnime(newSelected);\n                        }}\n                        className=\"rounded border-gray-300 text-blue-600 focus:ring-blue-500\"\n                      />\n                      <span className=\"text-sm text-gray-500\">Select for bulk action</span>\n                    </div>\n                          </div>\n                        </div>\n              </motion.div>\n            ))}\n            \n            {filteredAnime.length === 0 && (\n              <div className=\"text-center py-12\">\n                <div className=\"text-gray-400 text-6xl mb-4\">🎬</div>\n                <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No anime found</h3>\n                <p className=\"text-gray-500\">\n                  {searchTerm || filterStatus !== 'all' || filterGenre !== 'all'\n                    ? 'No anime match your current filters.'\n                    : 'There are no anime to display.'\n                  }\n                </p>\n              </div>\n            )}\n          </div>\n        )}\n\n        {/* Pagination */}\n        {totalPages > 1 && (\n          <div className=\"flex justify-center mt-8 space-x-2\">\n                          <button\n              onClick={() => fetchAnime(currentPage - 1)}\n              disabled={currentPage === 1 || loading}\n              className=\"px-4 py-2 bg-gray-200 text-gray-700 rounded-lg hover:bg-gray-300 disabled:opacity-50\"\n            >\n              Previous\n                          </button>\n            {Array.from({ length: totalPages }, (_, i) => i + 1).map(pageNumber => (\n                          <button\n                key={pageNumber}\n                onClick={() => fetchAnime(pageNumber)}\n                disabled={currentPage === pageNumber || loading}\n                className={`px-4 py-2 rounded-lg ${\n                  currentPage === pageNumber\n                    ? 'bg-blue-600 text-white'\n                    : 'bg-gray-200 text-gray-700 hover:bg-gray-300'\n                }`}\n              >\n                {pageNumber}\n                          </button>\n            ))}\n                          <button\n              onClick={() => fetchAnime(currentPage + 1)}\n              disabled={currentPage === totalPages || loading}\n              className=\"px-4 py-2 bg-gray-200 text-gray-700 rounded-lg hover:bg-gray-300 disabled:opacity-50\"\n                          >\n              Next\n                          </button>\n                        </div>\n        )}\n      </div>\n\n      {/* Anime Details Modal */}\n      {showAnimeModal && selectedAnimeForModal && (\n        <div className=\"fixed inset-0 bg-gradient-to-br from-blue-900/20 via-purple-900/20 to-pink-900/20 backdrop-blur-md flex items-center justify-center z-50 p-4\">\n          <motion.div\n            initial={{ opacity: 0, scale: 0.95, y: 20 }}\n            animate={{ opacity: 1, scale: 1, y: 0 }}\n            exit={{ opacity: 0, scale: 0.95, y: 20 }}\n            className=\"bg-white/10 backdrop-blur-xl border border-white/20 rounded-2xl shadow-2xl max-w-4xl w-full max-h-[90vh] overflow-y-auto\"\n          >\n            {/* Modal Header */}\n            <div className=\"flex items-center justify-between p-6 border-b border-white/10\">\n              <h2 className=\"text-2xl font-bold text-white drop-shadow-lg\">Anime Details</h2>\n              <button\n                onClick={closeAnimeModal}\n                className=\"text-white/70 hover:text-white transition-colors p-2 rounded-full hover:bg-white/10\"\n              >\n                <svg className=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n                </svg>\n              </button>\n            </div>\n\n            {/* Modal Content */}\n            <div className=\"p-6\">\n              <div className=\"flex items-start space-x-6 mb-6\">\n                {/* Poster */}\n                <div className=\"flex-shrink-0\">\n                  <img\n                    className=\"h-48 w-36 rounded-xl object-cover border-4 border-white/30 shadow-xl\"\n                    src={selectedAnimeForModal.poster_url || selectedAnimeForModal.thumbnail || '/placeholder-anime.jpg'}\n                    alt={selectedAnimeForModal.title}\n                    onError={(e) => {\n                      const target = e.target as HTMLImageElement;\n                      target.src = 'https://via.placeholder.com/300x400/6366f1/ffffff?text=Anime';\n                    }}\n                  />\n                </div>\n\n                {/* Details */}\n                <div className=\"flex-1\">\n                  <div className=\"flex items-center space-x-3 mb-3\">\n                    <h3 className=\"text-3xl font-bold text-white drop-shadow-lg\">{selectedAnimeForModal.title}</h3>\n                    <span className={`px-3 py-1 rounded-full text-sm font-medium backdrop-blur-sm border border-white/20 ${getStatusColor(selectedAnimeForModal.status)}`}>\n                      {getStatusIcon(selectedAnimeForModal.status)} {selectedAnimeForModal.status}\n                    </span>\n                  </div>\n                  \n                  <p className=\"text-white/80 text-lg mb-4 drop-shadow-sm\">\n                    {selectedAnimeForModal.description || 'No description available'}\n                  </p>\n                  \n                  <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                    <div className=\"flex items-center space-x-2 bg-white/10 backdrop-blur-sm rounded-lg p-3 border border-white/10\">\n                      <span className=\"text-white/70\">🎬</span>\n                      <span className=\"text-white/90\">{selectedAnimeForModal.episode_count || 0} episodes</span>\n                    </div>\n                    \n                    <div className=\"flex items-center space-x-2 bg-white/10 backdrop-blur-sm rounded-lg p-3 border border-white/10\">\n                      <span className=\"text-white/70\">⭐</span>\n                      <span className=\"text-white/90\">\n                        Rating: {analyticsLoading ? 'Loading...' : (animeAnalytics?.analytics?.averageRating || 'N/A')} \n                        {!analyticsLoading && animeAnalytics?.analytics?.totalReviews > 0 && (\n                          <span className=\"text-white/60\">({animeAnalytics.analytics.totalReviews} reviews)</span>\n                        )}\n                      </span>\n                    </div>\n                    \n                    <div className=\"flex items-center space-x-2 bg-white/10 backdrop-blur-sm rounded-lg p-3 border border-white/10\">\n                      <span className=\"text-white/70\">👀</span>\n                      <span className=\"text-white/90\">\n                        {analyticsLoading ? 'Loading...' : (animeAnalytics?.analytics?.views || 0)} views\n                        {!analyticsLoading && animeAnalytics?.analytics?.completedViews > 0 && (\n                          <span className=\"text-white/60\"> ({animeAnalytics.analytics.completedViews} completed)</span>\n                        )}\n                      </span>\n                    </div>\n                    \n                    <div className=\"flex items-center space-x-2 bg-white/10 backdrop-blur-sm rounded-lg p-3 border border-white/10\">\n                      <span className=\"text-white/70\">📅</span>\n                      <span className=\"text-white/90\">{new Date(selectedAnimeForModal.created_at).toLocaleDateString()}</span>\n                    </div>\n                    \n                    <div className=\"flex items-center space-x-2 bg-white/10 backdrop-blur-sm rounded-lg p-3 border border-white/10\">\n                      <span className=\"text-white/70\">📊</span>\n                      <span className=\"text-white/90\">\n                        {analyticsLoading ? 'Loading...' : (animeAnalytics?.analytics?.reports || 0)} reports\n                      </span>\n                    </div>\n                    \n                    <div className=\"flex items-center space-x-2 bg-white/10 backdrop-blur-sm rounded-lg p-3 border border-white/10\">\n                      <span className=\"text-white/70\">🆔</span>\n                      <span className=\"font-mono text-xs text-white/90\">{selectedAnimeForModal.id}</span>\n                    </div>\n                    \n                    {selectedAnimeForModal.genres && selectedAnimeForModal.genres.length > 0 && (\n                      <div className=\"col-span-2 bg-white/10 backdrop-blur-sm rounded-lg p-3 border border-white/10\">\n                        <div className=\"flex items-center space-x-2 mb-2\">\n                          <span className=\"text-white/70\">🏷️</span>\n                          <span className=\"text-white/90 font-medium\">Genres:</span>\n                        </div>\n                        <div className=\"flex flex-wrap gap-2\">\n                          {selectedAnimeForModal.genres.map((genre: string, index: number) => (\n                            <span key={index} className=\"flex items-center space-x-1 px-2 py-1 bg-white/20 rounded-md text-white/90 text-xs\">\n                              <span>{getGenreIcon(genre)}</span>\n                              <span>{genre}</span>\n                            </span>\n                          ))}\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                </div>\n              </div>\n\n              {/* Quick Actions */}\n              <div className=\"border-t border-white/10 pt-6\">\n                <h4 className=\"text-lg font-semibold text-white drop-shadow-lg mb-4\">Quick Actions</h4>\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                  <div className=\"space-y-2\">\n                    <label className=\"block text-sm font-medium text-white/80\">Change Status</label>\n                    <select\n                      value={selectedAnimeForModal.status}\n                      onChange={(e) => {\n                        handleStatusChange(selectedAnimeForModal.id, e.target.value as any);\n                        setSelectedAnimeForModal({...selectedAnimeForModal, status: e.target.value});\n                      }}\n                      disabled={updatingAnime === selectedAnimeForModal.id}\n                      className=\"w-full px-3 py-2 bg-white/10 backdrop-blur-sm border border-white/20 rounded-lg text-white placeholder-white/50 focus:ring-2 focus:ring-white/30 focus:border-white/30 disabled:opacity-50\"\n                    >\n                      <option value=\"published\" className=\"bg-gray-800 text-white\">Published</option>\n                      <option value=\"pending\" className=\"bg-gray-800 text-white\">Pending</option>\n                      <option value=\"draft\" className=\"bg-gray-800 text-white\">Draft</option>\n                    </select>\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <label className=\"block text-sm font-medium text-white/80\">Actions</label>\n                    <div className=\"flex space-x-2\">\n                      <button\n                        onClick={() => {\n                          handleEditAnime(selectedAnimeForModal);\n                          closeAnimeModal();\n                        }}\n                        className=\"px-4 py-2 bg-purple-500/80 backdrop-blur-sm text-white rounded-lg hover:bg-purple-600/80 transition-all duration-200 border border-purple-400/30 hover:border-purple-400/50\"\n                      >\n                        Edit Anime\n                      </button>\n                      <button\n                        onClick={() => {\n                          handleAddEpisode(selectedAnimeForModal);\n                          closeAnimeModal();\n                        }}\n                        className=\"px-4 py-2 bg-green-500/80 backdrop-blur-sm text-white rounded-lg hover:bg-green-600/80 transition-all duration-200 border border-green-400/30 hover:border-green-400/50\"\n                      >\n                        Add Episode\n                      </button>\n                      <button\n                        onClick={() => {\n                          handleScrapAnime(selectedAnimeForModal);\n                        }}\n                        className=\"px-4 py-2 bg-orange-500/80 backdrop-blur-sm text-white rounded-lg hover:bg-orange-600/80 transition-all duration-200 border border-orange-400/30 hover:border-orange-400/50 flex items-center space-x-1\"\n                      >\n                        <span>🎬</span>\n                        <span>Scrap Episodes</span>\n                      </button>\n                      <button\n                        onClick={() => {\n                          handleLargeScrape(selectedAnimeForModal);\n                        }}\n                        className=\"px-4 py-2 bg-purple-500/80 backdrop-blur-sm text-white rounded-lg hover:bg-purple-600/80 transition-all duration-200 border border-purple-400/30 hover:border-purple-400/50 flex items-center space-x-1\"\n                      >\n                        <span>🚀</span>\n                        <span>Large Scrape</span>\n                      </button>\n                  <button\n                        onClick={() => {\n                          handleDeleteAnime(selectedAnimeForModal.id, selectedAnimeForModal.title);\n                          closeAnimeModal();\n                        }}\n                        disabled={updatingAnime === selectedAnimeForModal.id}\n                        className=\"px-4 py-2 bg-red-500/80 backdrop-blur-sm text-white rounded-lg hover:bg-red-600/80 disabled:opacity-50 transition-all duration-200 border border-red-400/30 hover:border-red-400/50\"\n                      >\n                        Delete Anime\n                  </button>\n                      <button\n                        onClick={closeAnimeModal}\n                        className=\"px-4 py-2 bg-white/10 backdrop-blur-sm text-white rounded-lg hover:bg-white/20 transition-all duration-200 border border-white/20 hover:border-white/30\"\n                      >\n                        Close\n                      </button>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              {/* Episodes Management */}\n              <div className=\"border-t border-white/10 pt-6\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <h4 className=\"text-lg font-semibold text-white drop-shadow-lg\">Episodes Management</h4>\n                  {episodesCache[selectedAnimeForModal?.id] && (\n                    <span className=\"px-3 py-1 bg-green-500/20 text-green-400 rounded-full text-xs font-medium border border-green-500/30\">\n                      ⚡ {episodesCache[selectedAnimeForModal.id].length} episodes loaded instantly\n                    </span>\n                  )}\n                </div>\n\n                <div className=\"space-y-3\">\n                  {episodesLoading ? (\n                    <div className=\"text-center py-8\">\n                      <div className=\"w-6 h-6 border-2 border-white/30 border-t-white rounded-full animate-spin mx-auto mb-2\"></div>\n                      <p className=\"text-white/60 text-sm\">Loading episodes...</p>\n                    </div>\n                  ) : animeEpisodes.length === 0 ? (\n                    <div className=\"text-center py-8\">\n                      <div className=\"text-white/40 text-4xl mb-2\">📺</div>\n                      <p className=\"text-white/60\">No episodes yet</p>\n                      <p className=\"text-white/40 text-sm\">Add the first episode to get started</p>\n                    </div>\n                  ) : (\n                      animeEpisodes.map((episode) => (\n                        <div key={episode.id} className=\"bg-white/10 backdrop-blur-sm rounded-lg p-4 border border-white/10\">\n                          <div className=\"flex items-center justify-between\">\n                            <div className=\"flex items-center space-x-4\">\n                              <div className=\"w-8 h-8 bg-white/20 rounded-full flex items-center justify-center text-white font-bold text-sm\">\n                                {episode.episode_number}\n                              </div>\n                              <div>\n                                <h5 className=\"text-white font-medium\">{episode.title}</h5>\n                                <p className=\"text-white/60 text-sm\">\n                                  Duration: {episode.duration ? `${Math.floor(episode.duration / 60)}:${(episode.duration % 60).toString().padStart(2, '0')}` : 'N/A'}\n                                </p>\n                                <p className=\"text-white/40 text-xs\">\n                                  Added: {new Date(episode.created_at).toLocaleDateString()}\n                                </p>\n                              </div>\n                            </div>\n                            <div className=\"flex items-center space-x-2\">\n                              <button\n                                onClick={() => handleEditEpisode(episode)}\n                                className=\"px-3 py-1 bg-blue-500/80 backdrop-blur-sm text-white rounded-md hover:bg-blue-600/80 transition-all duration-200 text-sm\"\n                              >\n                                Edit\n                              </button>\n                              <button\n                                onClick={() => handleDeleteEpisode(episode.id, episode.title)}\n                                disabled={editingEpisode === episode.id}\n                                className=\"px-3 py-1 bg-red-500/80 backdrop-blur-sm text-white rounded-md hover:bg-red-600/80 disabled:opacity-50 transition-all duration-200 text-sm\"\n                              >\n                                {editingEpisode === episode.id ? 'Deleting...' : 'Delete'}\n                              </button>\n                            </div>\n                          </div>\n                        </div>\n                      ))\n                    )}\n                </div>\n              </div>\n            </div>\n          </motion.div>\n        </div>\n      )}\n\n      {/* Add Anime Modal */}\n      <AddAnimeModal\n        isOpen={showAddAnimeModal}\n        onClose={() => setShowAddAnimeModal(false)}\n        onSuccess={handleAnimeCreated}\n      />\n\n      {/* Add Episode Modal */}\n      {selectedAnimeForEpisode && (\n        <AddEpisodeModal\n          isOpen={showAddEpisodeModal}\n          onClose={() => {\n            setShowAddEpisodeModal(false);\n            setSelectedAnimeForEpisode(null);\n          }}\n          onSuccess={handleEpisodeCreated}\n          animeId={selectedAnimeForEpisode.id}\n          animeTitle={selectedAnimeForEpisode.title}\n          nextEpisodeNumber={(selectedAnimeForEpisode.episode_count || 0) + 1}\n        />\n      )}\n\n      {/* Confirmation Dialog */}\n      <ConfirmationDialog\n        isOpen={showConfirmationDialog}\n        onClose={() => setShowConfirmationDialog(false)}\n        onConfirm={confirmationConfig?.onConfirm || (() => {})}\n        title={confirmationConfig?.title || ''}\n        message={confirmationConfig?.message || ''}\n        confirmText={confirmationConfig?.confirmText || 'Confirm'}\n        type={confirmationConfig?.type || 'danger'}\n        isLoading={updatingAnime !== null || editingEpisode !== null}\n      />\n\n      {/* Edit Episode Modal */}\n      <EditEpisodeModal\n        isOpen={showEditEpisodeModal}\n        onClose={() => {\n          setShowEditEpisodeModal(false);\n          setSelectedEpisodeForEdit(null);\n        }}\n        onSuccess={handleEpisodeUpdated}\n        episode={selectedEpisodeForEdit}\n      />\n\n      {/* Edit Anime Modal */}\n      <EditAnimeModal\n        isOpen={showEditAnimeModal}\n        onClose={() => {\n          setShowEditAnimeModal(false);\n          setSelectedAnimeForEdit(null);\n        }}\n        onSuccess={handleAnimeUpdated}\n        anime={selectedAnimeForEdit}\n      />\n\n\n      {/* Anime Importer Modal */}\n      {showImporter && (\n        <div className=\"fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center z-50 p-4\">\n          <motion.div\n            initial={{ opacity: 0, scale: 0.95 }}\n            animate={{ opacity: 1, scale: 1 }}\n            exit={{ opacity: 0, scale: 0.95 }}\n            className=\"bg-white rounded-xl shadow-2xl max-w-6xl w-full max-h-[90vh] overflow-y-auto\"\n          >\n            <div className=\"flex items-center justify-between p-6 border-b border-gray-200\">\n              <h2 className=\"text-2xl font-bold text-gray-900\">Anime Data Importer</h2>\n              <button\n                onClick={() => setShowImporter(false)}\n                className=\"text-gray-400 hover:text-gray-600 transition-colors p-2 rounded-full hover:bg-gray-100\"\n              >\n                <svg className=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n                </svg>\n              </button>\n            </div>\n            <div className=\"p-6\">\n              <EnhancedAnimeImporter />\n            </div>\n          </motion.div>\n        </div>\n      )}\n\n      {/* Episode Scraper Modal */}\n      {showScraper && (\n        <div className=\"fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center z-50 p-4\">\n          <motion.div\n            initial={{ opacity: 0, scale: 0.95 }}\n            animate={{ opacity: 1, scale: 1 }}\n            exit={{ opacity: 0, scale: 0.95 }}\n            className=\"bg-white rounded-xl shadow-2xl max-w-6xl w-full max-h-[90vh] overflow-y-auto\"\n          >\n            <div className=\"flex items-center justify-between p-6 border-b border-gray-200\">\n              <h2 className=\"text-2xl font-bold text-gray-900\">HiAnime.do Scraper</h2>\n              <button\n                onClick={() => setShowScraper(false)}\n                className=\"text-gray-400 hover:text-gray-600 transition-colors p-2 rounded-full hover:bg-gray-100\"\n              >\n                <svg className=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n                </svg>\n              </button>\n            </div>\n            <div className=\"p-6\">\n              <AnimeScraperComponent />\n            </div>\n          </motion.div>\n        </div>\n      )}\n\n      {/* Scraped Episodes Modal */}\n      {showScrapedEpisodesModal && selectedAnimeForScraping && (\n        <ScrapedEpisodesModal\n          isOpen={showScrapedEpisodesModal}\n          onClose={handleCloseScrapedEpisodesModal}\n          animeId={selectedAnimeForScraping.id}\n          animeTitle={selectedAnimeForScraping.title}\n          scrapedEpisodes={scrapedEpisodes}\n          failedEpisodes={failedEpisodes}\n          summary={scrapingSummary}\n          onEpisodesAdded={() => {\n            // Refresh episodes cache for this anime\n            if (episodesCache[selectedAnimeForScraping.id]) {\n              delete episodesCache[selectedAnimeForScraping.id];\n              setEpisodesCache({ ...episodesCache });\n            }\n          }}\n        />\n      )}\n\n      {/* Large Anime Scraper Modal */}\n      {showLargeScraper && selectedAnimeForLargeScraping && (\n        <div className=\"fixed inset-0 bg-black/50 backdrop-blur-sm z-50 flex items-center justify-center p-4\">\n          <motion.div\n            initial={{ opacity: 0, scale: 0.9 }}\n            animate={{ opacity: 1, scale: 1 }}\n            exit={{ opacity: 0, scale: 0.9 }}\n            className=\"bg-white rounded-2xl shadow-2xl max-w-4xl w-full max-h-[90vh] overflow-hidden\"\n          >\n            <div className=\"flex items-center justify-between p-6 border-b border-gray-200\">\n              <h2 className=\"text-2xl font-bold text-gray-800\">\n                🚀 Large Anime Scraper\n              </h2>\n              <button\n                onClick={handleCloseLargeScraper}\n                className=\"text-gray-500 hover:text-gray-700 transition-colors\"\n              >\n                <i className=\"ri-close-line text-2xl\"></i>\n              </button>\n            </div>\n            \n            <div className=\"p-6 overflow-y-auto max-h-[calc(90vh-120px)]\">\n              <LargeAnimeScraper\n                animeId={selectedAnimeForLargeScraping.id}\n                animeTitle={selectedAnimeForLargeScraping.title}\n                totalEpisodes={selectedAnimeForLargeScraping.total_episodes || 1000}\n                onScrapingComplete={() => {\n                  handleCloseLargeScraper();\n                  setSuccessMessage('Large scraping completed successfully!');\n                  setTimeout(() => setSuccessMessage(null), 5000);\n                }}\n              />\n            </div>\n          </motion.div>\n        </div>\n      )}\n    </div>\n  );\n}"],"file":"page-CvTwmA6e.js"}